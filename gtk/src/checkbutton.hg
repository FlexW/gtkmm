/*
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/togglebutton.h>
_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/togglebutton_p.h)

namespace Gtk
{

/** Create widgets with a discrete toggle button.
 *
 * A Gtk::CheckButton places a discrete Gtk::ToggleButton next to a widget,
 * (usually a Gtk::Label).  See Gtk::ToggleButton widgets for more
 * information about toggle/check buttons.  The important signal,
 * signal_toggled() is also inherited from Gtk::ToggleButton.
 *
 * The CheckButton widget looks like this:
 * @image html checkbutton1.png
 *
 * @ingroup Widgets
 */
class GTKMM_API CheckButton : public ToggleButton
{
  _CLASS_GTKOBJECT(CheckButton,GtkCheckButton,GTK_CHECK_BUTTON,Gtk::ToggleButton,GtkToggleButton,,,GTKMM_API)
public:

  /** Create an empty check button.
   * With an empty button, you can Gtk::Button::add() a widget such as a
   * Gtk::Image or Gtk::Box.
   *
   * If you just wish to add a Gtk::Label, you may want to use the
   * Gtk::CheckButton(const Glib::ustring& label) constructor directly
   * instead.
   */
  _CTOR_DEFAULT

  /** Create a check button with a label.
   * You won't be able to add a widget to this button since it already
   * contains a Gtk::Label
   */
  explicit CheckButton(const Glib::ustring& label, bool mnemonic = false);

  _WRAP_METHOD(void set_draw_indicator(bool draw_indicator = true), gtk_check_button_set_draw_indicator)
  _WRAP_METHOD(bool get_draw_indicator() const, gtk_check_button_get_draw_indicator)
  _WRAP_METHOD(void set_inconsistent(bool inconsistent = true), gtk_check_button_set_inconsistent)
  _WRAP_METHOD(bool get_inconsistent() const, gtk_check_button_get_inconsistent)

  _WRAP_PROPERTY("inconsistent", bool)
  _WRAP_PROPERTY("draw-indicator", bool)
};

} //namespace Gtk
