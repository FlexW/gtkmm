/*
 * Copyright (C) 1998-2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

_CONFIGINCLUDE(gtkmmconfig.h)

#include <gtk/gtk.h>

#include <sigc++/sigc++.h>
#include <gdkmm/types.h>

_DEFS(gtkmm,gtk)

#m4 _PUSH(SECTION_CC_PRE_INCLUDES)
#undef GTK_DISABLE_DEPRECATED
#define GDK_DISABLE_DEPRECATION_WARNINGS 1
#m4 _POP()

namespace Gtk
{

/** Main application class.
 * Every application must have one of these objects.
 * It may not be global and must be the first gtkmm object created.
 * It is a singleton so declaring more than one will simply access the first
 * created.
 *
 * You would normally use this class in your main() function to initialize gtkmm
 * and optionally to give argc and argv to the GTK+ initialization.
 * After calling Gtk::Main::run(), you may use Gtk::Main::quit() to exit from
 * the application, or just pass your main window to run(), to make run()
 * return when that window closes.
 *
 * A minimal gtkmm application would be something like this:
 * @code
 * int main(int argc, char *argv[])
 * {
 *   Gtk::Main kit();
 *   ... create some widgets and windows...
 *   kit.run(window);
 * }
 * @endcode
 *
 * @deprecated Use Gtk::Application instead.
 */
class GTKMM_API Main : public sigc::trackable
{
public:

_DEPRECATE_IFDEF_START
  /** Initialization without command-line arguments.
   *
   * @param set_locale Passing false prevents GTK+ from automatically calling
   * setlocale(LC_ALL, ""). You would want to pass false if you wanted to set
   * the locale for your program to something other than the user's locale, or
   * if you wanted to set different values for different locale categories.
   *
   * @deprecated Use Gtk::Application instead.
   */
  explicit Main(bool set_locale = true);

  /**
   * @deprecated Use Gtk::Application instead.
   */
  virtual ~Main();

  /** Access to the one global instance of Gtk::Main.
   *
   * @deprecated Use Gtk::Application instead.
   */
  static Gtk::Main* instance();

_DEPRECATE_IFDEF_END

  //TODO: Move these general methods out of Main when we really remove Main,
  //one day when Gtk::Application can really do everything, which should probably
  //include handling OptionContext properly. murrayc.

  /** Initialize the table of wrap_new functions.
   * This doesn't need an instance of Gtk::Main.
   * This would usually only be used by the init() methods of libraries that depend on gtkmm.
   */
  static void init_gtkmm_internals();

protected:

_DEPRECATE_IFDEF_START
  void init(bool set_locale);

private:
  static Main* instance_;
_DEPRECATE_IFDEF_END
};

} // namespace Gtk

