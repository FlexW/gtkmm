/* Copyright (C) 2002-2004 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <vector>
#include <pangomm/context.h>
#include <gdkmm/cursor.h>
#include <gdkmm/enums.h>
#include <gdkmm/timecoord.h>
#include <gdkmm/types.h>
#include <gdk/gdk.h>

_DEFS(gdkmm,gdk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gdk
{

_WRAP_ENUM(EventMask, GdkEventMask)
_WRAP_ENUM(InputSource, GdkInputSource)

class DeviceTool;
class DeviceWithPad;
class Display;
class Seat;
class Surface;

/** A Gdk::Device instance contains a detailed description of an extended input device.
 */
class Device : public Glib::Object
{
  _CLASS_GOBJECT(Device,GdkDevice,GDK_DEVICE,Glib::Object,GObject)
  _CUSTOM_WRAP_NEW

protected:
  _CTOR_DEFAULT()

public:
  _WRAP_ENUM(Type, GdkDeviceType)

  _WRAP_METHOD(Glib::ustring get_name() const, gdk_device_get_name)
  _WRAP_METHOD(bool get_has_cursor() const, gdk_device_get_has_cursor)

  _WRAP_METHOD(InputSource get_source() const, gdk_device_get_source)
  _WRAP_METHOD(int get_n_keys() const, gdk_device_get_n_keys)
  _WRAP_METHOD(bool get_key(guint index_, guint& keyval, ModifierType& modifiers) const, gdk_device_get_key)
  _WRAP_METHOD(void set_key(guint index_, guint keyval, ModifierType modifiers), gdk_device_set_key)
  _WRAP_METHOD(AxisUse get_axis_use(guint index_) const, gdk_device_get_axis_use)
  _WRAP_METHOD(void set_axis_use(guint index_, AxisUse use), gdk_device_set_axis_use)
  _WRAP_METHOD(void get_state(const Glib::RefPtr<Surface>& surface, double& axes, ModifierType& mask), gdk_device_get_state)

  /** Obtains the motion history for a device.
   * Given a starting and ending timestamp, this will return all events
   * in the motion history for the device in the given range of time.
   * Some windowing systems do not support motion history, in which case, false will be returned.
   * (This is not distinguishable from the case where motion history is supported and no events were found.)
   *
   * @param surface The surface with respect to which which the event coordinates will be reported.
   * @param start Starting timestamp for range of events to return.
   * @param stop Ending timestamp for the range of events to return.
   * @result A vector of TimeCoord.
   */
  std::vector<TimeCoord> get_history(const Glib::RefPtr<Surface>& surface, guint32 start, guint32 stop) const;
  _IGNORE(gdk_device_get_history)

#m4 _CONVERSION(`GList*',`std::vector<Glib::RefPtr<Gdk::Device> >',`Glib::ListHandler<Glib::RefPtr<Gdk::Device> >::list_to_vector($3, Glib::OWNERSHIP_SHALLOW)')
  _WRAP_METHOD(std::vector<Glib::RefPtr<Gdk::Device> > list_slave_devices(), gdk_device_list_slave_devices)
  //TODO:_WRAP_METHOD(std::vector<Glib::RefPtr<const Gdk::Device> > list_slave_devices() const, gdk_device_list_slave_devices, constversion)

  _WRAP_METHOD(int get_n_axes() const, gdk_device_get_n_axes)

#m4 _CONVERSION(`char**',`std::vector<std::string>',`Glib::ArrayHandler<std::string>::array_to_vector($3, Glib::OWNERSHIP_DEEP)')
  _WRAP_METHOD(std::vector<std::string> get_axis_names() const, gdk_device_get_axis_names)

  _WRAP_METHOD(bool get_axis_value(double& axes, const std::string& axis_label, double& value) const, gdk_device_get_axis_value )

  _WRAP_METHOD(bool get_axis(double& axes, AxisUse use, double& value) const, gdk_device_get_axis)

  _WRAP_METHOD(Glib::RefPtr<Display> get_display(), gdk_device_get_display, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Display> get_display() const, gdk_device_get_display, refreturn, constversion)

  _WRAP_METHOD(Glib::RefPtr<Device> get_associated_device(), gdk_device_get_associated_device, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Device> get_associated_device() const, gdk_device_get_associated_device, refreturn, constversion)

  _WRAP_METHOD(Type get_device_type() const, gdk_device_get_device_type)

  _WRAP_METHOD(Glib::RefPtr<Surface> get_surface_at_position(double& win_x, double& win_y),
    gdk_device_get_surface_at_position, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Surface> get_surface_at_position(double& win_x, double& win_y) const,
    gdk_device_get_surface_at_position, refreturn, constversion)

  /** Obtains the surface underneath the device.
   * Returns an empty RefPtr if the surface tree under the device is not known to GDK (for example, belongs to another application).
   *
   * As a slave device coordinates are those of its master pointer, This
   * function may not be called on devices of type Gdk::Device::Type::SLAVE,
   * unless there is an ongoing grab on them. See grab().
   *
   * @newin{3,0}
   *
   * @return The Gdk::Surface under the device position.
   */
  Glib::RefPtr<Surface> get_surface_at_position();

  /** Obtains the surface underneath the device.
   * Returns an empty RefPtr if the surface tree under the device is not known to GDK (for example, belongs to another application).
   *
   * As a slave device coordinates are those of its master pointer, This
   * function may not be called on devices of type Gdk::Device::Type::SLAVE,
   * unless there is an ongoing grab on them. See grab().
   *
   * @newin{3,0}
   *
   * @return The Gdk::Surface under the device position.
   */
  Glib::RefPtr<const Surface> get_surface_at_position() const;

  _WRAP_METHOD(Glib::RefPtr<Surface> get_last_event_surface(), gdk_device_get_last_event_surface, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Surface> get_last_event_surface() const, gdk_device_get_last_event_surface, refreturn, constversion)

  _WRAP_METHOD(Glib::ustring get_vendor_id() const, gdk_device_get_vendor_id)
  _WRAP_METHOD(Glib::ustring get_product_id(), gdk_device_get_product_id)

  _WRAP_METHOD(Glib::RefPtr<Seat> get_seat(), gdk_device_get_seat, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Seat> get_seat() const, gdk_device_get_seat, refreturn, constversion)

  _WRAP_METHOD(AxisFlags get_axes() const, gdk_device_get_axes)

  _WRAP_METHOD(guint get_num_touches() const, gdk_device_get_num_touches)
  _WRAP_METHOD(Glib::RefPtr<DeviceTool> get_device_tool(), gdk_device_get_device_tool, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const DeviceTool> get_device_tool() const, gdk_device_get_device_tool, refreturn, constversion)

  _WRAP_METHOD(bool get_caps_lock_state() const, gdk_device_get_caps_lock_state)
  _WRAP_METHOD(bool get_num_lock_state() const, gdk_device_get_num_lock_state)
  _WRAP_METHOD(bool get_scroll_lock_state() const, gdk_device_get_scroll_lock_state)
  _WRAP_METHOD(ModifierType get_modifier_state() const, gdk_device_get_modifier_state)
  _WRAP_METHOD(Pango::Direction get_direction() const, gdk_device_get_direction)
  _WRAP_METHOD(bool has_bidi_layouts() const, gdk_device_has_bidi_layouts)

  /** Checks if this %Device instance is a DeviceWithPad.
   *
   * The underlying C object is usually a subclass of GdkDevice. If that subclass
   * implements the GdkDevicePad interface, this C++ %Gdk::Device instance is
   * a Gdk::DeviceWithPad instance, and can be cast to a Gdk::DeviceWithPad
   * by device_with_pad_cast().
   *
   * @return <tt>true</tt> if this instance is a DeviceWithPad.
   *
   * @newin{3,96}
   */
  bool has_device_pad() const;

  /** Casts this %Device instance to a DeviceWithPad, if possible.
   *
   * @return A DeviceWithPad pointer, or an empty Glib::RefPtr if this %Device
   *         can't be dynamic_cast to a %DeviceWithPad.
   *
   * @newin{3,96}
   */
  Glib::RefPtr<DeviceWithPad> device_with_pad_cast();

  /** Casts this %Device instance to a DeviceWithPad, if possible.
   *
   * @return A DeviceWithPad pointer, or an empty Glib::RefPtr if this %Device
   *         can't be dynamic_cast to a %DeviceWithPad.
   *
   * @newin{3,96}
   */
  Glib::RefPtr<const DeviceWithPad> device_with_pad_cast() const;

  // We use no_default_handler because _GdkDeviceClass is private.
  _WRAP_SIGNAL(void changed(), "changed", no_default_handler, newin "3,22")
#m4 _CONVERSION(`GdkDeviceTool*',`const Glib::RefPtr<DeviceTool>&', Glib::wrap($3, true))
  _WRAP_SIGNAL(void tool_changed(const Glib::RefPtr<DeviceTool>& tool), "tool-changed", no_default_handler, newin "3,94")

  _WRAP_PROPERTY("display", Glib::RefPtr<Display>, newin "3,22")
  _WRAP_PROPERTY("name", Glib::ustring, newin "3,22")
  _WRAP_PROPERTY("type", Type, newin "3,22")
  _WRAP_PROPERTY("associated-device", Glib::RefPtr<Device>, newin "3,22")
  _WRAP_PROPERTY("source", InputSource, newin "3,22")
  _WRAP_PROPERTY("has-cursor", bool, newin "3,22")
  _WRAP_PROPERTY("n-axes", guint, newin "3,22")
  _WRAP_PROPERTY("vendor-id", Glib::ustring, newin "3,22")
  _WRAP_PROPERTY("product-id", Glib::ustring, newin "3,22")
  _WRAP_PROPERTY("seat", Glib::RefPtr<Seat>, newin "3,22")
  _WRAP_PROPERTY("num-touches", guint, newin "3,22")
  _WRAP_PROPERTY("axes", AxisFlags)
  _WRAP_PROPERTY("tool", Glib::RefPtr<DeviceTool>, newin "3,94")
  _WRAP_PROPERTY("direction", Pango::Direction)
  _WRAP_PROPERTY("has-bidi-layouts", bool)
  _WRAP_PROPERTY("caps-lock-state", bool)
  _WRAP_PROPERTY("num-lock-state", bool)
  _WRAP_PROPERTY("scroll-lock-state", bool)
  _WRAP_PROPERTY("modifier-state", ModifierType)
};

} // namespace Gdk
