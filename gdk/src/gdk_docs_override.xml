<root>
<substitute_type_name from="GIcon" to="Gio::Icon" />
<substitute_type_name from="GAppInfo" to="Gio::AppInfo" />
<substitute_type_name from="GSettings" to="Gio::Settings" />
<substitute_type_name from="GInputStream" to="Gio::InputStream" />
<substitute_type_name from="GCancellable" to="Gio::Cancellable" />
<substitute_type_name from="GdkCursorType" to="Gdk::Cursor::Type" />
<substitute_type_name from="GdkDeviceType" to="Gdk::Device::Type" />
<substitute_type_name from="GdkEventType" to="Gdk::Event::Type" />
<substitute_type_name from="GdkPixbufRotation" to="Gdk::Pixbuf::Rotation" />
<substitute_type_name from="GdkSeatCapabilities" to="Gdk::Seat::Capabilities" />
<substitute_type_name from="GdkWindowType" to="Gdk::Window::Type" />
<substitute_type_name from="GdkWindowState" to="Gdk::Window::State" />
<substitute_type_name from="GdkWindowHints" to="Gdk::Window::Hints" />
<substitute_type_name from="GdkWindowTypeHint" to="Gdk::Window::TypeHint" />
<substitute_type_name from="GdkVisualType" to="Gdk::Visual::Type" />

<substitute_enumerator_name from_prefix="CAIRO_FORMAT_" to_prefix="Cairo::Surface::Format::" />
<substitute_enumerator_name from_prefix="GDK_TOUCH_" to_prefix="Gdk::Event::Type::TOUCH_" />
<substitute_enumerator_name from_prefix="GDK_DEVICE_TYPE_" to_prefix="Gdk::Device::Type::" />
<substitute_enumerator_name from_prefix="GDK_ACTION_" to_prefix="Gdk::DragAction::" />
<substitute_enumerator_name from_prefix="GDK_WINDOW_" to_prefix="Gdk::Window::Type::" />
<substitute_enumerator_name from_prefix="GDK_WINDOW_STATE_" to_prefix="Gdk::Window::State::" />
<substitute_enumerator_name from_prefix="GDK_WINDOW_TYPE_HINT_" to_prefix="Gdk::Window::TypeHint::" />
<substitute_enumerator_name from_prefix="GDK_WINDOW_EDGE_" to_prefix="Gdk::WindowEdge::" />
<substitute_enumerator_name from_prefix="GDK_PIXBUF_ALPHA_" to_prefix="Gdk::PixbufAlphaMode::" />
<substitute_enumerator_name from_prefix="G_IO_ERROR_" to_prefix="Gio::Error::" />
<substitute_enumerator_name from_prefix="GDK_INTERP_" to_prefix="Gdk::InterpType::" />
<substitute_enumerator_name from_prefix="GDK_SEAT_CAPABILITY_" to_prefix="Gdk::Seat::Capabilities::" />
<substitute_enumerator_name from_prefix="GDK_GRAB_" to_prefix="Gdk::GrabStatus::" />
<substitute_enumerator_name from_prefix="GDK_MODIFIER_RESERVED_" to_prefix="Gdk::ModifierType::MODIFIER_RESERVED_" />
<substitute_enumerator_name from_prefix="GDK_ANCHOR_" to_prefix="Gdk::AnchorHints::" />
<substitute_enumerator_name from_prefix="GDK_GRAVITY_" to_prefix="Gdk::Gravity::" />
<substitute_enumerator_name from_prefix="GDK_DECOR_" to_prefix="Gdk::WMDecoration::" />
<substitute_enumerator_name from_prefix="GDK_FUNC_" to_prefix="Gdk::WMFunction::" />
<substitute_enumerator_name from_prefix="GDK_FULLSCREEN_" to_prefix="Gdk::FullscreenMode::" />
<substitute_enumerator_name from_prefix="GDK_VISUAL_" to_prefix="Gdk::Visual::Type::" />
<substitute_enumerator_name from_prefix="GDK_TOUCHPAD_GESTURE_PHASE_" to_prefix="Gdk::TouchpadGesturePhase::" />
<substitute_enumerator_name from_prefix="GDK_MODIFIER_INTENT_" to_prefix="Gdk::ModifierIntent::" />
<substitute_enumerator_name from_prefix="GDK_COLORSPACE_" to_prefix="Gdk::Colorspace::" />
<substitute_enumerator_name from_prefix="GDK_MODE_" to_prefix="Gdk::InputMode::" />
<substitute_enumerator_name from_prefix="GDK_SOURCE_" to_prefix="Gdk::InputSource::" />
<substitute_enumerator_name from_prefix="GDK_SUBPIXEL_LAYOUT_" to_prefix="Gdk::SubpixelLayout::" />
<!-- Some enums have enumerators without unique prefixes. Handle these enumerators individually. -->
<substitute_enumerator_name from="GDK_POINTER_MOTION_HINT_MASK" to="Gdk::EventMask::POINTER_MOTION_HINT_MASK" />
<substitute_enumerator_name from="GDK_MOTION_NOTIFY" to="Gdk::Event::Type::MOTION_NOTIFY" />
<substitute_enumerator_name from="GDK_POINTER_MOTION_HINT_MASK" to="Gdk::EventMask::POINTER_MOTION_HINT_MASK" />
<substitute_enumerator_name from="GDK_TOUCH_MASK" to="Gdk::EventMask::TOUCH_MASK" />
<substitute_enumerator_name from="GDK_2BUTTON_PRESS" to="Gdk::Event::Type::2BUTTON_PRESS" />
<substitute_enumerator_name from="GDK_3BUTTON_PRESS" to="Gdk::Event::Type::3BUTTON_PRESS" />
<substitute_enumerator_name from="GDK_DOUBLE_BUTTON_PRESS" to="Gdk::Event::Type::DOUBLE_BUTTON_PRESS" />
<substitute_enumerator_name from="GDK_TRIPLE_BUTTON_PRESS" to="Gdk::Event::Type::TRIPLE_BUTTON_PRESS" />
<substitute_enumerator_name from="GDK_BUTTON_PRESS" to="Gdk::Event::Type::BUTTON_PRESS" />
<substitute_enumerator_name from="GDK_WINDOW_STATE" to="Gdk::Event::Type::WINDOW_STATE" />
<substitute_enumerator_name from="GDK_BUTTON_PRESS_MASK" to="Gdk::EventMask::BUTTON_PRESS_MASK" />
<substitute_enumerator_name from="GDK_SUPER_MASK" to="Gdk::ModifierType::SUPER_MASK" />
<substitute_enumerator_name from="GDK_HYPER_MASK" to="Gdk::ModifierType::HYPER_MASK" />
<substitute_enumerator_name from="GDK_META_MASK" to="Gdk::ModifierType::META_MASK" />
<substitute_enumerator_name from="GDK_MODIFIER_MASK" to="Gdk::ModifierType::MODIFIER_MASK" />
<substitute_enumerator_name from="GDK_BUTTON4_MASK" to="Gdk::ModifierType::BUTTON4_MASK" />
<substitute_enumerator_name from="GDK_BUTTON5_MASK" to="Gdk::ModifierType::BUTTON5_MASK" />
<substitute_enumerator_name from="GDK_CONTROL_MASK" to="Gdk::ModifierType::CONTROL_MASK" />
<substitute_enumerator_name from="GDK_MOD2_MASK" to="Gdk::ModifierType::MOD2_MASK" />
<substitute_enumerator_name from="GDK_BLANK_CURSOR" to="Gdk::Cursor::Type::BLANK_CURSOR" />
<!-- These are preprocessor defines. Don't substitute. -->
<substitute_enumerator_name from="GDK_CURRENT_TIME" to="GDK_CURRENT_TIME" />
<substitute_enumerator_name from="GDK_PIXBUF_ERROR" to="GDK_PIXBUF_ERROR" />
<substitute_enumerator_name from="G_TYPE_INVALID" to="G_TYPE_INVALID" />
<substitute_enumerator_name from="G_FILE_ERROR" to="G_FILE_ERROR" />
<substitute_enumerator_name from="G_IO_ERROR" to="G_IO_ERROR" />
<substitute_enumerator_name from="GDK_BUTTON_SECONDARY" to="GDK_BUTTON_SECONDARY" />

<function name="gdk_display_manager_list_displays">
<return> a list of #GdkDisplay objects.
</return>
</function>


<function name="gdk_screen_get_toplevel_windows">
<description>
Obtains a list of all toplevel windows known to GDK on the screen @screen.
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).
Since: 2.2
</description>
<return> list of toplevel windows.
</return>
</function>


<function name="gdk_screen_list_visuals">
<description>
Lists the available visuals for the specified @screen.
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.
Since: 2.2
</description>
<return> a list of visuals.
</return>
</function>


<function name="gdk_window_invalidate_rect">
<description>
A convenience wrapper around invalidate_region() which
invalidates a rectangular region. See invalidate_region() for details.
See also the invalidate_rect() method overload with no rect parameter, to 
invalidate the whole region. 

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to invalidate
</parameter_description>
</parameter>
<parameter name="invalidate_children">
<parameter_description> whether to also invalidate child windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_status">
    <mapping class="DragContext" />
</function>

<function name="gdk_keymap_get_for_display">
    <mapping class="Display" />
</function>

<function name="gdk_drop_finish">
    <mapping class="DragContext" />
</function>

<function name="gdk_drop_reply">
    <mapping class="DragContext" />
</function>

<function name="gdk_drag_find_window_for_screen">
    <mapping class="DragContext" />
</function>

<function name="gdk_drag_get_selection">
    <mapping class="DragContext" />
</function>

<function name="gdk_pixbuf_animation_iter_get_delay_time">
<description>
Gets the number of milliseconds the current pixbuf should be displayed,
or -1 if the current pixbuf should be displayed forever. Glib::signal_timeout.connect()
conveniently takes a timeout in milliseconds, so you can use a timeout
to schedule the next update.

Since: 2.14
</description>
</function>

<function name="gdk_pixbuf_animation_iter_get_pixbuf">
<description>
Gets the current pixbuf which should be displayed; the pixbuf will
be the same size as the animation itself
(Gdk::Pixbuf::get_width(), Gdk::Pixbuf:get_height()). 
This pixbuf should be displayed for get_delay_time() milliseconds. 
The returned pixbuf will become invalid when the iterator advances
to the next frame, which may happen anytime you call
gdk_pixbuf_animation_iter_advance(). Copy the pixbuf to keep it, with 
Gdk::Pixbuf::copy() as it may get recycled as you advance the iterator.

Since: 2.14
</description>
</function>

<function name="gdk_pixbuf_animation_iter_on_currently_loading_frame">
<description>
Used to determine how to respond to the area_updated signal on
Gdk::PixbufLoader when loading an animation. The area_updated signal is emitted
for an area of the frame currently streaming in to the loader. So if
you&apos;re on the currently loading frame, you need to redraw the screen for
the updated area.

Since: 2.14
</description>
</function>

<function name="gdk_pixbuf_animation_iter_advance">
<description>
Possibly advances an animation to a new frame. Chooses the frame based
on the start time passed to Gdk::PixbufAnimation::get_iter().

@current_time would normally come from g_get_current_time(), and
must be greater than or equal to the time passed to
Gdk::PixbufAnimation::get_iter(), and must increase or remain
unchanged each time get_pixbuf() is
called. That is, you can&apos;t go backward in time; animations only
play forward.

If using the method overload that takes no current_time parameter then the 
current time will be used. So you only need to explicitly pass
@current_time if you&apos;re doing something odd like playing the animation
at double speed.

If this function returns %FALSE, there&apos;s no need to update the animation
display, assuming the display had been rendered prior to advancing;
if %TRUE, you need to call get_pixbuf() and update the
display with the new pixbuf.

Since: 2.14
</description>
</function>

<function name="gdk_window_set_cursor">
<description>
Sets the mouse pointer for a #GdkWindow. 
To make the cursor invisible, use gdk_cursor_new_from_pixmap() to create
a cursor with no pixels in it.
</description>
</function>

<function name="gdk_cairo_create">
<description>
Creates a Cairo context for drawing to @drawable.

Since: 2.10
</description>
<parameters>
</parameters>
<return> A newly created Cairo context.
</return>
</function>

<function name="gdk_window_get_update_area">
<description>
Transfers ownership of the update area from @window to the caller
of the function. That is, after calling this function, @window will
no longer have an invalid/dirty region; the update area is removed
from @window and handed to you. If a window has no update area,
get_update_area() returns an invalid Region.
</description>
</function>

<!-- TODO: Remove this function description when gtk+'s description contains -->
<!-- the correct number of parameters (@event). -->
<function name="gdk_event_get_pointer_emulated">
<description>
Returns whether this event is an 'emulated' pointer event (typically
from a touch event), as opposed to a real one.

Since: 3.22
</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this event is emulated

</return>
</function>

</root>
