/* Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gdk/gdk.h>
#include <gdkmm/cairoutils.h>
#include <gdkmm/contentprovider.h>
#include <gdkmm/cursor.h>
#include <gdkmm/device.h>
#include <gdkmm/types.h>
#include <gdkmm/glcontext.h>
#include <gdkmm/drawcontext.h>
#include <gdkmm/drawingcontext.h>
#include <gdkmm/frameclock.h>

using Type = Gdk::Window::Type;
using State = Gdk::Window::State;
using TypeHint = Gdk::Window::TypeHint;

namespace Gdk
{

void Window::set_cursor()
{
  gdk_window_set_cursor(gobj(), nullptr);
}

void Window::set_device_cursor(const Glib::RefPtr<Gdk::Device>& device)
{
  gdk_window_set_device_cursor(gobj(), Glib::unwrap(device), nullptr);
}

void Window::unset_icon()
{
  gdk_window_set_icon_name(gobj(), nullptr); /* See GDK docs */
}

void Window::invalidate(bool invalidate_children)
{
  gdk_window_invalidate_rect(gobj(), nullptr, invalidate_children);
}

void Window::restack(bool above)
{
  gdk_window_restack(gobj(), nullptr, above);
}

} // namespace Gdk
