/* Copyright(C) 1998-2010 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

_CONFIGINCLUDE(gdkmmconfig.h)

#include <glibmm/object.h>
#include <gdkmm/dragcontext.h>
#include <gdkmm/types.h>
#include <cairomm/region.h>
#include <cairomm/pattern.h>
#include <gdkmm/device.h>
#include <gdkmm/event.h>
#include <gdkmm/rectangle.h>
#include <gdkmm/rgba.h>
#include <cairomm/context.h>
#include <gdk/gdk.h>

_DEFS(gdkmm,gdk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gdk
{

_WRAP_ENUM(WMDecoration, GdkWMDecoration)
_WRAP_ENUM(WMFunction, GdkWMFunction)
_WRAP_ENUM(WindowEdge, GdkWindowEdge)
_WRAP_ENUM(Gravity, GdkGravity)
_WRAP_ENUM(AnchorHints, GdkAnchorHints)
_WRAP_ENUM(FullscreenMode, GdkFullscreenMode,
  s#^CURRENT_MONITOR$#ON_CURRENT_MONITOR#,
  s#^ALL_MONITORS$#ON_ALL_MONITORS#)

class ContentProvider;
class Cursor;
class GLContext;
class DrawContext;
class DrawingContext;
class FrameClock;

/** A Gdk::Window is a rectangular region on the screen. It's a low-level object, used to implement high-level objects such
 * as Gtk::Widget and Gtk::Window on the GTK+ level. A Gtk::Window is a toplevel window, the thing a user might think of as
 * a "window" with a titlebar and so on; a Gtk::Window may contain many Gdk::Windows. For example, each Gtk::Button has a
 * Gdk::Window associated with it.
 */
class Window : public Glib::Object
{
  _CLASS_GOBJECT(Window, GdkWindow, GDK_WINDOW, Glib::Object, GObject)
  _STRUCT_NOT_HIDDEN
  _IGNORE(gdk_window_destroy, gdk_window_is_destroyed)

public:
  _WRAP_ENUM(Type, GdkWindowType)
  _WRAP_ENUM(State, GdkWindowState)
  _WRAP_ENUM(Hints, GdkWindowHints)
  _WRAP_ENUM(TypeHint, GdkWindowTypeHint)

  // _WRAP_CREATE() would not be very useful here.
  // The gdk_window_new_*() functions do more than call g_object_new().
  // And we can't make one hand-coded constructor for each gdk_window_new_*()
  // function, because some of them have identical prototypes.
  _WRAP_METHOD(static Glib::RefPtr<Window> create_toplevel(const Glib::RefPtr<Display>& display,
    int width, int height), gdk_window_new_toplevel)
  _WRAP_METHOD(static Glib::RefPtr<Window> create_popup(const Glib::RefPtr<Display>& display,
    const Rectangle& position), gdk_window_new_popup)
  //TODO: Wrap or ignore? The documentation says: You most likely do not want to use this function.
  //_WRAP_METHOD(static Glib::RefPtr<Window> create_temp(const Glib::RefPtr<Display>& display), gdk_window_new_temp)
  _WRAP_METHOD(static Glib::RefPtr<Window> create_child(const Glib::RefPtr<Window>& parent,
    const Rectangle& position), gdk_window_new_child)

  _WRAP_METHOD(Type get_window_type() const, gdk_window_get_window_type)

  _WRAP_METHOD(Glib::RefPtr<Display> get_display(), gdk_window_get_display, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Display> get_display() const, gdk_window_get_display, refreturn, constversion)

  _WRAP_METHOD(void show(), gdk_window_show)
  _WRAP_METHOD(void hide(), gdk_window_hide)
  _WRAP_METHOD(void withdraw(), gdk_window_withdraw)
  _WRAP_METHOD(void show_unraised(), gdk_window_show_unraised)
  _WRAP_METHOD(void move(int x, int y), gdk_window_move)
  _WRAP_METHOD(void resize(int width, int height), gdk_window_resize)
  _WRAP_METHOD(void move_resize(int x, int y, int width, int height), gdk_window_move_resize)
  _WRAP_METHOD(void raise(), gdk_window_raise)
  _WRAP_METHOD(void lower(), gdk_window_lower)

  _WRAP_METHOD(void restack(const Glib::RefPtr<Window>& sibling, bool above), gdk_window_restack)

  /** Changes the position of this window in the Z-order (stacking order). This
   * either raises (if @a above is true) or lowers the window.
   *
   * If this is a toplevel, the window manager may choose to deny the
   * request to move the window in the Z-order. restack() only
   * requests the restack but does not guarantee it.
   *
   * @param above Whether to raise or lower the window.
   *
   * @newin{2,18}
   */
  void restack(bool above);

  _WRAP_METHOD(void focus(guint32 timestamp), gdk_window_focus)
  _WRAP_METHOD(void set_user_data(gpointer user_data), gdk_window_set_user_data)

  _WRAP_METHOD(void scroll(int dx, int dy), gdk_window_scroll)
  _WRAP_METHOD(void move_region(const ::Cairo::RefPtr< ::Cairo::Region>& region, int dx, int dy), gdk_window_move_region)

  _WRAP_METHOD(void shape_combine_region(const ::Cairo::RefPtr< ::Cairo::Region>& shape_region, int offset_x = 0, int offset_y = 0), gdk_window_shape_combine_region)
  _WRAP_METHOD(void set_child_shapes(), gdk_window_set_child_shapes)
  _WRAP_METHOD(void merge_child_shapes(), gdk_window_merge_child_shapes)

  _WRAP_METHOD(void input_shape_combine_region(const ::Cairo::RefPtr< ::Cairo::Region>& shape_region, int offset_x, int offset_y), gdk_window_input_shape_combine_region)
  _WRAP_METHOD(void set_child_input_shapes(), gdk_window_set_child_input_shapes)
  _WRAP_METHOD(void merge_child_input_shapes(), gdk_window_merge_child_input_shapes)

  _WRAP_METHOD(void set_pass_through(bool pass_through = true), gdk_window_set_pass_through)
  _WRAP_METHOD(bool get_pass_through() const, gdk_window_get_pass_through)

  _WRAP_METHOD(bool is_visible() const, gdk_window_is_visible)
  _WRAP_METHOD(bool is_viewable() const, gdk_window_is_viewable)
  _WRAP_METHOD(bool is_input_only() const, gdk_window_is_input_only)
  _WRAP_METHOD(bool is_shaped() const, gdk_window_is_shaped)
  _WRAP_METHOD(State get_state() const, gdk_window_get_state)
  _WRAP_METHOD(bool has_native() const, gdk_window_has_native)
  _WRAP_METHOD(void set_type_hint(TypeHint hint), gdk_window_set_type_hint)
  _WRAP_METHOD(TypeHint get_type_hint(), gdk_window_get_type_hint)
  _WRAP_METHOD(bool get_modal_hint() const, gdk_window_get_modal_hint)
  _WRAP_METHOD(void set_modal_hint(bool modal = true), gdk_window_set_modal_hint)
  _WRAP_METHOD(void set_geometry_hints(const Geometry& geometry, Hints geom_mask), gdk_window_set_geometry_hints)
  _WRAP_METHOD(void set_title(const Glib::ustring& title), gdk_window_set_title)
  _WRAP_METHOD(void set_role(const Glib::ustring& role), gdk_window_set_role)
  _WRAP_METHOD(void set_startup_id(const Glib::ustring& startup_id), gdk_window_set_startup_id)
  _WRAP_METHOD(void set_transient_for(const Glib::RefPtr<Window>& parent), gdk_window_set_transient_for)

  _WRAP_METHOD(void set_cursor(const Glib::RefPtr<Cursor>& cursor), gdk_window_set_cursor)

  /** Use the parent window's cursor.
   * For top-level windows this means that it will use the default cursor for the ROOT window.
   */
  void set_cursor();

  _WRAP_METHOD(void set_device_cursor(const Glib::RefPtr<Device>& device, const Glib::RefPtr<Cursor>& cursor), gdk_window_set_device_cursor)

  /** Use the parent window's cursor.
   * For top-level windows this means that it will use the default cursor for the ROOT window.
   */
  void set_device_cursor(const Glib::RefPtr<Device>& device);

  _WRAP_METHOD(Glib::RefPtr<Cursor> get_device_cursor(const Glib::RefPtr<Device>& device), gdk_window_get_device_cursor, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Cursor> get_device_cursor(const Glib::RefPtr<const Device>& device) const, gdk_window_get_device_cursor, refreturn)


  _WRAP_METHOD(Glib::RefPtr<Cursor> get_cursor(), gdk_window_get_cursor, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Cursor> get_cursor() const, gdk_window_get_cursor, refreturn, constversion)

  _WRAP_METHOD(void get_user_data(gpointer* data), gdk_window_get_user_data)
  _WRAP_METHOD(void get_geometry(int& x, int& y, int& width, int& height) const, gdk_window_get_geometry)
  _WRAP_METHOD(int get_width() const, gdk_window_get_width)
  _WRAP_METHOD(int get_height() const, gdk_window_get_height)

  _WRAP_METHOD(void get_position(int& x, int& y) const, gdk_window_get_position)
  _WRAP_METHOD(int get_origin(int& x, int& y) const, gdk_window_get_origin)
  _WRAP_METHOD(void get_root_coords(int x, int y, int& root_x, int& root_y), gdk_window_get_root_coords)
  _WRAP_METHOD(void coords_to_parent(double x,  double y, double& parent_x, double& parent_y), gdk_window_coords_to_parent)
  _WRAP_METHOD(void coords_from_parent(double parent_x, double parent_y, double& x, double& y), gdk_window_coords_from_parent)

  _WRAP_METHOD(void get_root_origin(int& x, int& y) const, gdk_window_get_root_origin)

  _WRAP_METHOD(void get_frame_extents(Rectangle& rect) const, gdk_window_get_frame_extents)

  _WRAP_METHOD(int get_scale_factor() const, gdk_window_get_scale_factor)
  _WRAP_METHOD(Glib::RefPtr<Window> get_parent(), gdk_window_get_parent, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Window> get_parent() const, gdk_window_get_parent, refreturn, constversion)
  _WRAP_METHOD(Glib::RefPtr<Window> get_toplevel(), gdk_window_get_toplevel, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Window> get_toplevel() const, gdk_window_get_toplevel, refreturn, constversion)

  _WRAP_METHOD(Glib::RefPtr<Window> get_device_position(const Glib::RefPtr<const Device>& device, int& x, int& y, ModifierType& mask) const, gdk_window_get_device_position, refreturn)

    _WRAP_METHOD(Glib::RefPtr<Window> get_device_position(const Glib::RefPtr<const Device>& device, double& x, double& y, ModifierType& mask) const, gdk_window_get_device_position_double, refreturn)

#m4 _CONVERSION(`GList*',`std::vector< Glib::RefPtr<Window> >',`Glib::ListHandler<Glib::RefPtr<Window> >::list_to_vector($3, Glib::OWNERSHIP_SHALLOW)')
  _WRAP_METHOD(std::vector< Glib::RefPtr<Window> > get_children(), gdk_window_get_children)
#m4 _CONVERSION(`GList*',`std::vector< Glib::RefPtr<const Window> >',`Glib::ListHandler<Glib::RefPtr<const Window> >::list_to_vector($3, Glib::OWNERSHIP_SHALLOW)')
  _WRAP_METHOD(std::vector< Glib::RefPtr<const Window> > get_children() const, gdk_window_get_children)
  _IGNORE(gdk_window_peek_children) //gdk_window_peek_children() is the same as gdk_window_get_children() with different memory mangement of the list.

  _WRAP_METHOD(EventMask get_events() const, gdk_window_get_events)
  _WRAP_METHOD(void set_events(EventMask event_mask), gdk_window_set_events)

  _WRAP_METHOD(EventMask get_device_events(const Glib::RefPtr<const Device>& device) const, gdk_window_get_device_events)
  _WRAP_METHOD(void set_device_events(const Glib::RefPtr<Device>& device, EventMask event_mask), gdk_window_set_device_events)

#m4 _CONVERSION(`const std::vector<Glib::RefPtr<Texture>>&',`GList*',`Glib::ListHandler<Glib::RefPtr<Texture>>::vector_to_list($3).data()')
  _WRAP_METHOD(void set_icon_list(const std::vector<Glib::RefPtr<Texture>>& textures), gdk_window_set_icon_list)
  void unset_icon();
  _WRAP_METHOD(void set_icon_name(const Glib::ustring& name), gdk_window_set_icon_name)

  _WRAP_METHOD(void set_group(const Glib::RefPtr<Window>& leader), gdk_window_set_group)
  _WRAP_METHOD(Glib::RefPtr<Window> get_group(), gdk_window_get_group)
  _WRAP_METHOD(Glib::RefPtr<const Window> get_group() const, gdk_window_get_group, constversion)

  _WRAP_METHOD(void set_decorations(WMDecoration decorations), gdk_window_set_decorations)
  _WRAP_METHOD(bool get_decorations(WMDecoration& decorations) const, gdk_window_get_decorations)
  _WRAP_METHOD(void set_functions(WMFunction functions), gdk_window_set_functions)

  #m4 _CONVERSION(`::Cairo::Content',`cairo_content_t',`(cairo_content_t)($3)')
  _WRAP_METHOD(::Cairo::RefPtr< ::Cairo::Surface> create_similar_surface(::Cairo::Content content, int width,  int height), gdk_window_create_similar_surface )

  #m4 _CONVERSION(`::Cairo::Surface::Format',`cairo_format_t',`(cairo_format_t)($3)')
    _WRAP_METHOD(::Cairo::RefPtr< ::Cairo::Surface> create_similar_image_surface(::Cairo::Surface::Format format, int width, int height, int scale), gdk_window_create_similar_image_surface )

  _WRAP_METHOD(void beep(), gdk_window_beep)

  _WRAP_METHOD(void iconify(), gdk_window_iconify)
  _WRAP_METHOD(void deiconify(), gdk_window_deiconify)
  _WRAP_METHOD(void stick(), gdk_window_stick)
  _WRAP_METHOD(void unstick(), gdk_window_unstick)
  _WRAP_METHOD(void maximize(), gdk_window_maximize)
  _WRAP_METHOD(void unmaximize(), gdk_window_unmaximize)
  _WRAP_METHOD(void register_dnd(), gdk_window_register_dnd)

  _WRAP_METHOD(void begin_resize_drag(WindowEdge edge, int button, int root_x, int root_y, guint32 timestamp), gdk_window_begin_resize_drag)

  _WRAP_METHOD(void resize_drag(WindowEdge edge, const Glib::RefPtr<Device>& device, int button, int root_x, int root_y, guint32 timestamp), gdk_window_begin_resize_drag_for_device)

  _WRAP_METHOD(void begin_move_drag(int button, int root_x, int root_y, guint32 timestamp), gdk_window_begin_move_drag)

  _WRAP_METHOD(void begin_move_drag(const Glib::RefPtr<Device>& device, int button, int root_x, int root_y, guint32 timestamp), gdk_window_begin_move_drag_for_device)

  _WRAP_METHOD(Glib::RefPtr<DragContext> drag_begin_from_point(const Glib::RefPtr<Device>& device,
    const Glib::RefPtr<ContentProvider>& content, DragAction actions, int dx, int dy), gdk_drag_begin)

  _WRAP_METHOD(void invalidate_rect(const Rectangle& rect, bool invalidate_children), gdk_window_invalidate_rect)

  /** A convenience wrapper around invalidate_region() which
   * invalidates the whole region. See invalidate_region() for details.
   * @param invalidate_children Whether to also invalidate child windows.
   */
  void invalidate(bool invalidate_children);

  _WRAP_METHOD(void invalidate_region(const ::Cairo::RefPtr< ::Cairo::Region>& region, bool invalidate_children = true), gdk_window_invalidate_region)

  //TODO:
  /*
  void       gdk_window_invalidate_maybe_recurse  (GdkWindow          *window,
						 const cairo_region_t    *region,
						 gboolean (*child_func) (GdkWindow *, gpointer),
						 gpointer   user_data);
	*/

  //This method should not have a const version - see the docs
  _WRAP_METHOD(::Cairo::RefPtr< ::Cairo::Region> get_update_area(), gdk_window_get_update_area)

  _WRAP_METHOD(void freeze_updates(), gdk_window_freeze_updates)
  _WRAP_METHOD(void thaw_updates(), gdk_window_thaw_updates)

  _WRAP_METHOD(static void constrain_size(const Geometry& geometry, Hints flags,
    int width, int height, int& new_width, int& new_height), gdk_window_constrain_size)

  _WRAP_METHOD(void set_skip_taskbar_hint(bool skips_taskbar = true), gdk_window_set_skip_taskbar_hint)
  _WRAP_METHOD(void set_skip_pager_hint(bool skips_pager = true), gdk_window_set_skip_pager_hint)

  _WRAP_METHOD(void set_urgency_hint(bool urgent = true), gdk_window_set_urgency_hint)

  _WRAP_METHOD(void fullscreen(), gdk_window_fullscreen)
  _WRAP_METHOD(void set_fullscreen_mode(FullscreenMode mode), gdk_window_set_fullscreen_mode)
  _WRAP_METHOD(FullscreenMode get_fullscreen_mode() const, gdk_window_get_fullscreen_mode)
  _WRAP_METHOD(void unfullscreen(), gdk_window_unfullscreen)

  _WRAP_METHOD(void set_keep_above(bool setting = true), gdk_window_set_keep_above)
  _WRAP_METHOD(void set_keep_below(bool setting = true), gdk_window_set_keep_below)

  _WRAP_METHOD(void set_opacity(double opacity), gdk_window_set_opacity)

  _WRAP_METHOD(bool get_accept_focus() const, gdk_window_get_accept_focus)
  _WRAP_METHOD(void set_accept_focus(bool accept_focus = true), gdk_window_set_accept_focus)

  _WRAP_METHOD(bool get_focus_on_map() const, gdk_window_get_focus_on_map)
  _WRAP_METHOD(void set_focus_on_map(bool focus_on_map), gdk_window_set_focus_on_map)

  _WRAP_METHOD(void set_support_multidevice(bool support_multidevice = true), gdk_window_set_support_multidevice)
  _WRAP_METHOD(bool get_support_multidevice(), gdk_window_get_support_multidevice)

  _WRAP_METHOD(Glib::RefPtr<FrameClock> get_frame_clock(), gdk_window_get_frame_clock, refreturn, newin "3,94")
  _WRAP_METHOD(Glib::RefPtr<const FrameClock> get_frame_clock() const, gdk_window_get_frame_clock, refreturn, constversion, newin "3,94")

  //This is const because it returns a copy (though that is not very clear from the C documentation)
  _WRAP_METHOD(::Cairo::RefPtr< ::Cairo::Region> get_clip_region() const, gdk_window_get_clip_region)

  //This is const because it returns a copy (though that is not very clear from the C documentation)
  _WRAP_METHOD(::Cairo::RefPtr< ::Cairo::Region> get_visible_region() const, gdk_window_get_visible_region)

  _WRAP_METHOD(void set_opaque_region(const ::Cairo::RefPtr<const ::Cairo::Region>& region), gdk_window_set_opaque_region)

  _WRAP_METHOD(void set_shadow_width(int left, int right, int top, int bottom), gdk_window_set_shadow_width)

  _WRAP_METHOD(bool show_window_menu(const Glib::RefPtr<const Event>& event), gdk_window_show_window_menu)

  /** Creates a new GLContext matching the framebuffer format to the visual of the
   * Window. The context is disconnected from any particular window or surface.
   *
   * If the creation of the GLContext failed an error will be thrown.
   *
   * Before using the returned GLContext, you will need to call
   * GLContext::make_current() or GLContext::realize().
   *
   * @newin{3,18}
   *
   * @return GLContext The newly created context.
   *
   * @throws GLError On missing GL implementation or extension required for context creation.
   */
  _WRAP_METHOD(Glib::RefPtr<Gdk::GLContext> create_gl_context(), gdk_window_create_gl_context, errthrow)

  _WRAP_METHOD(Glib::RefPtr<DrawingContext> begin_draw_frame(const Glib::RefPtr<DrawContext>& context{?}, const ::Cairo::RefPtr<const ::Cairo::Region>& region), gdk_window_begin_draw_frame, refreturn)
  _WRAP_METHOD(void end_draw_frame(const Glib::RefPtr<DrawingContext>& context), gdk_window_end_draw_frame)

  _IGNORE_SIGNAL("moved-to-rect")dnl// Private

  _WRAP_PROPERTY("cursor", Glib::RefPtr<Cursor>)
  _WRAP_PROPERTY("display", Glib::RefPtr<Display>)
  _WRAP_PROPERTY("state", State)
};

} // namespace Gdk
