<root>
<enum name="GdkAnchorHints">
<description>
Positioning hints for aligning a surface relative to a rectangle.

These hints determine how the surface should be positioned in the case that
the surface would fall off-screen if placed in its ideal position.

For example, %GDK_ANCHOR_FLIP_X will replace %GDK_GRAVITY_NORTH_WEST with
%GDK_GRAVITY_NORTH_EAST and vice versa if the surface extends beyond the left
or right edges of the monitor.

If %GDK_ANCHOR_SLIDE_X is set, the surface can be shifted horizontally to fit
on-screen. If %GDK_ANCHOR_RESIZE_X is set, the surface can be shrunken
horizontally to fit.

In general, when multiple flags are set, flipping should take precedence over
sliding, which should take precedence over resizing.

Since: 3.22
Stability: Unstable

</description>
<parameters>
<parameter name="GDK_ANCHOR_FLIP_X">
<parameter_description> allow flipping anchors horizontally
</parameter_description>
</parameter>
<parameter name="GDK_ANCHOR_FLIP_Y">
<parameter_description> allow flipping anchors vertically
</parameter_description>
</parameter>
<parameter name="GDK_ANCHOR_SLIDE_X">
<parameter_description> allow sliding surface horizontally
</parameter_description>
</parameter>
<parameter name="GDK_ANCHOR_SLIDE_Y">
<parameter_description> allow sliding surface vertically
</parameter_description>
</parameter>
<parameter name="GDK_ANCHOR_RESIZE_X">
<parameter_description> allow resizing surface horizontally
</parameter_description>
</parameter>
<parameter name="GDK_ANCHOR_RESIZE_Y">
<parameter_description> allow resizing surface vertically
</parameter_description>
</parameter>
<parameter name="GDK_ANCHOR_FLIP">
<parameter_description> allow flipping anchors on both axes
</parameter_description>
</parameter>
<parameter name="GDK_ANCHOR_SLIDE">
<parameter_description> allow sliding surface on both axes
</parameter_description>
</parameter>
<parameter name="GDK_ANCHOR_RESIZE">
<parameter_description> allow resizing surface on both axes
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkAxisFlags">
<description>
Flags describing the current capabilities of a device/tool.

Since: 3.22

</description>
<parameters>
<parameter name="GDK_AXIS_FLAG_X">
<parameter_description> X axis is present
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_FLAG_Y">
<parameter_description> Y axis is present
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_FLAG_PRESSURE">
<parameter_description> Pressure axis is present
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_FLAG_XTILT">
<parameter_description> X tilt axis is present
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_FLAG_YTILT">
<parameter_description> Y tilt axis is present
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_FLAG_WHEEL">
<parameter_description> Wheel axis is present
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_FLAG_DISTANCE">
<parameter_description> Distance axis is present
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_FLAG_ROTATION">
<parameter_description> Z-axis rotation is present
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_FLAG_SLIDER">
<parameter_description> Slider axis is present
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkAxisUse">
<description>
An enumeration describing the way in which a device
axis (valuator) maps onto the predefined valuator
types that GTK+ understands.

Note that the X and Y axes are not really needed; pointer devices
report their location via the x/y members of events regardless. Whether
X and Y are present as axes depends on the GDK backend.

</description>
<parameters>
<parameter name="GDK_AXIS_IGNORE">
<parameter_description> the axis is ignored.
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_X">
<parameter_description> the axis is used as the x axis.
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_Y">
<parameter_description> the axis is used as the y axis.
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_PRESSURE">
<parameter_description> the axis is used for pressure information.
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_XTILT">
<parameter_description> the axis is used for x tilt information.
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_YTILT">
<parameter_description> the axis is used for y tilt information.
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_WHEEL">
<parameter_description> the axis is used for wheel information.
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_DISTANCE">
<parameter_description> the axis is used for pen/tablet distance information. (Since: 3.22)
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_ROTATION">
<parameter_description> the axis is used for pen rotation information. (Since: 3.22)
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_SLIDER">
<parameter_description> the axis is used for pen slider information. (Since: 3.22)
</parameter_description>
</parameter>
<parameter name="GDK_AXIS_LAST">
<parameter_description> a constant equal to the numerically highest axis value.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkByteOrder">
<description>
A set of values describing the possible byte-orders
for storing pixel values in memory.

</description>
<parameters>
<parameter name="GDK_LSB_FIRST">
<parameter_description> The values are stored with the least-significant byte
first. For instance, the 32-bit value 0xffeecc would be stored
in memory as 0xcc, 0xee, 0xff, 0x00.
</parameter_description>
</parameter>
<parameter name="GDK_MSB_FIRST">
<parameter_description> The values are stored with the most-significant byte
first. For instance, the 32-bit value 0xffeecc would be stored
in memory as 0x00, 0xff, 0xee, 0xcc.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkClipboard::changed">
<description>
The ::changed signal is emitted when the clipboard changes ownership.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> the object on which the signal was emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<property name="GdkClipboard:content">
<description>
The #GdkContentProvider or %NULL if the clipboard is empty or contents are
provided otherwise.

</description>
</property>

<property name="GdkClipboard:display">
<description>
The #GdkDisplay that the clipboard belongs to.

</description>
</property>

<property name="GdkClipboard:formats">
<description>
The possible formats that the clipboard can provide its data in.

</description>
</property>

<property name="GdkClipboard:local">
<description>
%TRUE if the contents of the clipboard are owned by this process.

</description>
</property>

<enum name="GdkColorspace">
<description>
This enumeration defines the color spaces that are supported by
the gdk-pixbuf library.  Currently only RGB is supported.

</description>
<parameters>
<parameter name="GDK_COLORSPACE_RGB">
<parameter_description> Indicates a red/green/blue additive color space.
</parameter_description>
</parameter>
</parameters>
</enum>

<property name="GdkContentProvider:content-changed">
<description>
Emitted whenever the content provided by this provider has changed.

</description>
</property>

<property name="GdkContentProvider:formats">
<description>
The possible formats that the provider can provide its data in.

</description>
</property>

<property name="GdkContentProvider:storable-formats">
<description>
The subset of formats that clipboard managers should store this provider's data in.

</description>
</property>

<enum name="GdkCrossingMode">
<description>
Specifies the crossing mode for enter and leave events.

</description>
<parameters>
<parameter name="GDK_CROSSING_NORMAL">
<parameter_description> crossing because of pointer motion.
</parameter_description>
</parameter>
<parameter name="GDK_CROSSING_GRAB">
<parameter_description> crossing because a grab is activated.
</parameter_description>
</parameter>
<parameter name="GDK_CROSSING_UNGRAB">
<parameter_description> crossing because a grab is deactivated.
</parameter_description>
</parameter>
<parameter name="GDK_CROSSING_GTK_GRAB">
<parameter_description> crossing because a GTK+ grab is activated.
</parameter_description>
</parameter>
<parameter name="GDK_CROSSING_GTK_UNGRAB">
<parameter_description> crossing because a GTK+ grab is deactivated.
</parameter_description>
</parameter>
<parameter name="GDK_CROSSING_STATE_CHANGED">
<parameter_description> crossing because a GTK+ widget changed
state (e.g. sensitivity).
</parameter_description>
</parameter>
<parameter name="GDK_CROSSING_TOUCH_BEGIN">
<parameter_description> crossing because a touch sequence has begun,
this event is synthetic as the pointer might have not left the surface.
</parameter_description>
</parameter>
<parameter name="GDK_CROSSING_TOUCH_END">
<parameter_description> crossing because a touch sequence has ended,
this event is synthetic as the pointer might have not left the surface.
</parameter_description>
</parameter>
<parameter name="GDK_CROSSING_DEVICE_SWITCH">
<parameter_description> crossing because of a device switch (i.e.
a mouse taking control of the pointer after a touch device), this event
is synthetic as the pointer didn’t leave the surface.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkDevice::changed">
<description>
The ::changed signal is emitted either when the #GdkDevice
has changed the number of either axes or keys. For example
In X this will normally happen when the slave device routing
events through the master device changes (for example, user
switches from the USB mouse to a tablet), in that case the
master device will change to reflect the new slave device
axes and keys.

</description>
<parameters>
<parameter name="device">
<parameter_description> the #GdkDevice that changed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDevice::tool-changed">
<description>
The ::tool-changed signal is emitted on pen/eraser
#GdkDevices whenever tools enter or leave proximity.

</description>
<parameters>
<parameter name="device">
<parameter_description> the #GdkDevice that changed.
</parameter_description>
</parameter>
<parameter name="tool">
<parameter_description> The new current tool
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<property name="GdkDevice:associated-device">
<description>
Associated pointer or keyboard with this device, if any. Devices of type #GDK_DEVICE_TYPE_MASTER
always come in keyboard/pointer pairs. Other device types will have a %NULL associated device.

</description>
</property>

<property name="GdkDevice:axes">
<description>
The axes currently available for this device.

</description>
</property>

<property name="GdkDevice:display">
<description>
The #GdkDisplay the #GdkDevice pertains to.

</description>
</property>

<property name="GdkDevice:has-cursor">
<description>
Whether the device is represented by a cursor on the screen. Devices of type
%GDK_DEVICE_TYPE_MASTER will have %TRUE here.

</description>
</property>

<property name="GdkDevice:input-source">
<description>
Source type for the device.

</description>
</property>

<property name="GdkDevice:n-axes">
<description>
Number of axes in the device.

</description>
</property>

<property name="GdkDevice:name">
<description>
The device name.

</description>
</property>

<property name="GdkDevice:num-touches">
<description>
The maximal number of concurrent touches on a touch device.
Will be 0 if the device is not a touch device or if the number
of touches is unknown.

</description>
</property>

<property name="GdkDevice:product-id">
<description>
Product ID of this device, see gdk_device_get_product_id().

</description>
</property>

<property name="GdkDevice:seat">
<description>
#GdkSeat of this device.

</description>
</property>

<property name="GdkDevice:type">
<description>
Device role in the device manager.

</description>
</property>

<property name="GdkDevice:vendor-id">
<description>
Vendor ID of this device, see gdk_device_get_vendor_id().

</description>
</property>

<enum name="GdkDevicePadFeature">
<description>
A pad feature.

</description>
<parameters>
<parameter name="GDK_DEVICE_PAD_FEATURE_BUTTON">
<parameter_description> a button
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_PAD_FEATURE_RING">
<parameter_description> a ring-shaped interactive area
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_PAD_FEATURE_STRIP">
<parameter_description> a straight interactive area
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkDeviceToolType">
<description>
Indicates the specific type of tool being used being a tablet. Such as an
airbrush, pencil, etc.

Since: 3.22

</description>
<parameters>
<parameter name="GDK_DEVICE_TOOL_TYPE_UNKNOWN">
<parameter_description> Tool is of an unknown type.
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_TOOL_TYPE_PEN">
<parameter_description> Tool is a standard tablet stylus.
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_TOOL_TYPE_ERASER">
<parameter_description> Tool is standard tablet eraser.
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_TOOL_TYPE_BRUSH">
<parameter_description> Tool is a brush stylus.
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_TOOL_TYPE_PENCIL">
<parameter_description> Tool is a pencil stylus.
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_TOOL_TYPE_AIRBRUSH">
<parameter_description> Tool is an airbrush stylus.
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_TOOL_TYPE_MOUSE">
<parameter_description> Tool is a mouse.
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_TOOL_TYPE_LENS">
<parameter_description> Tool is a lens cursor.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkDeviceType">
<description>
Indicates the device type.

</description>
<parameters>
<parameter name="GDK_DEVICE_TYPE_MASTER">
<parameter_description> Device is a master (or virtual) device. There will
be an associated focus indicator on the screen.
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_TYPE_SLAVE">
<parameter_description> Device is a slave (or physical) device.
</parameter_description>
</parameter>
<parameter name="GDK_DEVICE_TYPE_FLOATING">
<parameter_description> Device is a physical device, currently not attached to
any seat.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkDisplay::closed">
<description>
The ::closed signal is emitted when the connection to the windowing
system for @display is closed.

</description>
<parameters>
<parameter name="display">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="is_error">
<parameter_description> %TRUE if the display was closed due to an error
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDisplay::monitor-added">
<description>
The ::monitor-added signal is emitted whenever a monitor is
added.

</description>
<parameters>
<parameter name="display">
<parameter_description> the objedct on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="monitor">
<parameter_description> the monitor that was just added
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDisplay::monitor-removed">
<description>
The ::monitor-removed signal is emitted whenever a monitor is
removed.

</description>
<parameters>
<parameter name="display">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="monitor">
<parameter_description> the monitor that was just removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDisplay::opened">
<description>
The ::opened signal is emitted when the connection to the windowing
system for @display is opened.

</description>
<parameters>
<parameter name="display">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDisplay::seat-added">
<description>
The ::seat-added signal is emitted whenever a new seat is made
known to the windowing system.

</description>
<parameters>
<parameter name="display">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="seat">
<parameter_description> the seat that was just added
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDisplay::seat-removed">
<description>
The ::seat-removed signal is emitted whenever a seat is removed
by the windowing system.

</description>
<parameters>
<parameter name="display">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="seat">
<parameter_description> the seat that was just removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDisplay::setting-changed">
<description>
The ::setting-changed signal is emitted whenever a setting
changes its value.

</description>
<parameters>
<parameter name="display">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> the name of the setting that changed
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<property name="GdkDisplay:composited">
<description>
%TRUE if the display properly composits the alpha channel.
See gdk_display_is_composited() for details.

</description>
</property>

<property name="GdkDisplay:rgba">
<description>
%TRUE if the display supports an alpha channel. See gdk_display_is_rgba()
for details.

</description>
</property>

<signal name="GdkDisplayManager::display-opened">
<description>
The ::display-opened signal is emitted when a display is opened.

</description>
<parameters>
<parameter name="manager">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> the opened display
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="GdkDragAction">
<description>
Used in #GdkDragContext to indicate what the destination
should do with the dropped data.

</description>
<parameters>
<parameter name="GDK_ACTION_DEFAULT">
<parameter_description> Means nothing, and should not be used.
</parameter_description>
</parameter>
<parameter name="GDK_ACTION_COPY">
<parameter_description> Copy the data.
</parameter_description>
</parameter>
<parameter name="GDK_ACTION_MOVE">
<parameter_description> Move the data, i.e. first copy it, then delete
it from the source using the DELETE target of the X selection protocol.
</parameter_description>
</parameter>
<parameter name="GDK_ACTION_LINK">
<parameter_description> Add a link to the data. Note that this is only
useful if source and destination agree on what it means.
</parameter_description>
</parameter>
<parameter name="GDK_ACTION_PRIVATE">
<parameter_description> Special action which tells the source that the
destination will do something that the source doesn’t understand.
</parameter_description>
</parameter>
<parameter name="GDK_ACTION_ASK">
<parameter_description> Ask the user what to do with the data.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkDragCancelReason">
<description>
Used in #GdkDragContext to the reason of a cancelled DND operation.

Since: 3.20

</description>
<parameters>
<parameter name="GDK_DRAG_CANCEL_NO_TARGET">
<parameter_description> There is no suitable drop target.
</parameter_description>
</parameter>
<parameter name="GDK_DRAG_CANCEL_USER_CANCELLED">
<parameter_description> Drag cancelled by the user
</parameter_description>
</parameter>
<parameter name="GDK_DRAG_CANCEL_ERROR">
<parameter_description> Unspecified error.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkDragContext::action-changed">
<description>
A new action is being chosen for the drag and drop operation.

</description>
<parameters>
<parameter name="context">
<parameter_description> The object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> The action currently chosen
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDragContext::cancel">
<description>
The drag and drop operation was cancelled.

</description>
<parameters>
<parameter name="context">
<parameter_description> The object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="reason">
<parameter_description> The reason the context was cancelled
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDragContext::dnd-finished">
<description>
The drag and drop operation was finished, the drag destination
finished reading all data. The drag source can now free all
miscellaneous data.

</description>
<parameters>
<parameter name="context">
<parameter_description> The object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDragContext::drop-performed">
<description>
The drag and drop operation was performed on an accepting client.

</description>
<parameters>
<parameter name="context">
<parameter_description> The object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> the time at which the drop happened.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<property name="GdkDragContext:content">
<description>
The #GdkContentProvider or %NULL if the context is not a source-side
context.

</description>
</property>

<property name="GdkDragContext:display">
<description>
The #GdkDisplay that the drag context belongs to.

</description>
</property>

<property name="GdkDragContext:formats">
<description>
The possible formats that the context can provide its data in.

</description>
</property>

<property name="GdkDrawContext:display">
<description>
The #GdkDisplay used to create the #GdkDrawContext.

</description>
</property>

<property name="GdkDrawContext:surface">
<description>
The #GdkSurface the gl context is bound to.

</description>
</property>

<property name="GdkDrawingContext:clip">
<description>
The clip region applied to the drawing context.

</description>
</property>

<property name="GdkDrawingContext:paint-context">
<description>
The #GdkDrawContext used to draw or %NULL if Cairo is used.

</description>
</property>

<property name="GdkDrawingContext:surface">
<description>
The #GdkSurface that created the drawing context.

</description>
</property>

<enum name="GdkEventMask">
<description>
A set of bit-flags to indicate which events a surface is to receive.
Most of these masks map onto one or more of the #GdkEventType event types
above.

See the [input handling overview][chap-input-handling] for details of
[event masks][event-masks] and [event propagation][event-propagation].

Since GTK 3.8, motion events are already compressed by default, independent
of this mechanism. This compression can be disabled with
gdk_surface_set_event_compression(). See the documentation of that function
for details.

If %GDK_TOUCH_MASK is enabled, the surface will receive touch events
from touch-enabled devices. Those will come as sequences of #GdkEventTouch
with type %GDK_TOUCH_UPDATE, enclosed by two events with
type %GDK_TOUCH_BEGIN and %GDK_TOUCH_END (or %GDK_TOUCH_CANCEL).
gdk_event_get_event_sequence() returns the event sequence for these
events, so different sequences may be distinguished.

</description>
<parameters>
<parameter name="GDK_EXPOSURE_MASK">
<parameter_description> receive expose events
</parameter_description>
</parameter>
<parameter name="GDK_POINTER_MOTION_MASK">
<parameter_description> receive all pointer motion events
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON_MOTION_MASK">
<parameter_description> receive pointer motion events while any button is pressed
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON1_MOTION_MASK">
<parameter_description> receive pointer motion events while 1 button is pressed
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON2_MOTION_MASK">
<parameter_description> receive pointer motion events while 2 button is pressed
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON3_MOTION_MASK">
<parameter_description> receive pointer motion events while 3 button is pressed
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON_PRESS_MASK">
<parameter_description> receive button press events
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON_RELEASE_MASK">
<parameter_description> receive button release events
</parameter_description>
</parameter>
<parameter name="GDK_KEY_PRESS_MASK">
<parameter_description> receive key press events
</parameter_description>
</parameter>
<parameter name="GDK_KEY_RELEASE_MASK">
<parameter_description> receive key release events
</parameter_description>
</parameter>
<parameter name="GDK_ENTER_NOTIFY_MASK">
<parameter_description> receive surface enter events
</parameter_description>
</parameter>
<parameter name="GDK_LEAVE_NOTIFY_MASK">
<parameter_description> receive surface leave events
</parameter_description>
</parameter>
<parameter name="GDK_FOCUS_CHANGE_MASK">
<parameter_description> receive focus change events
</parameter_description>
</parameter>
<parameter name="GDK_STRUCTURE_MASK">
<parameter_description> receive events about surface configuration change
</parameter_description>
</parameter>
<parameter name="GDK_PROPERTY_CHANGE_MASK">
<parameter_description> receive property change events
</parameter_description>
</parameter>
<parameter name="GDK_PROXIMITY_IN_MASK">
<parameter_description> receive proximity in events
</parameter_description>
</parameter>
<parameter name="GDK_PROXIMITY_OUT_MASK">
<parameter_description> receive proximity out events
</parameter_description>
</parameter>
<parameter name="GDK_SUBSTRUCTURE_MASK">
<parameter_description> receive events about surface configuration changes of
child surfaces
</parameter_description>
</parameter>
<parameter name="GDK_SCROLL_MASK">
<parameter_description> receive scroll events
</parameter_description>
</parameter>
<parameter name="GDK_TOUCH_MASK">
<parameter_description> receive touch events. Since 3.4
</parameter_description>
</parameter>
<parameter name="GDK_SMOOTH_SCROLL_MASK">
<parameter_description> receive smooth scrolling events. Since 3.4
   @GDK_TOUCHPAD_GESTURE_MASK: receive touchpad gesture events. Since 3.18
</parameter_description>
</parameter>
<parameter name="GDK_TABLET_PAD_MASK">
<parameter_description> receive tablet pad events. Since 3.22
</parameter_description>
</parameter>
<parameter name="GDK_ALL_EVENTS_MASK">
<parameter_description> the combination of all the above event masks.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkEventType">
<description>
Specifies the type of the event.

Do not confuse these events with the signals that GTK+ widgets emit.
Although many of these events result in corresponding signals being emitted,
the events are often transformed or filtered along the way.

</description>
<parameters>
<parameter name="GDK_NOTHING">
<parameter_description> a special code to indicate a null event.
</parameter_description>
</parameter>
<parameter name="GDK_DELETE">
<parameter_description> the window manager has requested that the toplevel surface be
hidden or destroyed, usually when the user clicks on a special icon in the
title bar.
</parameter_description>
</parameter>
<parameter name="GDK_DESTROY">
<parameter_description> the surface has been destroyed.
</parameter_description>
</parameter>
<parameter name="GDK_EXPOSE">
<parameter_description> all or part of the surface has become visible and needs to be
redrawn.
</parameter_description>
</parameter>
<parameter name="GDK_MOTION_NOTIFY">
<parameter_description> the pointer (usually a mouse) has moved.
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON_PRESS">
<parameter_description> a mouse button has been pressed.
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON_RELEASE">
<parameter_description> a mouse button has been released.
</parameter_description>
</parameter>
<parameter name="GDK_KEY_PRESS">
<parameter_description> a key has been pressed.
</parameter_description>
</parameter>
<parameter name="GDK_KEY_RELEASE">
<parameter_description> a key has been released.
</parameter_description>
</parameter>
<parameter name="GDK_ENTER_NOTIFY">
<parameter_description> the pointer has entered the surface.
</parameter_description>
</parameter>
<parameter name="GDK_LEAVE_NOTIFY">
<parameter_description> the pointer has left the surface.
</parameter_description>
</parameter>
<parameter name="GDK_FOCUS_CHANGE">
<parameter_description> the keyboard focus has entered or left the surface.
</parameter_description>
</parameter>
<parameter name="GDK_CONFIGURE">
<parameter_description> the size, position or stacking order of the surface has changed.
Note that GTK+ discards these events for %GDK_SURFACE_CHILD surfaces.
</parameter_description>
</parameter>
<parameter name="GDK_MAP">
<parameter_description> the surface has been mapped.
</parameter_description>
</parameter>
<parameter name="GDK_UNMAP">
<parameter_description> the surface has been unmapped.
</parameter_description>
</parameter>
<parameter name="GDK_PROXIMITY_IN">
<parameter_description> an input device has moved into contact with a sensing
surface (e.g. a touchscreen or graphics tablet).
</parameter_description>
</parameter>
<parameter name="GDK_PROXIMITY_OUT">
<parameter_description> an input device has moved out of contact with a sensing
surface.
</parameter_description>
</parameter>
<parameter name="GDK_DRAG_ENTER">
<parameter_description> the mouse has entered the surface while a drag is in progress.
</parameter_description>
</parameter>
<parameter name="GDK_DRAG_LEAVE">
<parameter_description> the mouse has left the surface while a drag is in progress.
</parameter_description>
</parameter>
<parameter name="GDK_DRAG_MOTION">
<parameter_description> the mouse has moved in the surface while a drag is in
progress.
</parameter_description>
</parameter>
<parameter name="GDK_DROP_START">
<parameter_description> a drop operation onto the surface has started.
</parameter_description>
</parameter>
<parameter name="GDK_SCROLL">
<parameter_description> the scroll wheel was turned
</parameter_description>
</parameter>
<parameter name="GDK_GRAB_BROKEN">
<parameter_description> a pointer or keyboard grab was broken. This event type
was added in 2.8.
</parameter_description>
</parameter>
<parameter name="GDK_TOUCH_BEGIN">
<parameter_description> A new touch event sequence has just started. This event
type was added in 3.4.
</parameter_description>
</parameter>
<parameter name="GDK_TOUCH_UPDATE">
<parameter_description> A touch event sequence has been updated. This event type
was added in 3.4.
</parameter_description>
</parameter>
<parameter name="GDK_TOUCH_END">
<parameter_description> A touch event sequence has finished. This event type
was added in 3.4.
</parameter_description>
</parameter>
<parameter name="GDK_TOUCH_CANCEL">
<parameter_description> A touch event sequence has been canceled. This event type
was added in 3.4.
</parameter_description>
</parameter>
<parameter name="GDK_TOUCHPAD_SWIPE">
<parameter_description> A touchpad swipe gesture event, the current state
is determined by its phase field. This event type was added in 3.18.
</parameter_description>
</parameter>
<parameter name="GDK_TOUCHPAD_PINCH">
<parameter_description> A touchpad pinch gesture event, the current state
is determined by its phase field. This event type was added in 3.18.
</parameter_description>
</parameter>
<parameter name="GDK_PAD_BUTTON_PRESS">
<parameter_description> A tablet pad button press event. This event type
was added in 3.22.
</parameter_description>
</parameter>
<parameter name="GDK_PAD_BUTTON_RELEASE">
<parameter_description> A tablet pad button release event. This event type
was added in 3.22.
</parameter_description>
</parameter>
<parameter name="GDK_PAD_RING">
<parameter_description> A tablet pad axis event from a &quot;ring&quot;. This event type was
added in 3.22.
</parameter_description>
</parameter>
<parameter name="GDK_PAD_STRIP">
<parameter_description> A tablet pad axis event from a &quot;strip&quot;. This event type was
added in 3.22.
</parameter_description>
</parameter>
<parameter name="GDK_PAD_GROUP_MODE">
<parameter_description> A tablet pad group mode change. This event type was
added in 3.22.
</parameter_description>
</parameter>
<parameter name="GDK_EVENT_LAST">
<parameter_description> marks the end of the GdkEventType enumeration. Added in 2.18
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkFrameClock::after-paint">
<description>
This signal ends processing of the frame. Applications
should generally not handle this signal.

</description>
<parameters>
<parameter name="clock">
<parameter_description> the frame clock emitting the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkFrameClock::before-paint">
<description>
This signal begins processing of the frame. Applications
should generally not handle this signal.

</description>
<parameters>
<parameter name="clock">
<parameter_description> the frame clock emitting the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkFrameClock::flush-events">
<description>
This signal is used to flush pending motion events that
are being batched up and compressed together. Applications
should not handle this signal.

</description>
<parameters>
<parameter name="clock">
<parameter_description> the frame clock emitting the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkFrameClock::layout">
<description>
This signal is emitted as the second step of toolkit and
application processing of the frame. Any work to update
sizes and positions of application elements should be
performed. GTK+ normally handles this internally.

</description>
<parameters>
<parameter name="clock">
<parameter_description> the frame clock emitting the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkFrameClock::paint">
<description>
This signal is emitted as the third step of toolkit and
application processing of the frame. The frame is
repainted. GDK normally handles this internally and
produces expose events, which are turned into GTK+
#GtkWidget::draw signals.

</description>
<parameters>
<parameter name="clock">
<parameter_description> the frame clock emitting the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkFrameClock::resume-events">
<description>
This signal is emitted after processing of the frame is
finished, and is handled internally by GTK+ to resume normal
event processing. Applications should not handle this signal.

</description>
<parameters>
<parameter name="clock">
<parameter_description> the frame clock emitting the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkFrameClock::update">
<description>
This signal is emitted as the first step of toolkit and
application processing of the frame. Animations should
be updated using gdk_frame_clock_get_frame_time().
Applications can connect directly to this signal, or
use gtk_widget_add_tick_callback() as a more convenient
interface.

</description>
<parameters>
<parameter name="clock">
<parameter_description> the frame clock emitting the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="GdkFrameClockPhase">
<description>
#GdkFrameClockPhase is used to represent the different paint clock
phases that can be requested. The elements of the enumeration
correspond to the signals of #GdkFrameClock.

Since: 3.8

</description>
<parameters>
<parameter name="GDK_FRAME_CLOCK_PHASE_NONE">
<parameter_description> no phase
</parameter_description>
</parameter>
<parameter name="GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS">
<parameter_description> corresponds to GdkFrameClock::flush-events. Should not be handled by applications.
</parameter_description>
</parameter>
<parameter name="GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT">
<parameter_description> corresponds to GdkFrameClock::before-paint. Should not be handled by applications.
</parameter_description>
</parameter>
<parameter name="GDK_FRAME_CLOCK_PHASE_UPDATE">
<parameter_description> corresponds to GdkFrameClock::update.
</parameter_description>
</parameter>
<parameter name="GDK_FRAME_CLOCK_PHASE_LAYOUT">
<parameter_description> corresponds to GdkFrameClock::layout.
</parameter_description>
</parameter>
<parameter name="GDK_FRAME_CLOCK_PHASE_PAINT">
<parameter_description> corresponds to GdkFrameClock::paint.
</parameter_description>
</parameter>
<parameter name="GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS">
<parameter_description> corresponds to GdkFrameClock::resume-events. Should not be handled by applications.
</parameter_description>
</parameter>
<parameter name="GDK_FRAME_CLOCK_PHASE_AFTER_PAINT">
<parameter_description> corresponds to GdkFrameClock::after-paint. Should not be handled by applications.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkFullscreenMode">
<description>
Indicates which monitor (in a multi-head setup) a surface should span over
when in fullscreen mode.

Since: 3.8

</description>
<parameters>
<parameter name="GDK_FULLSCREEN_ON_CURRENT_MONITOR">
<parameter_description> Fullscreen on current monitor only.
</parameter_description>
</parameter>
<parameter name="GDK_FULLSCREEN_ON_ALL_MONITORS">
<parameter_description> Span across all monitors when fullscreen.
</parameter_description>
</parameter>
</parameters>
</enum>

<property name="GdkGLContext:shared-context">
<description>
The #GdkGLContext that this context is sharing data with, or %NULL

</description>
</property>

<enum name="GdkGLError">
<description>
Error enumeration for #GdkGLContext.

Since: 3.16

</description>
<parameters>
<parameter name="GDK_GL_ERROR_NOT_AVAILABLE">
<parameter_description> OpenGL support is not available
</parameter_description>
</parameter>
<parameter name="GDK_GL_ERROR_UNSUPPORTED_FORMAT">
<parameter_description> The requested visual format is not supported
</parameter_description>
</parameter>
<parameter name="GDK_GL_ERROR_UNSUPPORTED_PROFILE">
<parameter_description> The requested profile is not supported
</parameter_description>
</parameter>
<parameter name="GDK_GL_ERROR_COMPILATION_FAILED">
<parameter_description> The shader compilation failed (available since 3.22)
</parameter_description>
</parameter>
<parameter name="GDK_GL_ERROR_LINK_FAILED">
<parameter_description> The shader linking failed (available since 3.22)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkGrabOwnership">
<description>
Defines how device grabs interact with other devices.

</description>
<parameters>
<parameter name="GDK_OWNERSHIP_NONE">
<parameter_description> All other devices’ events are allowed.
</parameter_description>
</parameter>
<parameter name="GDK_OWNERSHIP_SURFACE">
<parameter_description> Other devices’ events are blocked for the grab surface.
</parameter_description>
</parameter>
<parameter name="GDK_OWNERSHIP_APPLICATION">
<parameter_description> Other devices’ events are blocked for the whole application.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkGrabStatus">
<description>
Returned by gdk_device_grab() to indicate success or the reason for the
failure of the grab attempt.

</description>
<parameters>
<parameter name="GDK_GRAB_SUCCESS">
<parameter_description> the resource was successfully grabbed.
</parameter_description>
</parameter>
<parameter name="GDK_GRAB_ALREADY_GRABBED">
<parameter_description> the resource is actively grabbed by another client.
</parameter_description>
</parameter>
<parameter name="GDK_GRAB_INVALID_TIME">
<parameter_description> the resource was grabbed more recently than the
specified time.
</parameter_description>
</parameter>
<parameter name="GDK_GRAB_NOT_VIEWABLE">
<parameter_description> the grab surface or the @confine_to surface are not
viewable.
</parameter_description>
</parameter>
<parameter name="GDK_GRAB_FROZEN">
<parameter_description> the resource is frozen by an active grab of another client.
</parameter_description>
</parameter>
<parameter name="GDK_GRAB_FAILED">
<parameter_description> the grab failed for some other reason. Since 3.16
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkGravity">
<description>
Defines the reference point of a surface and the meaning of coordinates
passed to gtk_window_move(). See gtk_window_move() and the &quot;implementation
notes&quot; section of the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
specification for more details.

</description>
<parameters>
<parameter name="GDK_GRAVITY_NORTH_WEST">
<parameter_description> the reference point is at the top left corner.
</parameter_description>
</parameter>
<parameter name="GDK_GRAVITY_NORTH">
<parameter_description> the reference point is in the middle of the top edge.
</parameter_description>
</parameter>
<parameter name="GDK_GRAVITY_NORTH_EAST">
<parameter_description> the reference point is at the top right corner.
</parameter_description>
</parameter>
<parameter name="GDK_GRAVITY_WEST">
<parameter_description> the reference point is at the middle of the left edge.
</parameter_description>
</parameter>
<parameter name="GDK_GRAVITY_CENTER">
<parameter_description> the reference point is at the center of the surface.
</parameter_description>
</parameter>
<parameter name="GDK_GRAVITY_EAST">
<parameter_description> the reference point is at the middle of the right edge.
</parameter_description>
</parameter>
<parameter name="GDK_GRAVITY_SOUTH_WEST">
<parameter_description> the reference point is at the lower left corner.
</parameter_description>
</parameter>
<parameter name="GDK_GRAVITY_SOUTH">
<parameter_description> the reference point is at the middle of the lower edge.
</parameter_description>
</parameter>
<parameter name="GDK_GRAVITY_SOUTH_EAST">
<parameter_description> the reference point is at the lower right corner.
</parameter_description>
</parameter>
<parameter name="GDK_GRAVITY_STATIC">
<parameter_description> the reference point is at the top left corner of the
surface itself, ignoring window manager decorations.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkInputMode">
<description>
An enumeration that describes the mode of an input device.

</description>
<parameters>
<parameter name="GDK_MODE_DISABLED">
<parameter_description> the device is disabled and will not report any events.
</parameter_description>
</parameter>
<parameter name="GDK_MODE_SCREEN">
<parameter_description> the device is enabled. The device’s coordinate space
maps to the entire screen.
</parameter_description>
</parameter>
<parameter name="GDK_MODE_SURFACE">
<parameter_description> the device is enabled. The device’s coordinate space
is mapped to a single surface. The manner in which this surface
is chosen is undefined, but it will typically be the same
way in which the focus surface for key events is determined.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkInputSource">
<description>
An enumeration describing the type of an input device in general terms.

</description>
<parameters>
<parameter name="GDK_SOURCE_MOUSE">
<parameter_description> the device is a mouse. (This will be reported for the core
pointer, even if it is something else, such as a trackball.)
</parameter_description>
</parameter>
<parameter name="GDK_SOURCE_PEN">
<parameter_description> the device is a stylus of a graphics tablet or similar device.
</parameter_description>
</parameter>
<parameter name="GDK_SOURCE_ERASER">
<parameter_description> the device is an eraser. Typically, this would be the other end
of a stylus on a graphics tablet.
</parameter_description>
</parameter>
<parameter name="GDK_SOURCE_CURSOR">
<parameter_description> the device is a graphics tablet “puck” or similar device.
</parameter_description>
</parameter>
<parameter name="GDK_SOURCE_KEYBOARD">
<parameter_description> the device is a keyboard.
</parameter_description>
</parameter>
<parameter name="GDK_SOURCE_TOUCHSCREEN">
<parameter_description> the device is a direct-input touch device, such
as a touchscreen or tablet. This device type has been added in 3.4.
</parameter_description>
</parameter>
<parameter name="GDK_SOURCE_TOUCHPAD">
<parameter_description> the device is an indirect touch device, such
as a touchpad. This device type has been added in 3.4.
</parameter_description>
</parameter>
<parameter name="GDK_SOURCE_TRACKPOINT">
<parameter_description> the device is a trackpoint. This device type has been
added in 3.22
</parameter_description>
</parameter>
<parameter name="GDK_SOURCE_TABLET_PAD">
<parameter_description> the device is a &quot;pad&quot;, a collection of buttons,
rings and strips found in drawing tablets. This device type has been
added in 3.22.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkInterpType">
<description>
This enumeration describes the different interpolation modes that
can be used with the scaling functions. @GDK_INTERP_NEAREST is 
the fastest scaling method, but has horrible quality when 
scaling down. @GDK_INTERP_BILINEAR is the best choice if you 
aren't sure what to choose, it has a good speed/quality balance.

&lt;note&gt;
Cubic filtering is missing from the list; hyperbolic
interpolation is just as fast and results in higher quality.
&lt;/note&gt;

</description>
<parameters>
<parameter name="GDK_INTERP_NEAREST">
<parameter_description> Nearest neighbor sampling; this is the fastest
and lowest quality mode. Quality is normally unacceptable when scaling 
down, but may be OK when scaling up.
</parameter_description>
</parameter>
<parameter name="GDK_INTERP_TILES">
<parameter_description> This is an accurate simulation of the PostScript
image operator without any interpolation enabled.  Each pixel is
rendered as a tiny parallelogram of solid color, the edges of which
are implemented with antialiasing.  It resembles nearest neighbor for
enlargement, and bilinear for reduction.
</parameter_description>
</parameter>
<parameter name="GDK_INTERP_BILINEAR">
<parameter_description> Best quality/speed balance; use this mode by
default. Bilinear interpolation.  For enlargement, it is
equivalent to point-sampling the ideal bilinear-interpolated image.
For reduction, it is equivalent to laying down small tiles and
integrating over the coverage area.
</parameter_description>
</parameter>
<parameter name="GDK_INTERP_HYPER">
<parameter_description> This is the slowest and highest quality
reconstruction function. It is derived from the hyperbolic filters in
Wolberg's &quot;Digital Image Warping&quot;, and is formally defined as the
hyperbolic-filter sampling the ideal hyperbolic-filter interpolated
image (the filter is designed to be idempotent for 1:1 pixel mapping).
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkKeymap::direction-changed">
<description>
The ::direction-changed signal gets emitted when the direction
of the keymap changes. See gdk_keymap_get_direction().

</description>
<parameters>
<parameter name="keymap">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkKeymap::keys-changed">
<description>
The ::keys-changed signal is emitted when the mapping represented by
@keymap changes.

</description>
<parameters>
<parameter name="keymap">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkKeymap::state-changed">
<description>
The ::state-changed signal is emitted when the state of the
keyboard changes, e.g when Caps Lock is turned on or off.
See gdk_keymap_get_caps_lock_state().

</description>
<parameters>
<parameter name="keymap">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="GdkModifierIntent">
<description>
This enum is used with gdk_keymap_get_modifier_mask()
in order to determine what modifiers the
currently used windowing system backend uses for particular
purposes. For example, on X11/Windows, the Control key is used for
invoking menu shortcuts (accelerators), whereas on Apple computers
it’s the Command key (which correspond to %GDK_CONTROL_MASK and
%GDK_MOD2_MASK, respectively).

Since: 3.4

</description>
<parameters>
<parameter name="GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR">
<parameter_description> the primary modifier used to invoke
menu accelerators.
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_INTENT_CONTEXT_MENU">
<parameter_description> the modifier used to invoke context menus.
Note that mouse button 3 always triggers context menus. When this modifier
is not 0, it additionally triggers context menus when used with mouse button 1.
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_INTENT_EXTEND_SELECTION">
<parameter_description> the modifier used to extend selections
using `modifier`-click or `modifier`-cursor-key
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_INTENT_MODIFY_SELECTION">
<parameter_description> the modifier used to modify selections,
which in most cases means toggling the clicked item into or out of the selection.
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_INTENT_NO_TEXT_INPUT">
<parameter_description> when any of these modifiers is pressed, the
key event cannot produce a symbol directly. This is meant to be used for
input methods, and for use cases like typeahead search.
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_INTENT_SHIFT_GROUP">
<parameter_description> the modifier that switches between keyboard
groups (AltGr on X11/Windows and Option/Alt on OS X).
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK">
<parameter_description> The set of modifier masks accepted
as modifiers in accelerators. Needed because Command is mapped to MOD2 on
OSX, which is widely used, but on X11 MOD2 is NumLock and using that for a
mod key is problematic at best.
Ref: https://bugzilla.gnome.org/show_bug.cgi?id=736125.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkModifierType">
<description>
A set of bit-flags to indicate the state of modifier keys and mouse buttons
in various event types. Typical modifier keys are Shift, Control, Meta,
Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock.

Like the X Window System, GDK supports 8 modifier keys and 5 mouse buttons.

Since 2.10, GDK recognizes which of the Meta, Super or Hyper keys are mapped
to Mod2 - Mod5, and indicates this by setting %GDK_SUPER_MASK,
%GDK_HYPER_MASK or %GDK_META_MASK in the state field of key events.

Note that GDK may add internal values to events which include
reserved values such as %GDK_MODIFIER_RESERVED_13_MASK.  Your code
should preserve and ignore them.  You can use %GDK_MODIFIER_MASK to
remove all reserved values.

Also note that the GDK X backend interprets button press events for button
4-7 as scroll events, so %GDK_BUTTON4_MASK and %GDK_BUTTON5_MASK will never
be set.

</description>
<parameters>
<parameter name="GDK_SHIFT_MASK">
<parameter_description> the Shift key.
</parameter_description>
</parameter>
<parameter name="GDK_LOCK_MASK">
<parameter_description> a Lock key (depending on the modifier mapping of the
X server this may either be CapsLock or ShiftLock).
</parameter_description>
</parameter>
<parameter name="GDK_CONTROL_MASK">
<parameter_description> the Control key.
</parameter_description>
</parameter>
<parameter name="GDK_MOD1_MASK">
<parameter_description> the fourth modifier key (it depends on the modifier
mapping of the X server which key is interpreted as this modifier, but
normally it is the Alt key).
</parameter_description>
</parameter>
<parameter name="GDK_MOD2_MASK">
<parameter_description> the fifth modifier key (it depends on the modifier
mapping of the X server which key is interpreted as this modifier).
</parameter_description>
</parameter>
<parameter name="GDK_MOD3_MASK">
<parameter_description> the sixth modifier key (it depends on the modifier
mapping of the X server which key is interpreted as this modifier).
</parameter_description>
</parameter>
<parameter name="GDK_MOD4_MASK">
<parameter_description> the seventh modifier key (it depends on the modifier
mapping of the X server which key is interpreted as this modifier).
</parameter_description>
</parameter>
<parameter name="GDK_MOD5_MASK">
<parameter_description> the eighth modifier key (it depends on the modifier
mapping of the X server which key is interpreted as this modifier).
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON1_MASK">
<parameter_description> the first mouse button.
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON2_MASK">
<parameter_description> the second mouse button.
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON3_MASK">
<parameter_description> the third mouse button.
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON4_MASK">
<parameter_description> the fourth mouse button.
</parameter_description>
</parameter>
<parameter name="GDK_BUTTON5_MASK">
<parameter_description> the fifth mouse button.
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_13_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_14_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_15_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_16_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_17_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_18_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_19_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_20_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_21_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_22_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_23_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_24_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_25_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_SUPER_MASK">
<parameter_description> the Super modifier. Since 2.10
</parameter_description>
</parameter>
<parameter name="GDK_HYPER_MASK">
<parameter_description> the Hyper modifier. Since 2.10
</parameter_description>
</parameter>
<parameter name="GDK_META_MASK">
<parameter_description> the Meta modifier. Since 2.10
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_RESERVED_29_MASK">
<parameter_description> A reserved bit flag; do not use in your own code
</parameter_description>
</parameter>
<parameter name="GDK_RELEASE_MASK">
<parameter_description> not used in GDK itself. GTK+ uses it to differentiate
between (keyval, modifiers) pairs from key press and release events.
</parameter_description>
</parameter>
<parameter name="GDK_MODIFIER_MASK">
<parameter_description> a mask covering all modifier types.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkMonitor::invalidate">
<description>
The ::invalidate signal gets emitted when the output represented
by @monitor gets disconnected.

</description>
<parameters>
<parameter name="monitor">
<parameter_description> the object on which this signal was emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="GdkNotifyType">
<description>
Specifies the kind of crossing for enter and leave events.

See the X11 protocol specification of LeaveNotify for
full details of crossing event generation.

</description>
<parameters>
<parameter name="GDK_NOTIFY_ANCESTOR">
<parameter_description> the surface is entered from an ancestor or
left towards an ancestor.
</parameter_description>
</parameter>
<parameter name="GDK_NOTIFY_VIRTUAL">
<parameter_description> the pointer moves between an ancestor and an
inferior of the surface.
</parameter_description>
</parameter>
<parameter name="GDK_NOTIFY_INFERIOR">
<parameter_description> the surface is entered from an inferior or
left towards an inferior.
</parameter_description>
</parameter>
<parameter name="GDK_NOTIFY_NONLINEAR">
<parameter_description> the surface is entered from or left towards
a surface which is neither an ancestor nor an inferior.
</parameter_description>
</parameter>
<parameter name="GDK_NOTIFY_NONLINEAR_VIRTUAL">
<parameter_description> the pointer moves between two surfaces
which are not ancestors of each other and the surface is part of
the ancestor chain between one of these surfaces and their least
common ancestor.
</parameter_description>
</parameter>
<parameter name="GDK_NOTIFY_UNKNOWN">
<parameter_description> an unknown type of enter/leave event occurred.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkPaintable::invalidate-contents">
<description>
Emitted when the contents of the @paintable change.

Examples for such an event would be videos changing to the next frame or
the icon theme for an icon changing.

Since: 4.0

</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkPaintable::invalidate-size">
<description>
Emitted when the intrinsic size of the @paintable changes. This means the values
reported by at least one of gdk_paintable_get_intrinsic_width(),
gdk_paintable_get_intrinsic_height() or gdk_paintable_get_intrinsic_aspect_ratio()
has changed.

Examples for such an event would be a paintable displaying the contents of a toplevel
surface being resized.

Since: 4.0

</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="GdkPaintableFlags">
<description>
Flags about this object. Implementations use these for optimizations
such as caching.

</description>
<parameters>
<parameter name="GDK_PAINTABLE_STATIC_SIZE">
<parameter_description> The size is immutable.
The GdkPaintable::invalidate-size signal will never be
emitted.
</parameter_description>
</parameter>
<parameter name="GDK_PAINTABLE_STATIC_CONTENTS">
<parameter_description> The content is immutable.
The GdkPaintable::invalidate-content signal will never be
emitted.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkPixbuf::pixel-bytes">
<description>
If set, this pixbuf was created from read-only #GBytes.
Replaces GdkPixbuf::pixels.

Since: 2.32

</description>
<parameters>
</parameters>
<return></return>
</signal>

<property name="GdkPixbuf:bits-per-sample">
<description>
The number of bits per sample. 
Currently only 8 bit per sample are supported.

</description>
</property>

<property name="GdkPixbuf:n-channels">
<description>
The number of samples per pixel. 
Currently, only 3 or 4 samples per pixel are supported.

</description>
</property>

<property name="GdkPixbuf:rowstride">
<description>
The number of bytes between the start of a row and 
the start of the next row. This number must (obviously)
be at least as large as the width of the pixbuf.

</description>
</property>

<enum name="GdkPixbufAlphaMode">
<description>
These values can be passed to
gdk_pixbuf_xlib_render_to_drawable_alpha() to control how the alpha
channel of an image should be handled.  This function can create a
bilevel clipping mask (black and white) and use it while painting
the image.  In the future, when the X Window System gets an alpha
channel extension, it will be possible to do full alpha
compositing onto arbitrary drawables.  For now both cases fall
back to a bilevel clipping mask.

</description>
<parameters>
<parameter name="GDK_PIXBUF_ALPHA_BILEVEL">
<parameter_description> A bilevel clipping mask (black and white)
will be created and used to draw the image.  Pixels below 0.5 opacity
will be considered fully transparent, and all others will be
considered fully opaque.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_ALPHA_FULL">
<parameter_description> For now falls back to #GDK_PIXBUF_ALPHA_BILEVEL.
In the future it will do full alpha compositing.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkPixbufError">
<description>
An error code in the #GDK_PIXBUF_ERROR domain. Many gdk-pixbuf
operations can cause errors in this domain, or in the #G_FILE_ERROR
domain.

</description>
<parameters>
<parameter name="GDK_PIXBUF_ERROR_CORRUPT_IMAGE">
<parameter_description> An image file was broken somehow.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY">
<parameter_description> Not enough memory.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_ERROR_BAD_OPTION">
<parameter_description> A bad option was passed to a pixbuf save module.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_ERROR_UNKNOWN_TYPE">
<parameter_description> Unknown image type.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION">
<parameter_description> Don't know how to perform the
given operation on the type of image at hand.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_ERROR_FAILED">
<parameter_description> Generic failure code, something went wrong.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION">
<parameter_description> Only part of the animation was loaded.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkPixbufFormatFlags">
<description>
Flags which allow a module to specify further details about the supported
operations.

Since: 2.2

</description>
<parameters>
<parameter name="GDK_PIXBUF_FORMAT_WRITABLE">
<parameter_description> the module can write out images in the format.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_FORMAT_SCALABLE">
<parameter_description> the image format is scalable
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_FORMAT_THREADSAFE">
<parameter_description> the module is threadsafe. gdk-pixbuf
ignores modules that are not marked as threadsafe. (Since 2.28).
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkPixbufLoader::area-prepared">
<description>
This signal is emitted when the pixbuf loader has allocated the 
pixbuf in the desired size.  After this signal is emitted, 
applications can call gdk_pixbuf_loader_get_pixbuf() to fetch 
the partially-loaded pixbuf.

</description>
<parameters>
<parameter name="loader">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkPixbufLoader::area-updated">
<description>
This signal is emitted when a significant area of the image being
loaded has been updated.  Normally it means that a complete
scanline has been read in, but it could be a different area as
well.  Applications can use this signal to know when to repaint
areas of an image that is being loaded.

</description>
<parameters>
<parameter name="loader">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X offset of upper-left corner of the updated area.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y offset of upper-left corner of the updated area.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of updated area.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of updated area.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkPixbufLoader::closed">
<description>
This signal is emitted when gdk_pixbuf_loader_close() is called.
It can be used by different parts of an application to receive
notification when an image loader is closed by the code that
drives it.

</description>
<parameters>
<parameter name="loader">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkPixbufLoader::size-prepared">
<description>
This signal is emitted when the pixbuf loader has been fed the
initial amount of data that is required to figure out the size
of the image that it will create.  Applications can call  
gdk_pixbuf_loader_set_size() in response to this signal to set
the desired size to which the image should be scaled.

</description>
<parameters>
<parameter name="loader">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the original width of the image
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the original height of the image
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="GdkPixbufRotation">
<description>
The possible rotations which can be passed to gdk_pixbuf_rotate_simple().
To make them easier to use, their numerical values are the actual degrees.

</description>
<parameters>
<parameter name="GDK_PIXBUF_ROTATE_NONE">
<parameter_description> No rotation.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE">
<parameter_description> Rotate by 90 degrees.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_ROTATE_UPSIDEDOWN">
<parameter_description> Rotate by 180 degrees.
</parameter_description>
</parameter>
<parameter name="GDK_PIXBUF_ROTATE_CLOCKWISE">
<parameter_description> Rotate by 270 degrees.
</parameter_description>
</parameter>
</parameters>
</enum>

<property name="GdkPixbufSimpleAnim:loop">
<description>
Whether the animation should loop when it reaches the end.

Since: 2.18

</description>
</property>

<enum name="GdkPixdataDumpType">
<description>
An enumeration which is used by gdk_pixdata_to_csource() to
determine the form of C source to be generated. The three values
@GDK_PIXDATA_DUMP_PIXDATA_STREAM, @GDK_PIXDATA_DUMP_PIXDATA_STRUCT
and @GDK_PIXDATA_DUMP_MACROS are mutually exclusive, as are
@GDK_PIXBUF_DUMP_GTYPES and @GDK_PIXBUF_DUMP_CTYPES. The remaining
elements are optional flags that can be freely added. 

</description>
<parameters>
<parameter name="GDK_PIXDATA_DUMP_PIXDATA_STREAM">
<parameter_description> Generate pixbuf data stream (a single 
string containing a serialized #GdkPixdata structure in network byte 
order).
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_DUMP_PIXDATA_STRUCT">
<parameter_description> Generate #GdkPixdata structure (needs 
the #GdkPixdata structure definition from gdk-pixdata.h).
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_DUMP_MACROS">
<parameter_description> Generate &lt;function&gt;*_ROWSTRIDE&lt;/function&gt;,     
&lt;function&gt;*_WIDTH&lt;/function&gt;, &lt;function&gt;*_HEIGHT&lt;/function&gt;,
&lt;function&gt;*_BYTES_PER_PIXEL&lt;/function&gt; and 
&lt;function&gt;*_RLE_PIXEL_DATA&lt;/function&gt; or &lt;function&gt;*_PIXEL_DATA&lt;/function&gt;
macro definitions for the image.
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_DUMP_GTYPES">
<parameter_description> Generate GLib data types instead of 
standard C data types.
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_DUMP_CTYPES">
<parameter_description> Generate standard C data types instead of 
GLib data types.
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_DUMP_STATIC">
<parameter_description> Generate static symbols.
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_DUMP_CONST">
<parameter_description> Generate const symbols.
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_DUMP_RLE_DECODER">
<parameter_description> Provide a &lt;function&gt;*_RUN_LENGTH_DECODE(image_buf, rle_data, size, bpp)&lt;/function&gt; 
macro definition  to  decode  run-length encoded image data.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkPixdataType">
<description>
An enumeration containing three sets of flags for a #GdkPixdata struct: 
one for the used colorspace, one for the width of the samples and one 
for the encoding of the pixel data.  

</description>
<parameters>
<parameter name="GDK_PIXDATA_COLOR_TYPE_RGB">
<parameter_description>  each pixel has red, green and blue samples.
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_COLOR_TYPE_RGBA">
<parameter_description> each pixel has red, green and blue samples 
and an alpha value.
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_COLOR_TYPE_MASK">
<parameter_description> mask for the colortype flags of the enum.
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_SAMPLE_WIDTH_8">
<parameter_description> each sample has 8 bits.
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_SAMPLE_WIDTH_MASK">
<parameter_description> mask for the sample width flags of the enum.
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_ENCODING_RAW">
<parameter_description> the pixel data is in raw form. 
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_ENCODING_RLE">
<parameter_description> the pixel data is run-length encoded. Runs may 
be up to 127 bytes long; their length is stored in a single byte 
preceding the pixel data for the run. If a run is constant, its length
byte has the high bit set and the pixel data consists of a single pixel
which must be repeated. 
</parameter_description>
</parameter>
<parameter name="GDK_PIXDATA_ENCODING_MASK">
<parameter_description> mask for the encoding flags of the enum.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkScrollDirection">
<description>
Specifies the direction for scroll events.

</description>
<parameters>
<parameter name="GDK_SCROLL_UP">
<parameter_description> the surface is scrolled up.
</parameter_description>
</parameter>
<parameter name="GDK_SCROLL_DOWN">
<parameter_description> the surface is scrolled down.
</parameter_description>
</parameter>
<parameter name="GDK_SCROLL_LEFT">
<parameter_description> the surface is scrolled to the left.
</parameter_description>
</parameter>
<parameter name="GDK_SCROLL_RIGHT">
<parameter_description> the surface is scrolled to the right.
</parameter_description>
</parameter>
<parameter name="GDK_SCROLL_SMOOTH">
<parameter_description> the scrolling is determined by the delta values
in scroll events. See gdk_event_get_scroll_deltas(). Since: 3.4
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkSeat::device-added">
<description>
The ::device-added signal is emitted when a new input
device is related to this seat.

</description>
<parameters>
<parameter name="seat">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the newly added #GdkDevice.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkSeat::device-removed">
<description>
The ::device-removed signal is emitted when an
input device is removed (e.g. unplugged).

</description>
<parameters>
<parameter name="seat">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the just removed #GdkDevice.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkSeat::tool-added">
<description>
The ::tool-added signal is emitted whenever a new tool
is made known to the seat. The tool may later be assigned
to a device (i.e. on proximity with a tablet). The device
will emit the #GdkDevice::tool-changed signal accordingly.

A same tool may be used by several devices.

</description>
<parameters>
<parameter name="seat">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="tool">
<parameter_description> the new #GdkDeviceTool known to the seat
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkSeat::tool-removed">
<description>
This signal is emitted whenever a tool is no longer known
to this @seat.

</description>
<parameters>
<parameter name="seat">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="tool">
<parameter_description> the just removed #GdkDeviceTool
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<property name="GdkSeat:display">
<description>
#GdkDisplay of this seat.

</description>
</property>

<enum name="GdkSeatCapabilities">
<description>
Flags describing the seat capabilities.

Since: 3.20

</description>
<parameters>
<parameter name="GDK_SEAT_CAPABILITY_NONE">
<parameter_description> No input capabilities
</parameter_description>
</parameter>
<parameter name="GDK_SEAT_CAPABILITY_POINTER">
<parameter_description> The seat has a pointer (e.g. mouse)
</parameter_description>
</parameter>
<parameter name="GDK_SEAT_CAPABILITY_TOUCH">
<parameter_description> The seat has touchscreen(s) attached
</parameter_description>
</parameter>
<parameter name="GDK_SEAT_CAPABILITY_TABLET_STYLUS">
<parameter_description> The seat has drawing tablet(s) attached
</parameter_description>
</parameter>
<parameter name="GDK_SEAT_CAPABILITY_KEYBOARD">
<parameter_description> The seat has keyboard(s) attached
</parameter_description>
</parameter>
<parameter name="GDK_SEAT_CAPABILITY_TABLET_PAD">
<parameter_description> The seat has drawing tablet pad(s) attached
</parameter_description>
</parameter>
<parameter name="GDK_SEAT_CAPABILITY_ALL_POINTING">
<parameter_description> The union of all pointing capabilities
</parameter_description>
</parameter>
<parameter name="GDK_SEAT_CAPABILITY_ALL">
<parameter_description> The union of all capabilities
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkSubpixelLayout">
<description>
This enumeration describes how the red, green and blue components
of physical pixels on an output device are laid out.

Since: 3.22

</description>
<parameters>
<parameter name="GDK_SUBPIXEL_LAYOUT_UNKNOWN">
<parameter_description> The layout is not known
</parameter_description>
</parameter>
<parameter name="GDK_SUBPIXEL_LAYOUT_NONE">
<parameter_description> Not organized in this way
</parameter_description>
</parameter>
<parameter name="GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB">
<parameter_description> The layout is horizontal, the order is RGB
</parameter_description>
</parameter>
<parameter name="GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR">
<parameter_description> The layout is horizontal, the order is BGR
</parameter_description>
</parameter>
<parameter name="GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB">
<parameter_description> The layout is vertical, the order is RGB
</parameter_description>
</parameter>
<parameter name="GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR">
<parameter_description> The layout is vertical, the order is BGR
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkSurface::moved-to-rect">
<description>
Emitted when the position of @surface is finalized after being moved to a
destination rectangle.

@surface might be flipped over the destination rectangle in order to keep
it on-screen, in which case @flipped_x and @flipped_y will be set to %TRUE
accordingly.

@flipped_rect is the ideal position of @surface after any possible
flipping, but before any possible sliding. @final_rect is @flipped_rect,
but possibly translated in the case that flipping is still ineffective in
keeping @surface on-screen.
Stability: Private

</description>
<parameters>
<parameter name="surface">
<parameter_description> the #GdkSurface that moved
</parameter_description>
</parameter>
<parameter name="flipped_rect">
<parameter_description> the position of @surface after any possible
flipping or %NULL if the backend can't obtain it
</parameter_description>
</parameter>
<parameter name="final_rect">
<parameter_description> the final position of @surface or %NULL if the
backend can't obtain it
</parameter_description>
</parameter>
<parameter name="flipped_x">
<parameter_description> %TRUE if the anchors were flipped horizontally
</parameter_description>
</parameter>
<parameter name="flipped_y">
<parameter_description> %TRUE if the anchors were flipped vertically
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<property name="GdkSurface:cursor">
<description>
The mouse pointer for a #GdkSurface. See gdk_surface_set_cursor() and
gdk_surface_get_cursor() for details.

</description>
</property>

<property name="GdkSurface:display">
<description>
The #GdkDisplay connection of the surface. See gdk_surface_get_display()
for details.

</description>
</property>

<enum name="GdkSurfaceEdge">
<description>
Determines a surface edge or corner.

</description>
<parameters>
<parameter name="GDK_SURFACE_EDGE_NORTH_WEST">
<parameter_description> the top left corner.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_EDGE_NORTH">
<parameter_description> the top edge.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_EDGE_NORTH_EAST">
<parameter_description> the top right corner.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_EDGE_WEST">
<parameter_description> the left edge.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_EDGE_EAST">
<parameter_description> the right edge.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_EDGE_SOUTH_WEST">
<parameter_description> the lower left corner.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_EDGE_SOUTH">
<parameter_description> the lower edge.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_EDGE_SOUTH_EAST">
<parameter_description> the lower right corner.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkSurfaceHints">
<description>
Used to indicate which fields of a #GdkGeometry struct should be paid
attention to. Also, the presence/absence of @GDK_HINT_POS,
@GDK_HINT_USER_POS, and @GDK_HINT_USER_SIZE is significant, though they don't
directly refer to #GdkGeometry fields. @GDK_HINT_USER_POS will be set
automatically by #GtkWindow if you call gtk_window_move().
@GDK_HINT_USER_POS and @GDK_HINT_USER_SIZE should be set if the user
specified a size/position using a --geometry command-line argument;
gtk_window_parse_geometry() automatically sets these flags.

</description>
<parameters>
<parameter name="GDK_HINT_POS">
<parameter_description> indicates that the program has positioned the surface
</parameter_description>
</parameter>
<parameter name="GDK_HINT_MIN_SIZE">
<parameter_description> min size fields are set
</parameter_description>
</parameter>
<parameter name="GDK_HINT_MAX_SIZE">
<parameter_description> max size fields are set
</parameter_description>
</parameter>
<parameter name="GDK_HINT_BASE_SIZE">
<parameter_description> base size fields are set
</parameter_description>
</parameter>
<parameter name="GDK_HINT_ASPECT">
<parameter_description> aspect ratio fields are set
</parameter_description>
</parameter>
<parameter name="GDK_HINT_RESIZE_INC">
<parameter_description> resize increment fields are set
</parameter_description>
</parameter>
<parameter name="GDK_HINT_WIN_GRAVITY">
<parameter_description> surface gravity field is set
</parameter_description>
</parameter>
<parameter name="GDK_HINT_USER_POS">
<parameter_description> indicates that the surface’s position was explicitly set
by the user
</parameter_description>
</parameter>
<parameter name="GDK_HINT_USER_SIZE">
<parameter_description> indicates that the surface’s size was explicitly set by
the user
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkSurfaceState">
<description>
Specifies the state of a toplevel surface.

</description>
<parameters>
<parameter name="GDK_SURFACE_STATE_WITHDRAWN">
<parameter_description> the surface is not shown.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_ICONIFIED">
<parameter_description> the surface is minimized.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_MAXIMIZED">
<parameter_description> the surface is maximized.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_STICKY">
<parameter_description> the surface is sticky.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_FULLSCREEN">
<parameter_description> the surface is maximized without
decorations.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_ABOVE">
<parameter_description> the surface is kept above other surfaces.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_BELOW">
<parameter_description> the surface is kept below other surfaces.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_FOCUSED">
<parameter_description> the surface is presented as focused (with active decorations).
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_TILED">
<parameter_description> the surface is in a tiled state, Since 3.10. Since 3.91.2, this
is deprecated in favor of per-edge information.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_TOP_TILED">
<parameter_description> whether the top edge is tiled, Since 3.91.2
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_TOP_RESIZABLE">
<parameter_description> whether the top edge is resizable, Since 3.91.2
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_RIGHT_TILED">
<parameter_description> whether the right edge is tiled, Since 3.91.2
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_RIGHT_RESIZABLE">
<parameter_description> whether the right edge is resizable, Since 3.91.2
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_BOTTOM_TILED">
<parameter_description> whether the bottom edge is tiled, Since 3.91.2
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_BOTTOM_RESIZABLE">
<parameter_description> whether the bottom edge is resizable, Since 3.91.2
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_LEFT_TILED">
<parameter_description> whether the left edge is tiled, Since 3.91.2
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_STATE_LEFT_RESIZABLE">
<parameter_description> whether the left edge is resizable, Since 3.91.2
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkSurfaceType">
<description>
Describes the kind of surface.

</description>
<parameters>
<parameter name="GDK_SURFACE_TOPLEVEL">
<parameter_description> toplevel window (used to implement #GtkWindow)
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_CHILD">
<parameter_description> child surface (used to implement e.g. #GtkEntry)
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TEMP">
<parameter_description> override redirect temporary surface (used to implement
#GtkMenu)
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_FOREIGN">
<parameter_description> foreign surface (see gdk_surface_foreign_new())
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_SUBSURFACE">
<parameter_description> subsurface; This surface is visually
tied to a toplevel, and is moved/stacked with it. Currently this window
type is only implemented in Wayland. Since 3.14
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkSurfaceTypeHint">
<description>
These are hints for the window manager that indicate what type of function
the window has. The window manager can use this when determining decoration
and behaviour of the window. The hint must be set before mapping the window.

See the [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
specification for more details about window types.

</description>
<parameters>
<parameter name="GDK_SURFACE_TYPE_HINT_NORMAL">
<parameter_description> Normal toplevel window.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_DIALOG">
<parameter_description> Dialog window.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_MENU">
<parameter_description> Window used to implement a menu; GTK+ uses
this hint only for torn-off menus, see #GtkTearoffMenuItem.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_TOOLBAR">
<parameter_description> Window used to implement toolbars.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_SPLASHSCREEN">
<parameter_description> Window used to display a splash
screen during application startup.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_UTILITY">
<parameter_description> Utility windows which are not detached
toolbars or dialogs.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_DOCK">
<parameter_description> Used for creating dock or panel windows.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_DESKTOP">
<parameter_description> Used for creating the desktop background
window.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_DROPDOWN_MENU">
<parameter_description> A menu that belongs to a menubar.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_POPUP_MENU">
<parameter_description> A menu that does not belong to a menubar,
e.g. a context menu.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_TOOLTIP">
<parameter_description> A tooltip.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_NOTIFICATION">
<parameter_description> A notification - typically a “bubble”
that belongs to a status icon.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_COMBO">
<parameter_description> A popup from a combo box.
</parameter_description>
</parameter>
<parameter name="GDK_SURFACE_TYPE_HINT_DND">
<parameter_description> A window that is used to implement a DND cursor.
</parameter_description>
</parameter>
</parameters>
</enum>

<property name="GdkTexture:height">
<description>
The height of the texture.

</description>
</property>

<property name="GdkTexture:width">
<description>
The width of the texture.

</description>
</property>

<enum name="GdkTouchpadGesturePhase">
<description>
Specifies the current state of a touchpad gesture. All gestures are
guaranteed to begin with an event with phase %GDK_TOUCHPAD_GESTURE_PHASE_BEGIN,
followed by 0 or several events with phase %GDK_TOUCHPAD_GESTURE_PHASE_UPDATE.

A finished gesture may have 2 possible outcomes, an event with phase
%GDK_TOUCHPAD_GESTURE_PHASE_END will be emitted when the gesture is
considered successful, this should be used as the hint to perform any
permanent changes.

Cancelled gestures may be so for a variety of reasons, due to hardware
or the compositor, or due to the gesture recognition layers hinting the
gesture did not finish resolutely (eg. a 3rd finger being added during
a pinch gesture). In these cases, the last event will report the phase
%GDK_TOUCHPAD_GESTURE_PHASE_CANCEL, this should be used as a hint
to undo any visible/permanent changes that were done throughout the
progress of the gesture.

</description>
<parameters>
<parameter name="GDK_TOUCHPAD_GESTURE_PHASE_BEGIN">
<parameter_description> The gesture has begun.
</parameter_description>
</parameter>
<parameter name="GDK_TOUCHPAD_GESTURE_PHASE_UPDATE">
<parameter_description> The gesture has been updated.
</parameter_description>
</parameter>
<parameter name="GDK_TOUCHPAD_GESTURE_PHASE_END">
<parameter_description> The gesture was finished, changes
should be permanently applied.
</parameter_description>
</parameter>
<parameter name="GDK_TOUCHPAD_GESTURE_PHASE_CANCEL">
<parameter_description> The gesture was cancelled, all
changes should be undone.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GdkVulkanContext::images-updated">
<description>
This signal is emitted when the images managed by this context have
changed. Usually this means that the swapchain had to be recreated,
for example in response to a change of the surface size.

</description>
<parameters>
<parameter name="context">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="GdkVulkanError">
<description>
Error enumeration for #GdkVulkanContext.

Since: 3.90

</description>
<parameters>
<parameter name="GDK_VULKAN_ERROR_UNSUPPORTED">
<parameter_description> Vulkan is not supported on this backend or has not been
compiled in.
</parameter_description>
</parameter>
<parameter name="GDK_VULKAN_ERROR_NOT_AVAILABLE">
<parameter_description> Vulkan support is not available on this Surface
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkWMDecoration">
<description>
These are hints originally defined by the Motif toolkit.
The window manager can use them when determining how to decorate
the surface. The hint must be set before mapping the surface.

</description>
<parameters>
<parameter name="GDK_DECOR_ALL">
<parameter_description> all decorations should be applied.
</parameter_description>
</parameter>
<parameter name="GDK_DECOR_BORDER">
<parameter_description> a frame should be drawn around the surface.
</parameter_description>
</parameter>
<parameter name="GDK_DECOR_RESIZEH">
<parameter_description> the frame should have resize handles.
</parameter_description>
</parameter>
<parameter name="GDK_DECOR_TITLE">
<parameter_description> a titlebar should be placed above the surface.
</parameter_description>
</parameter>
<parameter name="GDK_DECOR_MENU">
<parameter_description> a button for opening a menu should be included.
</parameter_description>
</parameter>
<parameter name="GDK_DECOR_MINIMIZE">
<parameter_description> a minimize button should be included.
</parameter_description>
</parameter>
<parameter name="GDK_DECOR_MAXIMIZE">
<parameter_description> a maximize button should be included.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GdkWMFunction">
<description>
These are hints originally defined by the Motif toolkit. The window manager
can use them when determining the functions to offer for the surface. The
hint must be set before mapping the surface.

</description>
<parameters>
<parameter name="GDK_FUNC_ALL">
<parameter_description> all functions should be offered.
</parameter_description>
</parameter>
<parameter name="GDK_FUNC_RESIZE">
<parameter_description> the surface should be resizable.
</parameter_description>
</parameter>
<parameter name="GDK_FUNC_MOVE">
<parameter_description> the surface should be movable.
</parameter_description>
</parameter>
<parameter name="GDK_FUNC_MINIMIZE">
<parameter_description> the surface should be minimizable.
</parameter_description>
</parameter>
<parameter name="GDK_FUNC_MAXIMIZE">
<parameter_description> the surface should be maximizable.
</parameter_description>
</parameter>
<parameter name="GDK_FUNC_CLOSE">
<parameter_description> the surface should be closable.
</parameter_description>
</parameter>
</parameters>
</enum>

<function name="gdk_app_launch_context_set_desktop">
<description>
Sets the workspace on which applications will be launched when
using this context when running under a window manager that
supports multiple workspaces, as described in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).

When the workspace is not specified or @desktop is set to -1,
it is up to the window manager to pick one, typically it will
be the current workspace.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="desktop">
<parameter_description> the number of a workspace, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_icon">
<description>
Sets the icon for applications that are launched with this
context.

Window Managers can use this information when displaying startup
notification.

See also gdk_app_launch_context_set_icon_name().

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GIcon, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_icon_name">
<description>
Sets the icon for applications that are launched with this context.
The @icon_name will be interpreted in the same way as the Icon field
in desktop files. See also gdk_app_launch_context_set_icon().

If both @icon and @icon_name are set, the @icon_name takes priority.
If neither @icon or @icon_name is set, the icon is taken from either
the file that is passed to launched application or from the #GAppInfo
for the launched application itself.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> an icon name, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_timestamp">
<description>
Sets the timestamp of @context. The timestamp should ideally
be taken from the event that triggered the launch.

Window managers can use this information to avoid moving the
focus to the newly launched application when the user is busy
typing in another window. This is also known as 'focus stealing
prevention'.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> a timestamp
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_draw_from_gl">
<description>
This is the main way to draw GL content in GTK+. It takes a render buffer ID 
(@source_type == #GL_RENDERBUFFER) or a texture id (@source_type == #GL_TEXTURE)
and draws it onto @cr with an OVER operation, respecting the current clip.
The top left corner of the rectangle specified by @x, @y, @width and @height
will be drawn at the current (0,0) position of the cairo_t.

This will work for *all* cairo_t, as long as @surface is realized, but the
fallback implementation that reads back the pixels from the buffer may be
used in the general case. In the case of direct drawing to a surface with
no special effects applied to @cr it will however use a more efficient
approach.

For #GL_RENDERBUFFER the code will always fall back to software for buffers
with alpha components, so make sure you use #GL_TEXTURE if using alpha.

Calling this may change the current GL context.

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="surface">
<parameter_description> The surface we're rendering for (not necessarily into)
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> The GL ID of the source buffer
</parameter_description>
</parameter>
<parameter name="source_type">
<parameter_description> The type of the @source
</parameter_description>
</parameter>
<parameter name="buffer_scale">
<parameter_description> The scale-factor that the @source buffer is allocated for
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> The source x position in @source to start copying from in GL coordinates
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> The source y position in @source to start copying from in GL coordinates
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width of the region to draw
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height of the region to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_get_clip_rectangle">
<description>
This is a convenience function around cairo_clip_extents().
It rounds the clip extents to integer coordinates and returns
a boolean indicating if a clip area exists.


</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> return location for the clip, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a clip rectangle exists, %FALSE if all of @cr is
clipped and all drawing can be skipped
</return>
</function>

<function name="gdk_cairo_get_drawing_context">
<description>
Retrieves the #GdkDrawingContext that created the Cairo
context @cr.


</description>
<parameters>
<parameter name="cr">
<parameter_description> a Cairo context
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDrawingContext, if any is set
</return>
</function>

<function name="gdk_cairo_rectangle">
<description>
Adds the given rectangle to the current path of @cr.

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_region">
<description>
Adds the given region to the current path of @cr.

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #cairo_region_t
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_region_create_from_surface">
<description>
Creates region that describes covers the area where the given
@surface is more than 50% opaque.

This function takes into account device offsets that might be
set with cairo_surface_set_device_offset().


</description>
<parameters>
<parameter name="surface">
<parameter_description> a cairo surface
</parameter_description>
</parameter>
</parameters>
<return> A #cairo_region_t; must be freed with cairo_region_destroy()
</return>
</function>

<function name="gdk_cairo_set_source_pixbuf">
<description>
Sets the given pixbuf as the source pattern for @cr.

The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @pixbuf is @pixbuf_x, @pixbuf_y.

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="pixbuf_x">
<parameter_description> X coordinate of location to place upper left corner of @pixbuf
</parameter_description>
</parameter>
<parameter name="pixbuf_y">
<parameter_description> Y coordinate of location to place upper left corner of @pixbuf
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_set_source_rgba">
<description>
Sets the specified #GdkRGBA as the source color of @cr.

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="rgba">
<parameter_description> a #GdkRGBA
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_surface_create_from_pixbuf">
<description>
Creates an image surface with the same contents as
the pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="scale">
<parameter_description> the scale of the new surface, or 0 to use same as @surface
</parameter_description>
</parameter>
<parameter name="for_surface">
<parameter_description> The surface this will be drawn to, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new cairo surface, must be freed with cairo_surface_destroy()
</return>
</function>

<function name="gdk_cairo_surface_upload_to_gl">
<description>
Uploads the contents of a Cairo @surface to a GL texture @target.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a Cairo surface
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a GL texture target
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the texture @target
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the texture @target
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a #GdkGLContext, or %NULL to use the currently
bound context
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_get_content">
<description>
Returns the #GdkContentProvider currently set on @clipboard. If the
@clipboard is empty or its contents are not owned by the current process,
%NULL will be returned.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
</parameters>
<return> The content of a clipboard or %NULL
if the clipboard does not maintain any content.
</return>
</function>

<function name="gdk_clipboard_get_display">
<description>
Gets the #GdkDisplay that the clipboard was created for.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay
</return>
</function>

<function name="gdk_clipboard_get_formats">
<description>
Gets the formats that the clipboard can provide its current contents in.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
</parameters>
<return> The formats of the clipboard
</return>
</function>

<function name="gdk_clipboard_is_local">
<description>
Returns if the clipboard is local. A clipboard is considered local if it was
last claimed by the running application.

Note that gdk_clipboard_get_content() may return %NULL even on a local
clipboard. In this case the clipboard is empty.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the clipboard is local
</return>
</function>

<function name="gdk_clipboard_read_async">
<description>
Asynchronously requests an input stream to read the @clipboard's
contents from. When the operation is finished @callback will be called. 
You can then call gdk_clipboard_read_finish() to get the result of the 
operation.

The clipboard will choose the most suitable mime type from the given list
to fulfill the request, preferring the ones listed first. 

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="mime_types">
<parameter_description> a %NULL-terminated array of mime types to choose from
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the [I/O priority][io-priority]
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_read_finish">
<description>
Finishes an asynchronous clipboard read started with gdk_clipboard_read_async().


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="out_mime_type">
<parameter_description> pointer to store
the chosen mime type in or %NULL
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occurring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream or %NULL on error.
</return>
</function>

<function name="gdk_clipboard_read_text_async">
<description>
Asynchronously request the @clipboard contents converted to a string.
When the operation is finished @callback will be called. You can then
call gdk_clipboard_read_text_finish() to get the result.

This is a simple wrapper around gdk_clipboard_read_value_async(). Use
that function or gdk_clipboard_read_async() directly if you need more
control over the operation.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_read_text_finish">
<description>
Finishes an asynchronous clipboard read started with
gdk_clipboard_read_text_async().


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occurring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a new string or %NULL on error.
</return>
</function>

<function name="gdk_clipboard_read_texture_async">
<description>
Asynchronously request the @clipboard contents converted to a #GdkPixbuf.
When the operation is finished @callback will be called. You can then
call gdk_clipboard_read_texture_finish() to get the result.

This is a simple wrapper around gdk_clipboard_read_value_async(). Use
that function or gdk_clipboard_read_async() directly if you need more
control over the operation.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_read_texture_finish">
<description>
Finishes an asynchronous clipboard read started with
gdk_clipboard_read_texture_async().


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occurring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkTexture or %NULL on error.
</return>
</function>

<function name="gdk_clipboard_read_value_async">
<description>
Asynchronously request the @clipboard contents converted to the given
@type. When the operation is finished @callback will be called. 
You can then call gdk_clipboard_read_value_finish() to get the resulting
#GValue.

For local clipboard contents that are available in the given #GType, the
value will be copied directly. Otherwise, GDK will try to use
gdk_content_deserialize_async() to convert the clipboard's data.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GType to read
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the [I/O priority][io-priority]
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_read_value_finish">
<description>
Finishes an asynchronous clipboard read started with
gdk_clipboard_read_value_async().


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occurring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GValue containing the result.
</return>
</function>

<function name="gdk_clipboard_set">
<description>
Sets the clipboard to contain the value collected from the given
varargs.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> type of value to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value contents conforming to @type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_set_content">
<description>
Sets a new content provider on @clipboard. The clipboard will claim the
#GdkDisplay's resources and advertise these new contents to other
applications.

In the rare case of a failure, this function will return %FALSE. The
clipboard will then continue reporting its old contents and ignore
@provider.

If the contents are read by either an external application or the
@clipboard's read functions, @clipboard will select the best format to
transfer the contents and then request that format from @provider.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="provider">
<parameter_description> the new contents of @clipboard or
%NULL to clear the clipboard
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the clipboard succeeded
</return>
</function>

<function name="gdk_clipboard_set_text">
<description>
Puts the given @text into the clipboard.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> Text to put into the clipboard
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_set_texture">
<description>
Puts the given @texture into the clipboard.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="texture">
<parameter_description> a #GdkTexture to put into the clipboard
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_set_valist">
<description>
Sets the clipboard to contain the value collected from the given
@args.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> type of value to set
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> varargs containing the value of @type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_set_value">
<description>
Sets the @clipboard to contain the given @value.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_store_async">
<description>
Asynchronously instructs the @clipboard to store its contents remotely to
preserve them for later usage. If the clipboard is not local, this function
does nothing but report success.

This function is called automatically when gtk_main() or #GtkApplication
exit, so you likely don't need to call it.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the [I/O priority][io-priority]
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_clipboard_store_finish">
<description>
Finishes an asynchronous clipboard store started with gdk_clipboard_store_async().


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GdkClipboard
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occurring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if storing was successful.
</return>
</function>

<function name="gdk_content_deserialize_async">
<description>
Read content from the given input stream and deserialize it, asynchronously.
When the operation is finished, @callback will be called. You can then
call gdk_content_deserialize_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream to read the serialized content from
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> the mime type to deserialize from
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the GType to deserialize from
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the operation is done
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to the callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_deserialize_finish">
<description>
Finishes a content deserialization operation.


</description>
<parameters>
<parameter name="result">
<parameter_description> the #GAsyncResult
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for the result of the operation
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was successful. In this case, @value is set.
%FALSE if an error occurred. In this case, @error is set
</return>
</function>

<function name="gdk_content_deserializer_get_cancellable">
<description>
Gets the cancellable that was passed to gdk_content_deserialize_async().


</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
</parameters>
<return> the cancellable for the current operation
</return>
</function>

<function name="gdk_content_deserializer_get_gtype">
<description>
Gets the GType to create an instance of.


</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
</parameters>
<return> the GType for the current operation
</return>
</function>

<function name="gdk_content_deserializer_get_input_stream">
<description>
Gets the input stream that was passed to gdk_content_deserialize_async().


</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
</parameters>
<return> the input stream for the current operation
</return>
</function>

<function name="gdk_content_deserializer_get_mime_type">
<description>
Gets the mime type to deserialize from.


</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
</parameters>
<return> the mime type for the current operation
</return>
</function>

<function name="gdk_content_deserializer_get_priority">
<description>
Gets the io priority that was passed to gdk_content_deserialize_async().


</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
</parameters>
<return> the io priority for the current operation
</return>
</function>

<function name="gdk_content_deserializer_get_task_data">
<description>
Gets the data that was associated with @deserializer via gdk_content_deserializer_set_task_data().


</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
</parameters>
<return> the task data for @deserializer
</return>
</function>

<function name="gdk_content_deserializer_get_user_data">
<description>
Gets the user data that was passed when the deserializer was registered.


</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
</parameters>
<return> the user data for this deserializer
</return>
</function>

<function name="gdk_content_deserializer_get_value">
<description>
Gets the #GValue to store the deserialized object in.


</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
</parameters>
<return> the #GValue for the current operation
</return>
</function>

<function name="gdk_content_deserializer_return_error">
<description>
Indicate that the deserialization has ended with an error.
This function consumes @error.

</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_deserializer_return_success">
<description>
Indicate that the deserialization has been successfully completed.

</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_deserializer_set_task_data">
<description>
Associate data with the current deserialization operation.

</description>
<parameters>
<parameter name="deserializer">
<parameter_description> a #GdkContentDeserializer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to associate with this operation
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> destroy notify for @data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_formats_builder_add_formats">
<description>
Appends all formats from @formats to @builder, skipping those that
already exist.

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GdkContentFormatsBuilder
</parameter_description>
</parameter>
<parameter name="formats">
<parameter_description> the formats to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_formats_builder_add_gtype">
<description>
Appends @gtype to @builder if it has not already been added.

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GdkContentFormatsBuilder
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GType
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_formats_builder_add_mime_type">
<description>
Appends @mime_type to @builder if it has not already been added.

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GdkContentFormatsBuilder
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> a mime type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_formats_builder_free_to_formats">
<description>
Creates a new #GdkContentFormats from the current state of the
given @builder, and frees the @builder instance.


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GdkContentFormatsBuilder
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GdkContentFormats
with all the formats added to @builder
</return>
</function>

<function name="gdk_content_formats_builder_new">
<description>
Create a new #GdkContentFormatsBuilder object. The resulting builder
would create an empty #GdkContentFormats. Use addition functions to add
types to it.


</description>
<parameters>
</parameters>
<return> a new #GdkContentFormatsBuilder
</return>
</function>

<function name="gdk_content_formats_builder_ref">
<description>
Acquires a reference on the given @builder.

This function is intended primarily for bindings. #GdkContentFormatsBuilder objects
should not be kept around.


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GdkContentFormatsBuilder
</parameter_description>
</parameter>
</parameters>
<return> the given #GdkContentFormatsBuilder with
its reference count increased
</return>
</function>

<function name="gdk_content_formats_builder_to_formats">
<description>
Creates a new #GdkContentFormats from the given @builder.

The given #GdkContentFormatsBuilder is reset once this function returns;
you cannot call this function multiple times on the same @builder instance.

This function is intended primarily for bindings. C code should use
gdk_content_formats_builder_free_to_formats().


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GdkContentFormatsBuilder
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GdkContentFormats
with all the formats added to @builder
</return>
</function>

<function name="gdk_content_formats_builder_unref">
<description>
Releases a reference on the given @builder.

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GdkContentFormatsBuilder
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_formats_contain_gtype">
<description>
Checks if a given #GType is part of the given @formats.


</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GType to search for
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #GType was found
</return>
</function>

<function name="gdk_content_formats_contain_mime_type">
<description>
Checks if a given mime type is part of the given @formats.


</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> the mime type to search for
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mime_type was found
</return>
</function>

<function name="gdk_content_formats_get_gtypes">
<description>
Gets the #GTypes included in @formats. Note that @formats may not
contain any #GTypes, in particular when they are empty. In that
case %NULL will be returned. 


</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
<parameter name="n_gtypes">
<parameter_description> optional pointer to take the
number of #GTypes contained in the return value
</parameter_description>
</parameter>
</parameters>
<return> %G_TYPE_INVALID-terminated array of 
types included in @formats or %NULL if none.
</return>
</function>

<function name="gdk_content_formats_get_mime_types">
<description>
Gets the mime types included in @formats. Note that @formats may not
contain any mime types, in particular when they are empty. In that
case %NULL will be returned. 


</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
<parameter name="n_mime_types">
<parameter_description> optional pointer to take the
number of mime types contained in the return value
</parameter_description>
</parameter>
</parameters>
<return> %NULL-terminated array of 
interned strings of mime types included in @formats or %NULL
if none.
</return>
</function>

<function name="gdk_content_formats_match">
<description>
Checks if @first and @second have any matching formats.


</description>
<parameters>
<parameter name="first">
<parameter_description> the primary #GdkContentFormats to intersect
</parameter_description>
</parameter>
<parameter name="second">
<parameter_description> the #GdkContentFormats to intersect with
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a matching format was found.
</return>
</function>

<function name="gdk_content_formats_match_gtype">
<description>
Finds the first #GType from @first that is also contained
in @second. If no matching #GType is found, %G_TYPE_INVALID
is returned.


</description>
<parameters>
<parameter name="first">
<parameter_description> the primary #GdkContentFormats to intersect
</parameter_description>
</parameter>
<parameter name="second">
<parameter_description> the #GdkContentFormats to intersect with
</parameter_description>
</parameter>
</parameters>
<return> The first common #GType or %G_TYPE_INVALID if none.
</return>
</function>

<function name="gdk_content_formats_match_mime_type">
<description>
Finds the first mime type from @first that is also contained
in @second. If no matching mime type is found, %NULL is
returned.


</description>
<parameters>
<parameter name="first">
<parameter_description> the primary #GdkContentFormats to intersect
</parameter_description>
</parameter>
<parameter name="second">
<parameter_description> the #GdkContentFormats to intersect with
</parameter_description>
</parameter>
</parameters>
<return> The first common mime type or %NULL if none.
</return>
</function>

<function name="gdk_content_formats_new">
<description>
Creates a new #GdkContentFormats from an array of mime types.

The mime types must be valid and different from each other or the
behavior of the return value is undefined. If you cannot guarantee
this, use #GdkContentFormatsBuilder instead.


</description>
<parameters>
<parameter name="mime_types">
<parameter_description> Pointer to an
array of mime types
</parameter_description>
</parameter>
<parameter name="n_mime_types">
<parameter_description> number of entries in @mime_types.
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkContentFormats.
</return>
</function>

<function name="gdk_content_formats_new_for_gtype">
<description>
Creates a new #GdkContentFormats for a given #GType.


</description>
<parameters>
<parameter name="type">
<parameter_description> a $GType
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkContentFormats
</return>
</function>

<function name="gdk_content_formats_print">
<description>
Prints the given @formats into a string for human consumption.
This is meant for debugging and logging.

The form of the representation may change at any time and is
not guranteed to stay identical.

</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> a #GString to print into
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_formats_ref">
<description>
Increases the reference count of a #GdkContentFormats by one.


</description>
<parameters>
<parameter name="formats">
<parameter_description>  a #GdkContentFormats
</parameter_description>
</parameter>
</parameters>
<return> the passed in #GdkContentFormats.
</return>
</function>

<function name="gdk_content_formats_to_string">
<description>
Prints the given @formats into a human-readable string.
This is a small wrapper around gdk_content_formats_print() to help
when debugging.


</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gdk_content_formats_union">
<description>
Append all missing types from @second to @first, in the order
they had in @second.


</description>
<parameters>
<parameter name="first">
<parameter_description> the #GdkContentFormats to merge into
</parameter_description>
</parameter>
<parameter name="second">
<parameter_description> the #GdkContentFormats to merge from
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkContentFormats
</return>
</function>

<function name="gdk_content_formats_union_deserialize_gtypes">
<description>
Add GTypes for mime types in @formats for which deserializers are
registered.

Return: a new #GdkContentFormats

</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_formats_union_deserialize_mime_types">
<description>
Add mime types for GTypes in @formats for which deserializers are
registered.

Return: a new #GdkContentFormats

</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_formats_union_serialize_gtypes">
<description>
Add GTypes for the mime types in @formats for which serializers are
registered.

Return: a new #GdkContentFormats

</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_formats_union_serialize_mime_types">
<description>
Add mime types for GTypes in @formats for which serializers are
registered.

Return: a new #GdkContentFormats

</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_formats_unref">
<description>
Decreases the reference count of a #GdkContentFormats by one.
If the resulting reference count is zero, frees the formats.

</description>
<parameters>
<parameter name="formats">
<parameter_description> a #GdkContentFormats
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_provider_content_changed">
<description>
Emits the #GdkContentProvider::contents-changed signal.

</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdkContentProvider
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_provider_get_value">
<description>
Gets the convtents of @provider stored in @value.

The @value will have been initialized to the #GType the value should be
provided in. This given #GType does not need to be listed in the formats
returned by gdk_content_provider_ref_formats(). However, if the given
#GType is not supported, this operation can fail and
#G_IO_ERROR_NOT_SUPPORTED will be reported.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdkContentProvider
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the #GValue to fill
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occurring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value was set successfully. Otherwise
@error will be set to describe the failure.
</return>
</function>

<function name="gdk_content_provider_new_for_bytes">
<description>
Create a content provider that provides the given @bytes as data for
the given @mime_type.


</description>
<parameters>
<parameter name="mime_type">
<parameter_description> the mime type
</parameter_description>
</parameter>
<parameter name="bytes">
<parameter_description> a #GBytes with the data for @mime_type
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkContentProvider
</return>
</function>

<function name="gdk_content_provider_new_for_value">
<description>
Create a content provider that provides the given @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkContentProvider
</return>
</function>

<function name="gdk_content_provider_ref_formats">
<description>
Gets the formats that the provider can provide its current contents in.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdkContentProvider
</parameter_description>
</parameter>
</parameters>
<return> The formats of the provider
</return>
</function>

<function name="gdk_content_provider_ref_storable_formats">
<description>
Gets the formats that the provider suggests other applications to store
the data in.  
An example of such an application would be a clipboard manager.

This can be assumed to be a subset of gdk_content_provider_ref_formats().


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdkContentProvider
</parameter_description>
</parameter>
</parameters>
<return> The storable formats of the provider
</return>
</function>

<function name="gdk_content_provider_write_mime_type_async">
<description>
Asynchronously writes the contents of @provider to @stream in the given
@mime_type. When the operation is finished @callback will be called. You
can then call gdk_content_provider_write_mime_type_finish() to get the 
result of the operation.

The given mime type does not need to be listed in the formats returned by
gdk_content_provider_ref_formats(). However, if the given #GType is not
supported, #G_IO_ERROR_NOT_SUPPORTED will be reported.

The given @stream will not be closed.

</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdkContentProvider
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> the mime type to provide the data in
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> the #GOutputStream to write to
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the [I/O priority][io-priority]
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_provider_write_mime_type_finish">
<description>
Finishes an asynchronous write operation started with
gdk_content_provider_write_mime_type_async().


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdkContentProvider
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occurring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was completed successfully. Otherwise
@error will be set to describe the failure.
</return>
</function>

<function name="gdk_content_register_deserializer">
<description>
Registers a function to create objects of a given @type from
a serialized representation with the given mime type.

</description>
<parameters>
<parameter name="mime_type">
<parameter_description> the mime type which the function can deserialize from
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of objects that the function creates
</parameter_description>
</parameter>
<parameter name="deserialize">
<parameter_description> the callback
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data that @deserialize can access
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> destroy notify for @data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_register_serializer">
<description>
Registers a function to convert objects of the given @type to
a serialized representation with the given mime type.

</description>
<parameters>
<parameter name="type">
<parameter_description> the type of objects that the function can serialize
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> the mime type to serialize to
</parameter_description>
</parameter>
<parameter name="serialize">
<parameter_description> the callback
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data that @serialize can access
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> destroy notify for @data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_serialize_async">
<description>
Serialize content and write it to the given output stream, asynchronously.
When the operation is finished, @callback will be called. You can then
call gdk_content_serialize_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream to write the serialized content to
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> the mime type to serialize to
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the content to serialize
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the operation is done
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to the callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_serialize_finish">
<description>
Finishes a content serialization operation.


</description>
<parameters>
<parameter name="result">
<parameter_description> the #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was successful, %FALSE if an
error occurred. In this case, @error is set
</return>
</function>

<function name="gdk_content_serializer_get_cancellable">
<description>
Gets the cancellable that was passed to gdk_content_serialize_async().


</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
</parameters>
<return> the cancellable for the current operation
</return>
</function>

<function name="gdk_content_serializer_get_gtype">
<description>
Gets the GType to of the object to serialize.


</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
</parameters>
<return> the GType for the current operation
</return>
</function>

<function name="gdk_content_serializer_get_mime_type">
<description>
Gets the mime type to serialize to.


</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
</parameters>
<return> the mime type for the current operation
</return>
</function>

<function name="gdk_content_serializer_get_output_stream">
<description>
Gets the output stream that was passed to gdk_content_serialize_async().


</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
</parameters>
<return> the output stream for the current operation
</return>
</function>

<function name="gdk_content_serializer_get_priority">
<description>
Gets the io priority that was passed to gdk_content_serialize_async().


</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
</parameters>
<return> the io priority for the current operation
</return>
</function>

<function name="gdk_content_serializer_get_task_data">
<description>
Gets the data that was associated with @serializer via gdk_content_serializer_set_task_data().


</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
</parameters>
<return> the task data for @serializer
</return>
</function>

<function name="gdk_content_serializer_get_user_data">
<description>
Gets the user data that was passed when the serializer was registered.


</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
</parameters>
<return> the user data for this serializer
</return>
</function>

<function name="gdk_content_serializer_get_value">
<description>
Gets the #GValue to read the object to serialize from.


</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
</parameters>
<return> the #GValue for the current operation
</return>
</function>

<function name="gdk_content_serializer_return_error">
<description>
Indicate that the serialization has ended with an error.
This function consumes @error.

</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_serializer_return_success">
<description>
Indicate that the serialization has been successfully completed.

</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_content_serializer_set_task_data">
<description>
Associate data with the current serialization operation.

</description>
<parameters>
<parameter name="serializer">
<parameter_description> a #GdkContentSerializer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to associate with this operation
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> destroy notify for @data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cursor_get_fallback">
<description>
Returns the fallback for this @cursor. The fallback will be used if this
cursor is not available on a given #GdkDisplay.

For named cursors, this can happen when using nonstandard names or when
using an incomplete cursor theme.
For textured cursors, this can happen when the texture is too large or
when the #GdkDisplay it is used on does not support textured cursors.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> the fallback of the cursor or %NULL to use
the default cursor as fallback.
</return>
</function>

<function name="gdk_cursor_get_hotspot_x">
<description>
Returns the horizontal offset of the hotspot. The hotspot indicates the
pixel that will be directly above the cursor.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> the horizontal offset of the hotspot or 0 for named cursors
</return>
</function>

<function name="gdk_cursor_get_hotspot_y">
<description>
Returns the vertical offset of the hotspot. The hotspot indicates the
pixel that will be directly above the cursor.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> the vertical offset of the hotspot or 0 for named cursors
</return>
</function>

<function name="gdk_cursor_get_name">
<description>
Returns the name of the cursor. If the cursor is not a named cursor, %NULL
will be returned and the GdkCursor::texture property will be set.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> the name of the cursor or %NULL if it is not
a named cursor
</return>
</function>

<function name="gdk_cursor_get_texture">
<description>
Returns the texture for the cursor. If the cursor is a named cursor, %NULL
will be returned and the GdkCursor::name property will be set.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> the texture for cursor or %NULL if it is a
named cursor
</return>
</function>

<function name="gdk_cursor_new_from_name">
<description>
Creates a new cursor by looking up @name in the current cursor
theme.

A recommended set of cursor names that will work across different
platforms can be found in the CSS specification:
- &quot;none&quot;
- ![](default_cursor.png) &quot;default&quot;
- ![](help_cursor.png) &quot;help&quot;
- ![](pointer_cursor.png) &quot;pointer&quot;
- ![](context_menu_cursor.png) &quot;context-menu&quot;
- ![](progress_cursor.png) &quot;progress&quot;
- ![](wait_cursor.png) &quot;wait&quot;
- ![](cell_cursor.png) &quot;cell&quot;
- ![](crosshair_cursor.png) &quot;crosshair&quot;
- ![](text_cursor.png) &quot;text&quot;
- ![](vertical_text_cursor.png) &quot;vertical-text&quot;
- ![](alias_cursor.png) &quot;alias&quot;
- ![](copy_cursor.png) &quot;copy&quot;
- ![](no_drop_cursor.png) &quot;no-drop&quot;
- ![](move_cursor.png) &quot;move&quot;
- ![](not_allowed_cursor.png) &quot;not-allowed&quot;
- ![](grab_cursor.png) &quot;grab&quot;
- ![](grabbing_cursor.png) &quot;grabbing&quot;
- ![](all_scroll_cursor.png) &quot;all-scroll&quot;
- ![](col_resize_cursor.png) &quot;col-resize&quot;
- ![](row_resize_cursor.png) &quot;row-resize&quot;
- ![](n_resize_cursor.png) &quot;n-resize&quot;
- ![](e_resize_cursor.png) &quot;e-resize&quot;
- ![](s_resize_cursor.png) &quot;s-resize&quot;
- ![](w_resize_cursor.png) &quot;w-resize&quot;
- ![](ne_resize_cursor.png) &quot;ne-resize&quot;
- ![](nw_resize_cursor.png) &quot;nw-resize&quot;
- ![](sw_resize_cursor.png) &quot;sw-resize&quot;
- ![](se_resize_cursor.png) &quot;se-resize&quot;
- ![](ew_resize_cursor.png) &quot;ew-resize&quot;
- ![](ns_resize_cursor.png) &quot;ns-resize&quot;
- ![](nesw_resize_cursor.png) &quot;nesw-resize&quot;
- ![](nwse_resize_cursor.png) &quot;nwse-resize&quot;
- ![](zoom_in_cursor.png) &quot;zoom-in&quot;
- ![](zoom_out_cursor.png) &quot;zoom-out&quot;



</description>
<parameters>
<parameter name="fallback">
<parameter_description> %NULL or the #GdkCursor to fall back to when
this one cannot be supported
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the cursor
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor, or %NULL if there is no
cursor with the given name
</return>
</function>

<function name="gdk_cursor_new_from_texture">
<description>
Creates a new cursor from a #GdkTexture.

Not all GDK backends support RGBA cursors. If they are not
supported, a monochrome approximation will be displayed.
The functions gdk_display_supports_cursor_alpha() and
gdk_display_supports_cursor_color() can be used to determine
whether RGBA cursors are supported;
gdk_display_get_default_cursor_size() and
gdk_display_get_maximal_cursor_size() give information about
cursor sizes.

On the X backend, support for RGBA cursors requires a
sufficently new version of the X Render extension.


</description>
<parameters>
<parameter name="texture">
<parameter_description> the texture providing the pixel data
</parameter_description>
</parameter>
<parameter name="hotspot_x">
<parameter_description> the horizontal offset of the “hotspot” of the cursor
</parameter_description>
</parameter>
<parameter name="hotspot_y">
<parameter_description> the vertical offset of the “hotspot” of the cursor
</parameter_description>
</parameter>
<parameter name="fallback">
<parameter_description> %NULL or the #GdkCursor to fall back to when
this one cannot be supported
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor.
</return>
</function>

<function name="gdk_device_free_history">
<description>
Frees an array of #GdkTimeCoord that was returned by gdk_device_get_history().

</description>
<parameters>
<parameter name="events">
<parameter_description> an array of #GdkTimeCoord.
</parameter_description>
</parameter>
<parameter name="n_events">
<parameter_description> the length of the array.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_associated_device">
<description>
Returns the associated device to @device, if @device is of type
%GDK_DEVICE_TYPE_MASTER, it will return the paired pointer or
keyboard.

If @device is of type %GDK_DEVICE_TYPE_SLAVE, it will return
the master device to which @device is attached to.

If @device is of type %GDK_DEVICE_TYPE_FLOATING, %NULL will be
returned, as there is no associated device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> The associated device, or
%NULL
</return>
</function>

<function name="gdk_device_get_axes">
<description>
Returns the axes currently available on the device.

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_axis">
<description>
Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis use.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> pointer to an array of axes
</parameter_description>
</parameter>
<parameter name="use">
<parameter_description> the use to look for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the found value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given axis use was found, otherwise %FALSE
</return>
</function>

<function name="gdk_device_get_axis_use">
<description>
Returns the axis use for @index_.


</description>
<parameters>
<parameter name="device">
<parameter_description> a pointer #GdkDevice.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the axis.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkAxisUse specifying how the axis is used.
</return>
</function>

<function name="gdk_device_get_axis_value">
<description>
Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis label, as returned
by gdk_device_list_axes()


</description>
<parameters>
<parameter name="device">
<parameter_description> a pointer #GdkDevice.
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> pointer to an array of axes
</parameter_description>
</parameter>
<parameter name="axis_label">
<parameter_description> name of the label
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the found value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given axis use was found, otherwise %FALSE.
</return>
</function>

<function name="gdk_device_get_device_type">
<description>
Returns the device type for @device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDeviceType for @device.
</return>
</function>

<function name="gdk_device_get_display">
<description>
Returns the #GdkDisplay to which @device pertains.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay. This memory is owned
by GTK+, and must not be freed or unreffed.
</return>
</function>

<function name="gdk_device_get_has_cursor">
<description>
Determines whether the pointer follows device motion.
This is not meaningful for keyboard devices, which don't have a pointer.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pointer follows device motion
</return>
</function>

<function name="gdk_device_get_history">
<description>
Obtains the motion history for a pointer device; given a starting and
ending timestamp, return all events in the motion history for
the device in the given range of time. Some windowing systems
do not support motion history, in which case, %FALSE will
be returned. (This is not distinguishable from the case where
motion history is supported and no events were found.)

Note that there is also gdk_surface_set_event_compression() to get
more motion events delivered directly, independent of the windowing
system.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="surface">
<parameter_description> the surface with respect to which which the event coordinates will be reported
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> starting timestamp for range of events to return
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> ending timestamp for the range of events to return
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description>
location to store a newly-allocated array of #GdkTimeCoord, or
%NULL
</parameter_description>
</parameter>
<parameter name="n_events">
<parameter_description> location to store the length of
@events, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the windowing system supports motion history and
at least one event was found.
</return>
</function>

<function name="gdk_device_get_key">
<description>
If @index_ has a valid keyval, this function will return %TRUE
and fill in @keyval and @modifiers with the keyval settings.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the macro button to get.
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> return value for the keyval.
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> return value for modifiers.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if keyval is set for @index.
</return>
</function>

<function name="gdk_device_get_last_event_surface">
<description>
Gets information about which surface the given pointer device is in, based on events
that have been received so far from the display server. If another application
has a pointer grab, or this application has a grab with owner_events = %FALSE,
%NULL may be returned even if the pointer is physically over one of this
application's surfaces.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice, with a source other than %GDK_SOURCE_KEYBOARD
</parameter_description>
</parameter>
</parameters>
<return> the last surface the device
</return>
</function>

<function name="gdk_device_get_mode">
<description>
Determines the mode of the device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a #GdkInputSource
</return>
</function>

<function name="gdk_device_get_n_axes">
<description>
Returns the number of axes the device currently has.


</description>
<parameters>
<parameter name="device">
<parameter_description> a pointer #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> the number of axes.
</return>
</function>

<function name="gdk_device_get_n_keys">
<description>
Returns the number of keys the device currently has.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> the number of keys.
</return>
</function>

<function name="gdk_device_get_name">
<description>
Determines the name of the device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a name
</return>
</function>

<function name="gdk_device_get_position">
<description>
Gets the current location of @device. As a slave device
coordinates are those of its master pointer, This function
may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().

</description>
<parameters>
<parameter name="device">
<parameter_description> pointer device to query status about.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store root window X coordinate of @device, or %NULL.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store root window Y coordinate of @device, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_position_double">
<description>
Gets the current location of @device in double precision. As a slave device's
coordinates are those of its master pointer, this function
may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them. See gdk_device_grab().

</description>
<parameters>
<parameter name="device">
<parameter_description> pointer device to query status about.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store root window X coordinate of @device, or %NULL.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store root window Y coordinate of @device, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_product_id">
<description>
Returns the product ID of this device, or %NULL if this information couldn't
be obtained. This ID is retrieved from the device, and is thus constant for
it. See gdk_device_get_vendor_id() for more information.


</description>
<parameters>
<parameter name="device">
<parameter_description> a slave #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> the product ID, or %NULL
</return>
</function>

<function name="gdk_device_get_seat">
<description>
Returns the #GdkSeat the device belongs to.


</description>
<parameters>
<parameter name="device">
<parameter_description> A #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> A #GdkSeat. This memory is owned by GTK+ and
must not be freed.
</return>
</function>

<function name="gdk_device_get_source">
<description>
Determines the type of the device.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a #GdkInputSource
</return>
</function>

<function name="gdk_device_get_state">
<description>
Gets the current state of a pointer device relative to @surface. As a slave
device’s coordinates are those of its master pointer, this
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them. See gdk_device_grab().

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
<parameter name="surface">
<parameter_description> a #GdkSurface.
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> an array of doubles to store the values of
the axes of @device in, or %NULL.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> location to store the modifiers, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_surface_at_position">
<description>
Obtains the surface underneath @device, returning the location of the device in @win_x and @win_y. Returns
%NULL if the surface tree under @device is not known to GDK (for example, belongs to another application).

As a slave device coordinates are those of its master pointer, This
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().


</description>
<parameters>
<parameter name="device">
<parameter_description> pointer #GdkDevice to query info to.
</parameter_description>
</parameter>
<parameter name="win_x">
<parameter_description> return location for the X coordinate of the device location,
relative to the surface origin, or %NULL.
</parameter_description>
</parameter>
<parameter name="win_y">
<parameter_description> return location for the Y coordinate of the device location,
relative to the surface origin, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkSurface under the
device position, or %NULL.
</return>
</function>

<function name="gdk_device_get_surface_at_position_double">
<description>
Obtains the surface underneath @device, returning the location of the device in @win_x and @win_y in
double precision. Returns %NULL if the surface tree under @device is not known to GDK (for example,
belongs to another application).

As a slave device coordinates are those of its master pointer, This
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().


</description>
<parameters>
<parameter name="device">
<parameter_description> pointer #GdkDevice to query info to.
</parameter_description>
</parameter>
<parameter name="win_x">
<parameter_description> return location for the X coordinate of the device location,
relative to the surface origin, or %NULL.
</parameter_description>
</parameter>
<parameter name="win_y">
<parameter_description> return location for the Y coordinate of the device location,
relative to the surface origin, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkSurface under the
device position, or %NULL.
</return>
</function>

<function name="gdk_device_get_vendor_id">
<description>
Returns the vendor ID of this device, or %NULL if this information couldn't
be obtained. This ID is retrieved from the device, and is thus constant for
it.

This function, together with gdk_device_get_product_id(), can be used to eg.
compose #GSettings paths to store settings for this device.

|[&lt;!-- language=&quot;C&quot; --&gt;
static GSettings *
get_device_settings (GdkDevice *device)
{
const gchar *vendor, *product;
GSettings *settings;
GdkDevice *device;
gchar *path;

vendor = gdk_device_get_vendor_id (device);
product = gdk_device_get_product_id (device);

path = g_strdup_printf (&quot;/org/example/app/devices/%s:%s/&quot;, vendor, product);
settings = g_settings_new_with_path (DEVICE_SCHEMA, path);
g_free (path);

return settings;
}
]|


</description>
<parameters>
<parameter name="device">
<parameter_description> a slave #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> the vendor ID, or %NULL
</return>
</function>

<function name="gdk_device_grab">
<description>
Grabs the device so that all events coming from this device are passed to
this application until the device is ungrabbed with gdk_device_ungrab(),
or the surface becomes unviewable. This overrides any previous grab on the device
by this client.

Note that @device and @surface need to be on the same display.

Device grabs are used for operations which need complete control over the
given device events (either pointer or keyboard). For example in GTK+ this
is used for Drag and Drop operations, popup menus and such.

Note that if the event mask of an X window has selected both button press
and button release events, then a button press event will cause an automatic
pointer grab until the button is released. X does this automatically since
most applications expect to receive button press and release events in pairs.
It is equivalent to a pointer grab on the surface with @owner_events set to
%TRUE.

If you set up anything at the time you take the grab that needs to be
cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
events that are emitted when the grab ends unvoluntarily.

Deprecated: Use gdk_seat_grab() instead.

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice. To get the device you can use gtk_get_current_event_device()
or gdk_event_get_device() if the grab is in reaction to an event. Also, you can use
gdk_seat_get_pointer() but only in code that isn’t triggered by a
#GdkEvent and there aren’t other means to get a meaningful #GdkDevice to operate on.
</parameter_description>
</parameter>
<parameter name="surface">
<parameter_description> the #GdkSurface which will own the grab (the grab surface)
</parameter_description>
</parameter>
<parameter name="grab_ownership">
<parameter_description> specifies the grab ownership.
</parameter_description>
</parameter>
<parameter name="owner_events">
<parameter_description> if %FALSE then all device events are reported with respect to
@surface and are only reported if selected by @event_mask. If
%TRUE then pointer events for this application are reported
as normal, but pointer events outside this application are
reported with respect to @surface and only if selected by
@event_mask. In either mode, unreported events are discarded.
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> specifies the event mask, which is used in accordance with
@owner_events.
</parameter_description>
</parameter>
<parameter name="cursor">
<parameter_description> the cursor to display while the grab is active if the device is
a pointer. If this is %NULL then the normal cursors are used for
@surface and its descendants, and the cursor for @surface is used
elsewhere.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp of the event which led to this pointer grab. This
usually comes from the #GdkEvent struct, though %GDK_CURRENT_TIME
can be used if the time isn’t known.
</parameter_description>
</parameter>
</parameters>
<return> %GDK_GRAB_SUCCESS if the grab was successful.

</return>
</function>

<function name="gdk_device_list_axes">
<description>
Returns a #GList of #GdkAtoms, containing the labels for
the axes that @device currently has.


</description>
<parameters>
<parameter name="device">
<parameter_description> a pointer #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return>
A #GList of strings, free with g_list_free().
</return>
</function>

<function name="gdk_device_list_slave_devices">
<description>
If the device if of type %GDK_DEVICE_TYPE_MASTER, it will return
the list of slave devices attached to it, otherwise it will return
%NULL


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return>
the list of slave devices, or %NULL. The list must be
freed with g_list_free(), the contents of the list are
owned by GTK+ and should not be freed.
</return>
</function>

<function name="gdk_device_pad_get_feature_group">
<description>
Returns the group the given @feature and @idx belong to,
or -1 if feature/index do not exist in @pad.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GdkDevicePad
</parameter_description>
</parameter>
<parameter name="feature">
<parameter_description> the feature type to get the group from
</parameter_description>
</parameter>
<parameter name="feature_idx">
<parameter_description> the index of the feature to get the group from
</parameter_description>
</parameter>
</parameters>
<return> The group number of the queried pad feature.
</return>
</function>

<function name="gdk_device_pad_get_group_n_modes">
<description>
Returns the number of modes that @group may have.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GdkDevicePad
</parameter_description>
</parameter>
<parameter name="group_idx">
<parameter_description> group to get the number of available modes from
</parameter_description>
</parameter>
</parameters>
<return> The number of modes available in @group.
</return>
</function>

<function name="gdk_device_pad_get_n_features">
<description>
Returns the number of features a tablet pad has.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GdkDevicePad
</parameter_description>
</parameter>
<parameter name="feature">
<parameter_description> a pad feature
</parameter_description>
</parameter>
</parameters>
<return> The amount of elements of type @feature that this pad has.
</return>
</function>

<function name="gdk_device_pad_get_n_groups">
<description>
Returns the number of groups this pad device has. Pads have
at least one group. A pad group is a subcollection of
buttons/strip/rings that is affected collectively by a same
current mode.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GdkDevicePad
</parameter_description>
</parameter>
</parameters>
<return> The number of button/ring/strip groups in the pad.
</return>
</function>

<function name="gdk_device_set_axis_use">
<description>
Specifies how an axis of a device is used.

</description>
<parameters>
<parameter name="device">
<parameter_description> a pointer #GdkDevice
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the axis
</parameter_description>
</parameter>
<parameter name="use">
<parameter_description> specifies how the axis is used
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_set_key">
<description>
Specifies the X key event to generate when a macro button of a device
is pressed.

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the macro button to set
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> the keyval to generate
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> the modifiers to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_set_mode">
<description>
Sets a the mode of an input device. The mode controls if the
device is active and whether the device’s range is mapped to the
entire screen or to a single surface.

Note: This is only meaningful for floating devices, master devices (and
slaves connected to these) drive the pointer cursor, which is not limited
by the input mode.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the input mode.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mode was successfully changed.
</return>
</function>

<function name="gdk_device_tool_get_hardware_id">
<description>
Gets the hardware ID of this tool, or 0 if it's not known. When
non-zero, the identificator is unique for the given tool model,
meaning that two identical tools will share the same @hardware_id,
but will have different serial numbers (see gdk_device_tool_get_serial()).

This is a more concrete (and device specific) method to identify
a #GdkDeviceTool than gdk_device_tool_get_tool_type(), as a tablet
may support multiple devices with the same #GdkDeviceToolType,
but having different hardware identificators.


</description>
<parameters>
<parameter name="tool">
<parameter_description> a #GdkDeviceTool
</parameter_description>
</parameter>
</parameters>
<return> The hardware identificator of this tool.
</return>
</function>

<function name="gdk_device_tool_get_serial">
<description>
Gets the serial of this tool, this value can be used to identify a
physical tool (eg. a tablet pen) across program executions.


</description>
<parameters>
<parameter name="tool">
<parameter_description> a #GdkDeviceTool
</parameter_description>
</parameter>
</parameters>
<return> The serial ID for this tool
</return>
</function>

<function name="gdk_device_tool_get_tool_type">
<description>
Gets the #GdkDeviceToolType of the tool.


</description>
<parameters>
<parameter name="tool">
<parameter_description> a #GdkDeviceTool
</parameter_description>
</parameter>
</parameters>
<return> The physical type for this tool. This can be used to figure out what
sort of pen is being used, such as an airbrush or a pencil.
</return>
</function>

<function name="gdk_device_ungrab">
<description>
Release any grab on @device.

Deprecated: 3.20. Use gdk_seat_ungrab() instead.

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a timestap (e.g. %GDK_CURRENT_TIME).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_warp">
<description>
Warps @device in @display to the point @x,@y,
unless the device is confined to a surface by a grab,
in which case it will be moved
as far as allowed by the grab. Warping the pointer
creates events as if the user had moved the mouse
instantaneously to the destination.

Note that the pointer should normally be under the
control of the user. This function was added to cover
some rare use cases like keyboard navigation support
for the color picker in the #GtkColorSelectionDialog.

</description>
<parameters>
<parameter name="device">
<parameter_description> the device to warp.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the X coordinate of the destination.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the Y coordinate of the destination.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_beep">
<description>
Emits a short beep on @display

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_close">
<description>
Closes the connection to the windowing system for the given display,
and cleans up associated resources.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_device_is_grabbed">
<description>
Returns %TRUE if there is an ongoing grab on @device for @display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there is a grab in effect for @device.
</return>
</function>

<function name="gdk_display_flush">
<description>
Flushes any requests queued for the windowing system; this happens automatically
when the main loop blocks waiting for new events, but if your application
is drawing without returning control to the main loop, you may need
to call this function explicitly. A common case where this function
needs to be called is when an application is executing drawing commands
from a thread other than the thread where the main loop is running.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_app_launch_context">
<description>
Returns a #GdkAppLaunchContext suitable for launching
applications on the given display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkAppLaunchContext for @display.
Free with g_object_unref() when done
</return>
</function>

<function name="gdk_display_get_clipboard">
<description>
Gets the clipboard used for copy/paste operations.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the display's clipboard
</return>
</function>

<function name="gdk_display_get_default">
<description>
Gets the default #GdkDisplay. This is a convenience
function for:
`gdk_display_manager_get_default_display (gdk_display_manager_get ())`.


</description>
<parameters>
</parameters>
<return> a #GdkDisplay, or %NULL if
there is no default display.
</return>
</function>

<function name="gdk_display_get_default_group">
<description>
Returns the default group leader surface for all toplevel surfaces
on @display. This surface is implicitly created by GDK.
See gdk_surface_set_group().


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> The default group leader surface
for @display
</return>
</function>

<function name="gdk_display_get_default_seat">
<description>
Returns the default #GdkSeat for this display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the default seat.
</return>
</function>

<function name="gdk_display_get_event">
<description>
Gets the next #GdkEvent to be processed for @display, fetching events from the
windowing system if necessary.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the next #GdkEvent to be processed,
or %NULL if no events are pending
</return>
</function>

<function name="gdk_display_get_keymap">
<description>
Returns the #GdkKeymap attached to @display.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the #GdkKeymap attached to @display.
</return>
</function>

<function name="gdk_display_get_monitor">
<description>
Gets a monitor associated with this display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> number of the monitor
</parameter_description>
</parameter>
</parameters>
<return> the #GdkMonitor, or %NULL if
@monitor_num is not a valid monitor number
</return>
</function>

<function name="gdk_display_get_monitor_at_point">
<description>
Gets the monitor in which the point (@x, @y) is located,
or a nearby monitor if the point is not in any monitor.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the point
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the point
</parameter_description>
</parameter>
</parameters>
<return> the monitor containing the point
</return>
</function>

<function name="gdk_display_get_monitor_at_surface">
<description>
Gets the monitor in which the largest area of @surface
resides, or a monitor close to @surface if it is outside
of all monitors.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> the monitor with the largest overlap with @surface
</return>
</function>

<function name="gdk_display_get_n_monitors">
<description>
Gets the number of monitors that belong to @display.

The returned number is valid until the next emission of the
#GdkDisplay::monitor-added or #GdkDisplay::monitor-removed signal.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the number of monitors
</return>
</function>

<function name="gdk_display_get_name">
<description>
Gets the name of the display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> a string representing the display name. This string is owned
by GDK and should not be modified or freed.
</return>
</function>

<function name="gdk_display_get_primary_clipboard">
<description>
Gets the clipboard used for the primary selection. On backends where the
primary clipboard is not supported natively, GDK emulates this clipboard
locally.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the primary clipboard
</return>
</function>

<function name="gdk_display_get_primary_monitor">
<description>
Gets the primary monitor for the display.

The primary monitor is considered the monitor where the “main desktop”
lives. While normal application surfaces typically allow the window
manager to place the surfaces, specialized desktop applications
such as panels should place themselves on the primary monitor.

If no monitor is the designated primary monitor, any monitor
(usually the first) may be returned. To make sure there is a dedicated
primary monitor, use gdk_monitor_is_primary() on the returned monitor.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the primary monitor, or any monitor if no
primary monitor is configured by the user
</return>
</function>

<function name="gdk_display_get_setting">
<description>
Retrieves a desktop-wide setting such as double-click time
for the @display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the setting
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value of the setting
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the setting existed and a value was stored
in @value, %FALSE otherwise
</return>
</function>

<function name="gdk_display_has_pending">
<description>
Returns whether the display has events that are waiting
to be processed.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there are events ready to be processed.
</return>
</function>

<function name="gdk_display_is_closed">
<description>
Finds out if the display has been closed.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the display is closed.
</return>
</function>

<function name="gdk_display_is_composited">
<description>
Returns whether surfaces can reasonably be expected to have
their alpha channel drawn correctly on the screen. Check
gdk_display_is_rgba() for wether the display supports an
alpha channel.

On X11 this function returns whether a compositing manager is
compositing on @display.

On modern displays, this value is always %TRUE.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> Whether surfaces with RGBA visuals can reasonably be
expected to have their alpha channels drawn correctly on the screen.
</return>
</function>

<function name="gdk_display_is_rgba">
<description>
Returns wether surfaces on this @display are created with an
alpha channel.

Even if a %TRUE is returned, it is possible that the
surface’s alpha channel won’t be honored when displaying the
surface on the screen: in particular, for X an appropriate
windowing manager and compositing manager must be running to
provide appropriate display. Use gdk_display_is_composited()
to check if that is the case.

For setting an overall opacity for a top-level surface, see
gdk_surface_set_opacity().

On modern displays, this value is always %TRUE.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if surfaces are created with an alpha channel or
%FALSE if the display does not support this functionality.
</return>
</function>

<function name="gdk_display_list_seats">
<description>
Returns the list of seats known to @display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the
list of seats known to the #GdkDisplay
</return>
</function>

<function name="gdk_display_manager_get">
<description>
Gets the singleton #GdkDisplayManager object.

When called for the first time, this function consults the
`GDK_BACKEND` environment variable to find out which
of the supported GDK backends to use (in case GDK has been compiled
with multiple backends). Applications can use gdk_set_allowed_backends()
to limit what backends can be used.


</description>
<parameters>
</parameters>
<return> The global #GdkDisplayManager singleton;
gdk_parse_args(), gdk_init(), or gdk_init_check() must have
been called first.
</return>
</function>

<function name="gdk_display_manager_get_default_display">
<description>
Gets the default #GdkDisplay.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay, or %NULL if
there is no default display.
</return>
</function>

<function name="gdk_display_manager_list_displays">
<description>
List all currently open displays.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
</parameters>
<return> a newly
allocated #GSList of #GdkDisplay objects. Free with g_slist_free()
when you are done with it.
</return>
</function>

<function name="gdk_display_manager_open_display">
<description>
Opens a display.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the display to open
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay, or %NULL if the
display could not be opened
</return>
</function>

<function name="gdk_display_manager_set_default_display">
<description>
Sets @display as the default display.

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_notify_startup_complete">
<description>
Indicates to the GUI environment that the application has
finished loading, using a given identifier.

GTK+ will call this function automatically for #GtkWindow
with custom startup-notification identifier unless
gtk_window_set_auto_startup_notification() is called to
disable that feature.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="startup_id">
<parameter_description> a startup-notification identifier, for which
notification process should be completed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_open">
<description>
Opens a display.


</description>
<parameters>
<parameter name="display_name">
<parameter_description> the name of the display to open
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay, or %NULL if the
display could not be opened
</return>
</function>

<function name="gdk_display_peek_event">
<description>
Gets a copy of the first #GdkEvent in the @display’s event queue, without
removing the event from the queue.  (Note that this function will
not get more events from the windowing system.  It only checks the events
that have already been moved to the GDK event queue.)


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay 
</parameter_description>
</parameter>
</parameters>
<return> the first #GdkEvent on the
event queue
</return>
</function>

<function name="gdk_display_put_event">
<description>
Appends a copy of the given event onto the front of the event
queue for @display.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_supports_input_shapes">
<description>
Returns %TRUE if gdk_surface_input_shape_combine_mask() can
be used to modify the input shape of surfaces on @display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if surfaces with modified input shape are supported
</return>
</function>

<function name="gdk_display_supports_shapes">
<description>
Returns %TRUE if gdk_surface_shape_combine_mask() can
be used to create shaped windows on @display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if shaped windows are supported
</return>
</function>

<function name="gdk_display_sync">
<description>
Flushes any requests queued for the windowing system and waits until all
requests have been handled. This is often used for making sure that the
display is synchronized with the current state of the program. Calling
gdk_display_sync() before gdk_error_trap_pop() makes sure that any errors
generated from earlier requests are handled before the error trap is
removed.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_begin">
<description>
Starts a drag and creates a new drag context for it.

This function is called by the drag source.


</description>
<parameters>
<parameter name="surface">
<parameter_description> the source surface for this drag
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the device that controls this drag
</parameter_description>
</parameter>
<parameter name="content">
<parameter_description> the offered content
</parameter_description>
</parameter>
<parameter name="actions">
<parameter_description> the actions supported by this drag
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> the x offset to @device's position where the drag nominally started
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> the y offset to @device's position where the drag nominally started
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GdkDragContext or
%NULL on error.
</return>
</function>

<function name="gdk_drag_context_get_actions">
<description>
Determines the bitmask of actions proposed by the source if
gdk_drag_context_get_suggested_action() returns %GDK_ACTION_ASK.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDragAction flags
</return>
</function>

<function name="gdk_drag_context_get_dest_surface">
<description>
Returns the destination surface for the DND operation.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkSurface
</return>
</function>

<function name="gdk_drag_context_get_device">
<description>
Returns the #GdkDevice associated to the drag context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> The #GdkDevice associated to @context.
</return>
</function>

<function name="gdk_drag_context_get_display">
<description>
Gets the #GdkDisplay that the drag context was created for.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay
</return>
</function>

<function name="gdk_drag_context_get_drag_surface">
<description>
Returns the surface on which the drag icon should be rendered
during the drag operation. Note that the surface may not be
available until the drag operation has begun. GDK will move
the surface in accordance with the ongoing drag operation.
The surface is owned by @context and will be destroyed when
the drag operation is over.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> the drag surface, or %NULL
</return>
</function>

<function name="gdk_drag_context_get_formats">
<description>
Retrieves the formats supported by this context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkContentFormats
</return>
</function>

<function name="gdk_drag_context_get_selected_action">
<description>
Determines the action chosen by the drag destination.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDragAction value
</return>
</function>

<function name="gdk_drag_context_get_source_surface">
<description>
Returns the #GdkSurface where the DND operation started.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkSurface
</return>
</function>

<function name="gdk_drag_context_get_suggested_action">
<description>
Determines the suggested drag action of the context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDragAction value
</return>
</function>

<function name="gdk_drag_context_set_device">
<description>
Associates a #GdkDevice to @context, so all Drag and Drop events
for @context are emitted as if they came from this device.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_context_set_hotspot">
<description>
Sets the position of the drag surface that will be kept
under the cursor hotspot. Initially, the hotspot is at the
top left corner of the drag surface.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> x coordinate of the drag surface hotspot
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> y coordinate of the drag surface hotspot
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_drop_done">
<description>
Inform GDK if the drop ended successfully. Passing %FALSE
for @success may trigger a drag cancellation animation.

This function is called by the drag source, and should
be the last call before dropping the reference to the
@context.

The #GdkDragContext will only take the first gdk_drag_drop_done()
call as effective, if this function is called multiple times,
all subsequent calls will be ignored.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="success">
<parameter_description> whether the drag was ultimatively successful
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_drop_succeeded">
<description>
Returns whether the dropped data has been successfully
transferred. This function is intended to be used while
handling a %GDK_DROP_FINISHED event, its return value is
meaningless at other times.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drop was successful.
</return>
</function>

<function name="gdk_drag_status">
<description>
Selects one of the actions offered by the drag source.

This function is called by the drag destination in response to
gdk_drag_motion() called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the selected action which will be taken when a drop happens,
or 0 to indicate that a drop will not be accepted
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_context_get_display">
<description>
Retrieves the #GdkDisplay the @context is created for


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDrawContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay or %NULL
</return>
</function>

<function name="gdk_draw_context_get_surface">
<description>
Retrieves the #GdkSurface used by the @context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDrawContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkSurface or %NULL
</return>
</function>

<function name="gdk_drawing_context_get_cairo_context">
<description>
Retrieves a Cairo context to be used to draw on the #GdkSurface
that created the #GdkDrawingContext. The @context must have been
created without a #GdkDrawContext for this function to work. If
gdk_drawing_context_get_paint_context() does not return %NULL,
then this function will.

The returned context is guaranteed to be valid as long as the
#GdkDrawingContext is valid, that is between a call to
gdk_surface_begin_draw_frame() and gdk_surface_end_draw_frame().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDrawingContext created with a %NULL paint context
</parameter_description>
</parameter>
</parameters>
<return> a Cairo context to be used to draw
the contents of the #GdkSurface. The context is owned by the
#GdkDrawingContext and should not be destroyed. %NULL is
returned when a paint context is in used.
</return>
</function>

<function name="gdk_drawing_context_get_clip">
<description>
Retrieves a copy of the clip region used when creating the @context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDrawingContext
</parameter_description>
</parameter>
</parameters>
<return> a Cairo region
</return>
</function>

<function name="gdk_drawing_context_get_paint_context">
<description>
Retrieves the paint context used to draw with.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDrawingContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDrawContext or %NULL
</return>
</function>

<function name="gdk_drawing_context_get_surface">
<description>
Retrieves the surface that created the drawing @context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDrawingContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkSurface
</return>
</function>

<function name="gdk_drawing_context_is_valid">
<description>
Checks whether the given #GdkDrawingContext is valid.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDrawingContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the context is valid
</return>
</function>

<function name="gdk_drop_finish">
<description>
Ends the drag operation after a drop.

This function is called by the drag destination.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="success">
<parameter_description> %TRUE if the data was successfully received
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drop_read_async">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="mime_types">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drop_read_finish">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="out_mime_type">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the #GInputStream, or %NULL
</return>
</function>

<function name="gdk_drop_reply">
<description>
Accepts or rejects a drop.

This function is called by the drag destination in response
to a drop initiated by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="accepted">
<parameter_description> %TRUE if the drop is accepted
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_copy">
<description>
Copies a #GdkEvent, copying or incrementing the reference count of the
resources associated with it (e.g. #GdkSurface’s and strings).


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> a copy of @event. Free with g_object_unref()
</return>
</function>

<function name="gdk_event_free">
<description>
Frees a #GdkEvent, freeing or decrementing any resources associated with it.

This is equivalent to g_object_unref().

</description>
<parameters>
<parameter name="event">
<parameter_description>  a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_get_axes">
<description>
Extracts all axis values from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> the array of values for all axes
</parameter_description>
</parameter>
<parameter name="n_axes">
<parameter_description> the length of array
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_axis">
<description>
Extract the axis value for a particular axis use from
an event structure.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="axis_use">
<parameter_description> the axis use to look for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value found
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the specified axis was found, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_button">
<description>
Extract the button number from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> location to store mouse button number
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered a button number
</return>
</function>

<function name="gdk_event_get_click_count">
<description>
Extracts the click count from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="click_count">
<parameter_description> location to store click count
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered a click count
</return>
</function>

<function name="gdk_event_get_coords">
<description>
Extract the event surface relative x/y coordinates from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="x_win">
<parameter_description> location to put event surface x coordinate
</parameter_description>
</parameter>
<parameter name="y_win">
<parameter_description> location to put event surface y coordinate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered event surface coordinates
</return>
</function>

<function name="gdk_event_get_crossing_detail">
<description>
Extracts the crossing detail from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> return location for the crossing detail
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_crossing_mode">
<description>
Extracts the crossing mode from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> return location for the crossing mode
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_device">
<description>
If the event contains a “device” field, this function will return
it, else it will return %NULL.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDevice, or %NULL.
</return>
</function>

<function name="gdk_event_get_device_tool">
<description>
If the event was generated by a device that supports
different tools (eg. a tablet), this function will
return a #GdkDeviceTool representing the tool that
caused the event. Otherwise, %NULL will be returned.

Note: the #GdkDeviceTool&lt;!-- --&gt;s will be constant during
the application lifetime, if settings must be stored
persistently across runs, see gdk_device_tool_get_serial()


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> The current device tool, or %NULL
</return>
</function>

<function name="gdk_event_get_display">
<description>
Retrieves the #GdkDisplay associated to the @event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay
</return>
</function>

<function name="gdk_event_get_drag_context">
<description>
Gets the drag context from a DND event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> return location for the drag context
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_event_sequence">
<description>
If @event if of type %GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE,
%GDK_TOUCH_END or %GDK_TOUCH_CANCEL, returns the #GdkEventSequence
to which the event belongs. Otherwise, return %NULL.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> the event sequence that the event belongs to
</return>
</function>

<function name="gdk_event_get_event_type">
<description>
Retrieves the type of the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> a #GdkEventType
</return>
</function>

<function name="gdk_event_get_focus_in">
<description>
Extracts whether this is a focus-in or focus-out event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="focus_in">
<parameter_description> return location for focus direction
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_grab_surface">
<description>
Extracts the grab surface from a grab broken event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="surface">
<parameter_description> Return location for the grab surface
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_key_group">
<description>
Extracts the key group from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> return location for the key group
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_key_is_modifier">
<description>
Extracts whether the event is a key event for
a modifier key.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="is_modifier">
<parameter_description> return location for the value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_keycode">
<description>
Extracts the hardware keycode from an event.

Also see gdk_event_get_scancode().


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="keycode">
<parameter_description> location to store the keycode
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered a hardware keycode
</return>
</function>

<function name="gdk_event_get_keyval">
<description>
Extracts the keyval from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> location to store the keyval
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered a key symbol
</return>
</function>

<function name="gdk_event_get_motion_history">
<description>
Retrieves the history of the @event motion, as a list of time and
coordinates.

Since: 3.94

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent of type %GDK_MOTION_NOTIFY
</parameter_description>
</parameter>
</parameters>
<return> a list
of time and coordinates

</return>
</function>

<function name="gdk_event_get_pad_axis_value">
<description>
Extracts the information from a pad event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> Return location for the axis index
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> Return location for the axis value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_pad_button">
<description>
Extracts information about the pressed button from
a pad event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> Return location for the button
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_pad_group_mode">
<description>
Extracts group and mode information from a pad event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> return location for the group
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> return location for the mode
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_pointer_emulated">
<description>
Returns whether this event is an 'emulated' pointer event (typically
from a touch event), as opposed to a real one.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this event is emulated
</return>
</function>

<function name="gdk_event_get_root_coords">
<description>
Extract the root window relative x/y coordinates from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> location to put root window x coordinate
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> location to put root window y coordinate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered root window coordinates
</return>
</function>

<function name="gdk_event_get_scancode">
<description>
Gets the keyboard low-level scancode of a key event.

This is usually hardware_keycode. On Windows this is the high
word of WM_KEY{DOWN,UP} lParam which contains the scancode and
some extended flags.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> The associated keyboard scancode or 0
</return>
</function>

<function name="gdk_event_get_scroll_deltas">
<description>
Retrieves the scroll deltas from a #GdkEvent


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="delta_x">
<parameter_description> return location for X delta
</parameter_description>
</parameter>
<parameter name="delta_y">
<parameter_description> return location for Y delta
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event contains smooth scroll information
</return>
</function>

<function name="gdk_event_get_scroll_direction">
<description>
Extracts the scroll direction from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> location to store the scroll direction
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered a scroll direction
</return>
</function>

<function name="gdk_event_get_seat">
<description>
Returns the #GdkSeat this event was generated for.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> The #GdkSeat of this event
</return>
</function>

<function name="gdk_event_get_source_device">
<description>
This function returns the hardware (slave) #GdkDevice that has
triggered the event, falling back to the virtual (master) device
(as in gdk_event_get_device()) if the event wasn’t caused by
interaction with a hardware device. This may happen for example
in synthesized crossing events after a #GdkSurface updates its
geometry or a grab is acquired/released.

If the event does not contain a device field, this function will
return %NULL.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDevice, or %NULL.
</return>
</function>

<function name="gdk_event_get_state">
<description>
If the event contains a “state” field, puts that field in @state.

Otherwise stores an empty state (0).
@event may be %NULL, in which case it’s treated
as if the event had no state field.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent or %NULL
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> return location for state
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a state field in the event
</return>
</function>

<function name="gdk_event_get_string">
<description>
Extracts a string from an event. The string is an
approximation of the keyval in a key event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> return location for the string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_surface">
<description>
Extracts the #GdkSurface associated with an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> The #GdkSurface associated with the event
</return>
</function>

<function name="gdk_event_get_time">
<description>
Returns the time stamp from @event, if there is one; otherwise
returns #GDK_CURRENT_TIME. If @event is %NULL, returns #GDK_CURRENT_TIME.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> time stamp field from @event
</return>
</function>

<function name="gdk_event_get_touch_emulating_pointer">
<description>
Extracts whether a touch event is emulating a pointer event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="emulating">
<parameter_description> Return location for information
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_touchpad_angle_delta">
<description>
Extracts the angle from a touchpad event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="delta">
<parameter_description> Return location for angle
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_touchpad_deltas">
<description>
Extracts delta information from a touchpad event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> return location for x
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> return location for y
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_touchpad_gesture_n_fingers">
<description>
Extracts the number of fingers from a touchpad event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="n_fingers">
<parameter_description> return location for the number of fingers
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_touchpad_gesture_phase">
<description>
Extracts the touchpad gesture phase from a touchpad event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="phase">
<parameter_description> Return location for the gesture phase
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_touchpad_scale">
<description>
Extracts the scale from a touchpad event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="scale">
<parameter_description> Return location for scale
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, otherwise %FALSE
</return>
</function>

<function name="gdk_event_handler_set">
<description>
Sets the function to call to handle all events from GDK.

Note that GTK+ uses this to install its own event handler, so it is
usually not useful for GTK+ applications. (Although an application
can call this function then call gtk_main_do_event() to pass
events to GTK+.)

</description>
<parameters>
<parameter name="func">
<parameter_description> the function to call to handle events from GDK.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to the function. 
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> the function to call when the handler function is removed, i.e. when
gdk_event_handler_set() is called with another event handler.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_is_scroll_stop_event">
<description>
Check whether a scroll event is a stop scroll event. Scroll sequences
with smooth scroll information may provide a stop scroll event once the
interaction with the device finishes, e.g. by lifting a finger. This
stop scroll event is the signal that a widget may trigger kinetic
scrolling based on the current velocity.

Stop scroll events always have a a delta of 0/0.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event is a scroll stop event
</return>
</function>

<function name="gdk_event_is_sent">
<description>
Returns whether the event was sent explicitly.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event was sent explicitly
</return>
</function>

<function name="gdk_event_new">
<description>
Creates a new event of the given type. All fields are set to 0.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GdkEventType 
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GdkEvent. Free with g_object_unref()
</return>
</function>

<function name="gdk_event_set_device">
<description>
Sets the device for @event to @device. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_set_device_tool">
<description>
Sets the device tool for this event, should be rarely used.

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="tool">
<parameter_description> tool to set on the event, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_set_display">
<description>
Sets the display that an event is associated with.

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_set_source_device">
<description>
Sets the slave device for @event to @device.

The event must have been allocated by GTK+,
for instance by gdk_event_copy().

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_triggers_context_menu">
<description>
This function returns whether a #GdkEventButton should trigger a
context menu, according to platform conventions. The right mouse
button always triggers context menus. Additionally, if
gdk_keymap_get_modifier_mask() returns a non-0 mask for
%GDK_MODIFIER_INTENT_CONTEXT_MENU, then the left mouse button will
also trigger a context menu if this modifier is pressed.

This function should always be used instead of simply checking for
event-&gt;button == %GDK_BUTTON_SECONDARY.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent, currently only button events are meaningful values
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event should trigger a context menu.
</return>
</function>

<function name="gdk_events_get_angle">
<description>
If both events contain X/Y information, this function will return %TRUE
and return in @angle the relative angle from @event1 to @event2. The rotation
direction for positive angles is from the positive X axis towards the positive
Y axis.


</description>
<parameters>
<parameter name="event1">
<parameter_description> first #GdkEvent
</parameter_description>
</parameter>
<parameter name="event2">
<parameter_description> second #GdkEvent
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> return location for the relative angle between both events
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the angle could be calculated.
</return>
</function>

<function name="gdk_events_get_center">
<description>
If both events contain X/Y information, the center of both coordinates
will be returned in @x and @y.


</description>
<parameters>
<parameter name="event1">
<parameter_description> first #GdkEvent
</parameter_description>
</parameter>
<parameter name="event2">
<parameter_description> second #GdkEvent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate of the center
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate of the center
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the center could be calculated.
</return>
</function>

<function name="gdk_events_get_distance">
<description>
If both events have X/Y information, the distance between both coordinates
(as in a straight line going from @event1 to @event2) will be returned.


</description>
<parameters>
<parameter name="event1">
<parameter_description> first #GdkEvent
</parameter_description>
</parameter>
<parameter name="event2">
<parameter_description> second #GdkEvent
</parameter_description>
</parameter>
<parameter name="distance">
<parameter_description> return location for the distance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the distance could be calculated.
</return>
</function>

<function name="gdk_frame_clock_begin_updating">
<description>
Starts updates for an animation. Until a matching call to
gdk_frame_clock_end_updating() is made, the frame clock will continually
request a new frame with the %GDK_FRAME_CLOCK_PHASE_UPDATE phase.
This function may be called multiple times and frames will be
requested until gdk_frame_clock_end_updating() is called the same
number of times.

</description>
<parameters>
<parameter name="frame_clock">
<parameter_description> a #GdkFrameClock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_frame_clock_end_updating">
<description>
Stops updates for an animation. See the documentation for
gdk_frame_clock_begin_updating().

</description>
<parameters>
<parameter name="frame_clock">
<parameter_description> a #GdkFrameClock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_frame_clock_get_current_timings">
<description>
Gets the frame timings for the current frame.


</description>
<parameters>
<parameter name="frame_clock">
<parameter_description> a #GdkFrameClock
</parameter_description>
</parameter>
</parameters>
<return> the #GdkFrameTimings for the frame currently
being processed, or even no frame is being processed, for the
previous frame. Before any frames have been processed, returns
%NULL.
</return>
</function>

<function name="gdk_frame_clock_get_frame_counter">
<description>
A #GdkFrameClock maintains a 64-bit counter that increments for
each frame drawn.


</description>
<parameters>
<parameter name="frame_clock">
<parameter_description> a #GdkFrameClock
</parameter_description>
</parameter>
</parameters>
<return> inside frame processing, the value of the frame counter
for the current frame. Outside of frame processing, the frame
counter for the last frame.
</return>
</function>

<function name="gdk_frame_clock_get_frame_time">
<description>
Gets the time that should currently be used for animations.  Inside
the processing of a frame, it’s the time used to compute the
animation position of everything in a frame. Outside of a frame, it's
the time of the conceptual “previous frame,” which may be either
the actual previous frame time, or if that’s too old, an updated
time.


</description>
<parameters>
<parameter name="frame_clock">
<parameter_description> a #GdkFrameClock
</parameter_description>
</parameter>
</parameters>
<return> a timestamp in microseconds, in the timescale of
of g_get_monotonic_time().
</return>
</function>

<function name="gdk_frame_clock_get_history_start">
<description>
#GdkFrameClock internally keeps a history of #GdkFrameTimings
objects for recent frames that can be retrieved with
gdk_frame_clock_get_timings(). The set of stored frames
is the set from the counter values given by
gdk_frame_clock_get_history_start() and
gdk_frame_clock_get_frame_counter(), inclusive.


</description>
<parameters>
<parameter name="frame_clock">
<parameter_description> a #GdkFrameClock
</parameter_description>
</parameter>
</parameters>
<return> the frame counter value for the oldest frame
that is available in the internal frame history of the
#GdkFrameClock.
</return>
</function>

<function name="gdk_frame_clock_get_refresh_info">
<description>
Using the frame history stored in the frame clock, finds the last
known presentation time and refresh interval, and assuming that
presentation times are separated by the refresh interval,
predicts a presentation time that is a multiple of the refresh
interval after the last presentation time, and later than @base_time.

</description>
<parameters>
<parameter name="frame_clock">
<parameter_description> a #GdkFrameClock
</parameter_description>
</parameter>
<parameter name="base_time">
<parameter_description> base time for determining a presentaton time
</parameter_description>
</parameter>
<parameter name="refresh_interval_return">
<parameter_description> a location to store the
determined refresh interval, or %NULL. A default refresh interval of
1/60th of a second will be stored if no history is present.
</parameter_description>
</parameter>
<parameter name="presentation_time_return">
<parameter_description> a location to store the next
candidate presentation time after the given base time.
0 will be will be stored if no history is present.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_frame_clock_get_timings">
<description>
Retrieves a #GdkFrameTimings object holding timing information
for the current frame or a recent frame. The #GdkFrameTimings
object may not yet be complete: see gdk_frame_timings_get_complete().


</description>
<parameters>
<parameter name="frame_clock">
<parameter_description> a #GdkFrameClock
</parameter_description>
</parameter>
<parameter name="frame_counter">
<parameter_description> the frame counter value identifying the frame to
be received.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkFrameTimings object for the specified
frame, or %NULL if it is not available. See
gdk_frame_clock_get_history_start().
</return>
</function>

<function name="gdk_frame_clock_request_phase">
<description>
Asks the frame clock to run a particular phase. The signal
corresponding the requested phase will be emitted the next
time the frame clock processes. Multiple calls to
gdk_frame_clock_request_phase() will be combined together
and only one frame processed. If you are displaying animated
content and want to continually request the
%GDK_FRAME_CLOCK_PHASE_UPDATE phase for a period of time,
you should use gdk_frame_clock_begin_updating() instead, since
this allows GTK+ to adjust system parameters to get maximally
smooth animations.

</description>
<parameters>
<parameter name="frame_clock">
<parameter_description> a #GdkFrameClock
</parameter_description>
</parameter>
<parameter name="phase">
<parameter_description> the phase that is requested
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_frame_timings_get_complete">
<description>
The timing information in a #GdkFrameTimings is filled in
incrementally as the frame as drawn and passed off to the
window system for processing and display to the user. The
accessor functions for #GdkFrameTimings can return 0 to
indicate an unavailable value for two reasons: either because
the information is not yet available, or because it isn't
available at all. Once gdk_frame_timings_get_complete() returns
%TRUE for a frame, you can be certain that no further values
will become available and be stored in the #GdkFrameTimings.


</description>
<parameters>
<parameter name="timings">
<parameter_description> a #GdkFrameTimings
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all information that will be available
for the frame has been filled in.
</return>
</function>

<function name="gdk_frame_timings_get_frame_counter">
<description>
Gets the frame counter value of the #GdkFrameClock when this
this frame was drawn.


</description>
<parameters>
<parameter name="timings">
<parameter_description> a #GdkFrameTimings
</parameter_description>
</parameter>
</parameters>
<return> the frame counter value for this frame
</return>
</function>

<function name="gdk_frame_timings_get_frame_time">
<description>
Returns the frame time for the frame. This is the time value
that is typically used to time animations for the frame. See
gdk_frame_clock_get_frame_time().


</description>
<parameters>
<parameter name="timings">
<parameter_description> A #GdkFrameTimings
</parameter_description>
</parameter>
</parameters>
<return> the frame time for the frame, in the timescale
of g_get_monotonic_time()
</return>
</function>

<function name="gdk_frame_timings_get_predicted_presentation_time">
<description>
Gets the predicted time at which this frame will be displayed. Although
no predicted time may be available, if one is available, it will
be available while the frame is being generated, in contrast to
gdk_frame_timings_get_presentation_time(), which is only available
after the frame has been presented. In general, if you are simply
animating, you should use gdk_frame_clock_get_frame_time() rather
than this function, but this function is useful for applications
that want exact control over latency. For example, a movie player
may want this information for Audio/Video synchronization.


</description>
<parameters>
<parameter name="timings">
<parameter_description> a #GdkFrameTimings
</parameter_description>
</parameter>
</parameters>
<return> The predicted time at which the frame will be presented,
in the timescale of g_get_monotonic_time(), or 0 if no predicted
presentation time is available.
</return>
</function>

<function name="gdk_frame_timings_get_presentation_time">
<description>
Reurns the presentation time. This is the time at which the frame
became visible to the user.


</description>
<parameters>
<parameter name="timings">
<parameter_description> a #GdkFrameTimings
</parameter_description>
</parameter>
</parameters>
<return> the time the frame was displayed to the user, in the
timescale of g_get_monotonic_time(), or 0 if no presentation
time is available. See gdk_frame_timings_get_complete()
</return>
</function>

<function name="gdk_frame_timings_get_refresh_interval">
<description>
Gets the natural interval between presentation times for
the display that this frame was displayed on. Frame presentation
usually happens during the “vertical blanking interval”.


</description>
<parameters>
<parameter name="timings">
<parameter_description> a #GdkFrameTimings
</parameter_description>
</parameter>
</parameters>
<return> the refresh interval of the display, in microseconds,
or 0 if the refresh interval is not available.
See gdk_frame_timings_get_complete().
</return>
</function>

<function name="gdk_frame_timings_ref">
<description>
Increases the reference count of @timings.


</description>
<parameters>
<parameter name="timings">
<parameter_description> a #GdkFrameTimings
</parameter_description>
</parameter>
</parameters>
<return> @timings
</return>
</function>

<function name="gdk_frame_timings_unref">
<description>
Decreases the reference count of @timings. If @timings
is no longer referenced, it will be freed.

</description>
<parameters>
<parameter name="timings">
<parameter_description> a #GdkFrameTimings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_get_show_events">
<description>
Gets whether event debugging output is enabled.


</description>
<parameters>
</parameters>
<return> %TRUE if event debugging output is enabled.
</return>
</function>

<function name="gdk_gl_context_clear_current">
<description>
Clears the current #GdkGLContext.

Any OpenGL call after this function returns will be ignored
until gdk_gl_context_make_current() is called.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_gl_context_get_current">
<description>
Retrieves the current #GdkGLContext.


</description>
<parameters>
</parameters>
<return> the current #GdkGLContext, or %NULL
</return>
</function>

<function name="gdk_gl_context_get_damage">
<description>
Returns the part of the backbuffer that is known to be damaged and would
need to be redrawn. This is the area that needs to be respected in addition
to areas invalidated by GTK or the windowing system itself.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
</parameters>
<return> The damage to the backbuffer
</return>
</function>

<function name="gdk_gl_context_get_debug_enabled">
<description>
Retrieves the value set using gdk_gl_context_set_debug_enabled().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if debugging is enabled
</return>
</function>

<function name="gdk_gl_context_get_display">
<description>
Retrieves the #GdkDisplay the @context is created for


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay or %NULL
</return>
</function>

<function name="gdk_gl_context_get_forward_compatible">
<description>
Retrieves the value set using gdk_gl_context_set_forward_compatible().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the context should be forward compatible
</return>
</function>

<function name="gdk_gl_context_get_required_version">
<description>
Retrieves the major and minor version requested by calling
gdk_gl_context_set_required_version().

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
<parameter name="major">
<parameter_description> return location for the major version to request
</parameter_description>
</parameter>
<parameter name="minor">
<parameter_description> return location for the minor version to request
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gl_context_get_shared_context">
<description>
Retrieves the #GdkGLContext that this @context share data with.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkGLContext or %NULL
</return>
</function>

<function name="gdk_gl_context_get_surface">
<description>
Retrieves the #GdkSurface used by the @context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkSurface or %NULL
</return>
</function>

<function name="gdk_gl_context_get_use_es">
<description>
Checks whether the @context is using an OpenGL or OpenGL ES profile.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #GdkGLContext is using an OpenGL ES profile
</return>
</function>

<function name="gdk_gl_context_get_version">
<description>
Retrieves the OpenGL version of the @context.

The @context must be realized prior to calling this function.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
<parameter name="major">
<parameter_description> return location for the major version
</parameter_description>
</parameter>
<parameter name="minor">
<parameter_description> return location for the minor version
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gl_context_is_legacy">
<description>
Whether the #GdkGLContext is in legacy mode or not.

The #GdkGLContext must be realized before calling this function.

When realizing a GL context, GDK will try to use the OpenGL 3.2 core
profile; this profile removes all the OpenGL API that was deprecated
prior to the 3.2 version of the specification. If the realization is
successful, this function will return %FALSE.

If the underlying OpenGL implementation does not support core profiles,
GDK will fall back to a pre-3.2 compatibility profile, and this function
will return %TRUE.

You can use the value returned by this function to decide which kind
of OpenGL API to use, or whether to do extension discovery, or what
kind of shader programs to load.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the GL context is in legacy mode
</return>
</function>

<function name="gdk_gl_context_make_current">
<description>
Makes the @context the current one.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gl_context_realize">
<description>
Realizes the given #GdkGLContext.

It is safe to call this function on a realized #GdkGLContext.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the context is realized
</return>
</function>

<function name="gdk_gl_context_set_debug_enabled">
<description>
Sets whether the #GdkGLContext should perform extra validations and
run time checking. This is useful during development, but has
additional overhead.

The #GdkGLContext must not be realized or made current prior to
calling this function.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> whether to enable debugging in the context
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gl_context_set_forward_compatible">
<description>
Sets whether the #GdkGLContext should be forward compatible.

Forward compatibile contexts must not support OpenGL functionality that
has been marked as deprecated in the requested version; non-forward
compatible contexts, on the other hand, must support both deprecated and
non deprecated functionality.

The #GdkGLContext must not be realized or made current prior to calling
this function.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
<parameter name="compatible">
<parameter_description> whether the context should be forward compatible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gl_context_set_required_version">
<description>
Sets the major and minor version of OpenGL to request.

Setting @major and @minor to zero will use the default values.

The #GdkGLContext must not be realized or made current prior to calling
this function.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
<parameter name="major">
<parameter_description> the major version to request
</parameter_description>
</parameter>
<parameter name="minor">
<parameter_description> the minor version to request
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gl_context_set_use_es">
<description>
Requests that GDK create a OpenGL ES context instead of an OpenGL one,
if the platform and windowing system allows it.

The @context must not have been realized.

By default, GDK will attempt to automatically detect whether the
underlying GL implementation is OpenGL or OpenGL ES once the @context
is realized.

You should check the return value of gdk_gl_context_get_use_es() after
calling gdk_gl_context_realize() to decide whether to use the OpenGL or
OpenGL ES API, extensions, or shaders.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext:
</parameter_description>
</parameter>
<parameter name="use_es">
<parameter_description> whether the context should use OpenGL ES instead of OpenGL,
or -1 to allow auto-detection
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gl_texture_new">
<description>
Creates a new texture for an existing GL texture.

Note that the GL texture must not be modified until @destroy is called,
which will happen when the GdkTexture object is finalized, or due to
an explicit call of gdk_texture_release_gl().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkGLContext
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the ID of a texture that was created with @context
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the nominal width of the texture
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the nominal height of the texture
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a destroy notify that will be called when the GL resources
are released
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data that gets passed to @destroy
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkTexture
</return>
</function>

<function name="gdk_gl_texture_release">
<description>
Releases the GL resources held by a #GdkGLTexture that
was created with gdk_gl_texture_new().

The texture contents are still available via the
gdk_texture_download() function, after this function
has been called.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GdkTexture wrapping a GL texture
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_intern_mime_type">
<description>
Canonicalizes the given mime type and interns the result.

If @string is not a valid mime type, %NULL is returned instead.
See RFC 2048 for the syntax if mime types.


</description>
<parameters>
<parameter name="string">
<parameter_description> string of a potential mime type
</parameter_description>
</parameter>
</parameters>
<return> An interned string for the canonicalized mime type
or %NULL if the string wasn't a valid mime type
</return>
</function>

<function name="gdk_keymap_add_virtual_modifiers">
<description>
Maps the non-virtual modifiers (i.e Mod2, Mod3, ...) which are set
in @state to the virtual modifiers (i.e. Super, Hyper and Meta) and
set the corresponding bits in @state.

GDK already does this before delivering key events, but for
compatibility reasons, it only sets the first virtual modifier
it finds, whereas this function sets all matching virtual modifiers.

This function is useful when matching key events against
accelerators.

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> pointer to the modifier mask to change
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keymap_get_caps_lock_state">
<description>
Returns whether the Caps Lock modifer is locked.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if Caps Lock is on
</return>
</function>

<function name="gdk_keymap_get_direction">
<description>
Returns the direction of effective layout of the keymap.
The direction of a layout is the direction of the majority of its
symbols. See pango_unichar_direction().


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> %PANGO_DIRECTION_LTR or %PANGO_DIRECTION_RTL
if it can determine the direction. %PANGO_DIRECTION_NEUTRAL
otherwise.
</return>
</function>

<function name="gdk_keymap_get_display">
<description>
Retrieves the #GdkDisplay associated to the @keymap.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay
</return>
</function>

<function name="gdk_keymap_get_entries_for_keycode">
<description>
Returns the keyvals bound to @hardware_keycode.
The Nth #GdkKeymapKey in @keys is bound to the Nth
keyval in @keyvals. Free the returned arrays with g_free().
When a keycode is pressed by the user, the keyval from
this list of entries is selected by considering the effective
keyboard group and level. See gdk_keymap_translate_keyboard_state().


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> a keycode
</parameter_description>
</parameter>
<parameter name="keys">
<parameter_description> return
location for array of #GdkKeymapKey, or %NULL
</parameter_description>
</parameter>
<parameter name="keyvals">
<parameter_description> return
location for array of keyvals, or %NULL
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> length of @keys and @keyvals
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there were any entries
</return>
</function>

<function name="gdk_keymap_get_entries_for_keyval">
<description>
Obtains a list of keycode/group/level combinations that will
generate @keyval. Groups and levels are two kinds of keyboard mode;
in general, the level determines whether the top or bottom symbol
on a key is used, and the group determines whether the left or
right symbol is used. On US keyboards, the shift key changes the
keyboard level, and there are no groups. A group switch key might
convert a keyboard between Hebrew to English modes, for example.
#GdkEventKey contains a %group field that indicates the active
keyboard group. The level is computed from the modifier mask.
The returned array should be freed
with g_free().


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> a keyval, such as %GDK_KEY_a, %GDK_KEY_Up, %GDK_KEY_Return, etc.
</parameter_description>
</parameter>
<parameter name="keys">
<parameter_description> return location
for an array of #GdkKeymapKey
</parameter_description>
</parameter>
<parameter name="n_keys">
<parameter_description> return location for number of elements in returned array
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if keys were found and returned
</return>
</function>

<function name="gdk_keymap_get_modifier_mask">
<description>
Returns the modifier mask the @keymap’s windowing system backend
uses for a particular purpose.

Note that this function always returns real hardware modifiers, not
virtual ones (e.g. it will return #GDK_MOD1_MASK rather than
#GDK_META_MASK if the backend maps MOD1 to META), so there are use
cases where the return value of this function has to be transformed
by gdk_keymap_add_virtual_modifiers() in order to contain the
expected result.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="intent">
<parameter_description> the use case for the modifier mask
</parameter_description>
</parameter>
</parameters>
<return> the modifier mask used for @intent.
</return>
</function>

<function name="gdk_keymap_get_modifier_state">
<description>
Returns the current modifier state.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> the current modifier state.
</return>
</function>

<function name="gdk_keymap_get_num_lock_state">
<description>
Returns whether the Num Lock modifer is locked.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if Num Lock is on
</return>
</function>

<function name="gdk_keymap_get_scroll_lock_state">
<description>
Returns whether the Scroll Lock modifer is locked.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if Scroll Lock is on
</return>
</function>

<function name="gdk_keymap_have_bidi_layouts">
<description>
Determines if keyboard layouts for both right-to-left and left-to-right
languages are in use.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there are layouts in both directions, %FALSE otherwise
</return>
</function>

<function name="gdk_keymap_lookup_key">
<description>
Looks up the keyval mapped to a keycode/group/level triplet.
If no keyval is bound to @key, returns 0. For normal user input,
you want to use gdk_keymap_translate_keyboard_state() instead of
this function, since the effective group/level may not be
the same as the current keyboard state.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a #GdkKeymapKey with keycode, group, and level initialized
</parameter_description>
</parameter>
</parameters>
<return> a keyval, or 0 if none was mapped to the given @key
</return>
</function>

<function name="gdk_keymap_map_virtual_modifiers">
<description>
Maps the virtual modifiers (i.e. Super, Hyper and Meta) which
are set in @state to their non-virtual counterparts (i.e. Mod2,
Mod3,...) and set the corresponding bits in @state.

This function is useful when matching key events against
accelerators.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> pointer to the modifier state to map
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if two virtual modifiers were mapped to the
same non-virtual modifier. Note that %FALSE is also returned
if a virtual modifier is mapped to a non-virtual modifier that
was already set in @state.
</return>
</function>

<function name="gdk_keymap_translate_keyboard_state">
<description>
Translates the contents of a #GdkEventKey into a keyval, effective
group, and level. Modifiers that affected the translation and
are thus unavailable for application use are returned in
@consumed_modifiers.
See [Groups][key-group-explanation] for an explanation of
groups and levels. The @effective_group is the group that was
actually used for the translation; some keys such as Enter are not
affected by the active keyboard group. The @level is derived from
@state. For convenience, #GdkEventKey already contains the translated
keyval, so this function isn’t as useful as you might think.

@consumed_modifiers gives modifiers that should be masked outfrom @state
when comparing this key press to a hot key. For instance, on a US keyboard,
the `plus` symbol is shifted, so when comparing a key press to a
`&lt;Control&gt;plus` accelerator `&lt;Shift&gt;` should be masked out.

|[&lt;!-- language=&quot;C&quot; --&gt;
// We want to ignore irrelevant modifiers like ScrollLock
#define ALL_ACCELS_MASK (GDK_CONTROL_MASK | GDK_SHIFT_MASK | GDK_MOD1_MASK)
gdk_keymap_translate_keyboard_state (keymap, event-&gt;hardware_keycode,
event-&gt;state, event-&gt;group,
&amp;keyval, NULL, NULL, &amp;consumed);
if (keyval == GDK_PLUS &amp;&amp;
(event-&gt;state &amp; ~consumed &amp; ALL_ACCELS_MASK) == GDK_CONTROL_MASK)
// Control was pressed
]|

An older interpretation @consumed_modifiers was that it contained
all modifiers that might affect the translation of the key;
this allowed accelerators to be stored with irrelevant consumed
modifiers, by doing:
|[&lt;!-- language=&quot;C&quot; --&gt;
// XXX Don’t do this XXX
if (keyval == accel_keyval &amp;&amp;
(event-&gt;state &amp; ~consumed &amp; ALL_ACCELS_MASK) == (accel_mods &amp; ~consumed))
// Accelerator was pressed
]|

However, this did not work if multi-modifier combinations were
used in the keymap, since, for instance, `&lt;Control&gt;` would be
masked out even if only `&lt;Control&gt;&lt;Alt&gt;` was used in the keymap.
To support this usage as well as well as possible, all single
modifier combinations that could affect the key for any combination
of modifiers will be returned in @consumed_modifiers; multi-modifier
combinations are returned only when actually found in @state. When
you store accelerators, you should always store them with consumed
modifiers removed. Store `&lt;Control&gt;plus`, not `&lt;Control&gt;&lt;Shift&gt;plus`,


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> a keycode
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> a modifier state
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> active keyboard group
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> return location for keyval, or %NULL
</parameter_description>
</parameter>
<parameter name="effective_group">
<parameter_description> return location for effective
group, or %NULL
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description> return location for level, or %NULL
</parameter_description>
</parameter>
<parameter name="consumed_modifiers">
<parameter_description> return location for modifiers
that were used to determine the group or level, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a keyval bound to the keycode/state/group
</return>
</function>

<function name="gdk_keyval_convert_case">
<description>
Obtains the upper- and lower-case versions of the keyval @symbol.
Examples of keyvals are #GDK_KEY_a, #GDK_KEY_Enter, #GDK_KEY_F1, etc.

</description>
<parameters>
<parameter name="symbol">
<parameter_description> a keyval
</parameter_description>
</parameter>
<parameter name="lower">
<parameter_description> return location for lowercase version of @symbol
</parameter_description>
</parameter>
<parameter name="upper">
<parameter_description> return location for uppercase version of @symbol
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keyval_from_name">
<description>
Converts a key name to a key value.

The names are the same as those in the
`gdk/gdkkeysyms.h` header file
but without the leading “GDK_KEY_”.


</description>
<parameters>
<parameter name="keyval_name">
<parameter_description> a key name
</parameter_description>
</parameter>
</parameters>
<return> the corresponding key value, or %GDK_KEY_VoidSymbol
if the key name is not a valid key
</return>
</function>

<function name="gdk_keyval_is_lower">
<description>
Returns %TRUE if the given key value is in lower case.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @keyval is in lower case, or if @keyval is not
subject to case conversion.
</return>
</function>

<function name="gdk_keyval_is_upper">
<description>
Returns %TRUE if the given key value is in upper case.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @keyval is in upper case, or if @keyval is not subject to
case conversion.
</return>
</function>

<function name="gdk_keyval_name">
<description>
Converts a key value into a symbolic name.

The names are the same as those in the
`gdk/gdkkeysyms.h` header file
but without the leading “GDK_KEY_”.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key value
</parameter_description>
</parameter>
</parameters>
<return> a string containing the name
of the key, or %NULL if @keyval is not a valid key. The string
should not be modified.
</return>
</function>

<function name="gdk_keyval_to_lower">
<description>
Converts a key value to lower case, if applicable.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key value.
</parameter_description>
</parameter>
</parameters>
<return> the lower case form of @keyval, or @keyval itself if it is already
in lower case or it is not subject to case conversion.
</return>
</function>

<function name="gdk_keyval_to_unicode">
<description>
Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)
character.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a GDK key symbol 
</parameter_description>
</parameter>
</parameters>
<return> the corresponding unicode character, or 0 if there
is no corresponding character.
</return>
</function>

<function name="gdk_keyval_to_upper">
<description>
Converts a key value to upper case, if applicable.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key value.
</parameter_description>
</parameter>
</parameters>
<return> the upper case form of @keyval, or @keyval itself if it is already
in upper case or it is not subject to case conversion.
</return>
</function>

<function name="gdk_monitor_get_display">
<description>
Gets the display that this monitor belongs to.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
</parameters>
<return> the display
</return>
</function>

<function name="gdk_monitor_get_geometry">
<description>
Retrieves the size and position of an individual monitor within the
display coordinate space. The returned geometry is in  ”application pixels”,
not in ”device pixels” (see gdk_monitor_get_scale_factor()).

</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> a #GdkRectangle to be filled with the monitor geometry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_monitor_get_height_mm">
<description>
Gets the height in millimeters of the monitor.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
</parameters>
<return> the physical height of the monitor
</return>
</function>

<function name="gdk_monitor_get_manufacturer">
<description>
Gets the name of the monitor's manufacturer, if available.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
</parameters>
<return> the name of the manufacturer, or %NULL
</return>
</function>

<function name="gdk_monitor_get_model">
<description>
Gets the a string identifying the monitor model, if available.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
</parameters>
<return> the monitor model, or %NULL
</return>
</function>

<function name="gdk_monitor_get_refresh_rate">
<description>
Gets the refresh rate of the monitor, if available.

The value is in milli-Hertz, so a refresh rate of 60Hz
is returned as 60000.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
</parameters>
<return> the refresh rate in milli-Hertz, or 0
</return>
</function>

<function name="gdk_monitor_get_scale_factor">
<description>
Gets the internal scale factor that maps from monitor coordinates
to the actual device pixels. On traditional systems this is 1, but
on very high density outputs this can be a higher value (often 2).

This can be used if you want to create pixel based data for a
particular monitor, but most of the time you’re drawing to a surface
where it is better to use gdk_surface_get_scale_factor() instead.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
</parameters>
<return> the scale factor
</return>
</function>

<function name="gdk_monitor_get_subpixel_layout">
<description>
Gets information about the layout of red, green and blue
primaries for each pixel in this monitor, if available.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
</parameters>
<return> the subpixel layout
</return>
</function>

<function name="gdk_monitor_get_width_mm">
<description>
Gets the width in millimeters of the monitor.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
</parameters>
<return> the physical width of the monitor
</return>
</function>

<function name="gdk_monitor_get_workarea">
<description>
Retrieves the size and position of the “work area” on a monitor
within the display coordinate space. The returned geometry is in
”application pixels”, not in ”device pixels” (see
gdk_monitor_get_scale_factor()).

The work area should be considered when positioning menus and
similar popups, to avoid placing them below panels, docks or other
desktop components.

Note that not all backends may have a concept of workarea. This
function will return the monitor geometry if a workarea is not
available, or does not apply.

</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
<parameter name="workarea">
<parameter_description> a #GdkRectangle to be filled with
the monitor workarea
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_monitor_is_primary">
<description>
Gets whether this monitor should be considered primary
(see gdk_display_get_primary_monitor()).


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @monitor is primary
</return>
</function>

<function name="gdk_monitor_is_valid">
<description>
Returns %TRUE if the @monitor object corresponds to a
physical monitor. The @monitor becomes invalid when the
physical monitor is unplugged or removed.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GdkMonitor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the object corresponds to a physical monitor
</return>
</function>

<function name="gdk_paintable_compute_concrete_size">
<description>
Applies the sizing algorithm outlined in 
https://drafts.csswg.org/css-images-3/#default-sizing
to the given @paintable. See that link for more details.

It is not necessary to call this function when both @specified_width
and @specified_height are known, but it is useful to call this
function in GtkWidget:measure implementations to compute the
other dimension when only one dimension is given.

</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
<parameter name="specified_width">
<parameter_description> the width @paintable could be drawn into or
0.0 if unknown
</parameter_description>
</parameter>
<parameter name="specified_height">
<parameter_description> the height @paintable could be drawn into or
0.0 if unknown
</parameter_description>
</parameter>
<parameter name="default_width">
<parameter_description> the width @paintable would be drawn into if
no other constraints were given
</parameter_description>
</parameter>
<parameter name="default_height">
<parameter_description> the height @paintable would be drawn into if
no other constraints were given
</parameter_description>
</parameter>
<parameter name="concrete_width">
<parameter_description> will be set to the concrete width
computed.
</parameter_description>
</parameter>
<parameter name="concrete_height">
<parameter_description> will be set to the concrete height
computed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_paintable_get_current_image">
<description>
Gets an immutable paintable for the current contents displayed by @paintable.

This is useful when you want to retain the current state of an animation, for
example to take a screenshot of a running animation.

If the @paintable is already immutable, it will return itself.


</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
</parameters>
<return> An immutable paintable for the current
contents of @paintable.
</return>
</function>

<function name="gdk_paintable_get_flags">
<description>
Get flags for the paintable. This is oftentimes useful for optimizations.

See #GdkPaintableFlags for the flags and what they mean.


</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
</parameters>
<return> The #GdkPaintableFlags for this paintable.
</return>
</function>

<function name="gdk_paintable_get_intrinsic_aspect_ratio">
<description>
Gets the preferred aspect ratio the @paintable would like to be displayed at.
The aspect ration is the width divided by the height, so a value of 0.5 means
that the @paintable prefers to be displayed twice as high as it is wide.
Consumers of this interface can use this to preserve aspect ratio when displaying
this paintable.

This is a purely informational value and does not in any way limit the values
that may be passed to gdk_paintable_snapshot().

Usually when a @paintable returns non-0 values from
gdk_paintable_get_intrinsic_width() and gdk_paintable_get_intrinsic_height()
the aspect ratio should conform to those values, though that is not required.

If the @paintable does not have a preferred aspect ratio, it returns 0.0.
Negative values are never returned.


</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
</parameters>
<return> the intrinsic aspect ratio of @paintable or 0.0 if none.
</return>
</function>

<function name="gdk_paintable_get_intrinsic_height">
<description>
Gets the preferred height the @paintable would like to be displayed at.
Consumers of this interface can use this to reserve enough space to draw
the paintable.

This is a purely informational value and does not in any way limit the values
that may be passed to gdk_paintable_snapshot().

If the @paintable does not have a preferred height, it returns 0. Negative
values are never returned.


</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
</parameters>
<return> the intrinsic height of @paintable or 0 if none.
</return>
</function>

<function name="gdk_paintable_get_intrinsic_width">
<description>
Gets the preferred width the @paintable would like to be displayed at.
Consumers of this interface can use this to reserve enough space to draw
the paintable.

This is a purely informational value and does not in any way limit the values
that may be passed to gdk_paintable_snapshot().

If the @paintable does not have a preferred width, it returns 0. Negative
values are never returned.


</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
</parameters>
<return> the intrinsic width of @paintable or 0 if none.
</return>
</function>

<function name="gdk_paintable_invalidate_contents">
<description>
Called by implementations of #GdkPaintable to invalidate their contents.  
Unless the contents are invalidated, implementations must guarantee that
multiple calls to GdkPaintable::snapshot produce the same output.

This function will emit the GdkPaintable::invalidate-contents signal.

If a @paintable reports the %GDK_PAINTABLE_STATIC_CONTENTS flag,
it must not call this function.

</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_paintable_invalidate_size">
<description>
Called by implementations of #GdkPaintable to invalidate their size.  
As long as the size is not invalidated, @paintable must return the same values
for its width, height and intrinsic height.

This function will emit the GdkPaintable::invalidate-size signal.

If a @paintable reports the %GDK_PAINTABLE_STATIC_SIZE flag,
it must not call this function.

</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_paintable_snapshot">
<description>
Snapshots the given paintable with the given @width and @height at the
current (0,0) offset of the @snapshot. If @width and @height are not larger
than zero, this function will do nothing.

Since: 4.0

</description>
<parameters>
<parameter name="paintable">
<parameter_description> a #GdkPaintable
</parameter_description>
</parameter>
<parameter name="snapshot">
<parameter_description> a #GdkSnapshot to snapshot to
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width to snapshot in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height to snapshot in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pango_layout_get_clip_region">
<description>
Obtains a clip region which contains the areas where the given ranges
of text would be drawn. @x_origin and @y_origin are the top left point
to center the layout. @index_ranges should contain
ranges of bytes in the layout’s text.

Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn layout may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #PangoLayout 
</parameter_description>
</parameter>
<parameter name="x_origin">
<parameter_description> X pixel where you intend to draw the layout with this clip
</parameter_description>
</parameter>
<parameter name="y_origin">
<parameter_description> Y pixel where you intend to draw the layout with this clip
</parameter_description>
</parameter>
<parameter name="index_ranges">
<parameter_description> array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes
</parameter_description>
</parameter>
<parameter name="n_ranges">
<parameter_description> number of ranges in @index_ranges, i.e. half the size of @index_ranges
</parameter_description>
</parameter>
</parameters>
<return> a clip region containing the given ranges
</return>
</function>

<function name="gdk_pango_layout_line_get_clip_region">
<description>
Obtains a clip region which contains the areas where the given
ranges of text would be drawn. @x_origin and @y_origin are the top left
position of the layout. @index_ranges
should contain ranges of bytes in the layout’s text. The clip
region will include space to the left or right of the line (to the
layout bounding box) if you have indexes above or below the indexes
contained inside the line. This is to draw the selection all the way
to the side of the layout. However, the clip region is in line coordinates,
not layout coordinates.

Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn line may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.


</description>
<parameters>
<parameter name="line">
<parameter_description> a #PangoLayoutLine 
</parameter_description>
</parameter>
<parameter name="x_origin">
<parameter_description> X pixel where you intend to draw the layout line with this clip
</parameter_description>
</parameter>
<parameter name="y_origin">
<parameter_description> baseline pixel where you intend to draw the layout line with this clip
</parameter_description>
</parameter>
<parameter name="index_ranges">
<parameter_description> array of byte indexes into the layout,
where even members of array are start indexes and odd elements
are end indexes
</parameter_description>
</parameter>
<parameter name="n_ranges">
<parameter_description> number of ranges in @index_ranges, i.e. half the size of @index_ranges
</parameter_description>
</parameter>
</parameters>
<return> a clip region containing the given ranges
</return>
</function>

<function name="gdk_pipe_io_stream_new">
<description>
Creates a #GIOStream whose input- and output-stream behave like a pipe.
Data written into the output stream becomes available for reading on
the input stream.

Note that this is data transfer in the opposite direction to
g_output_stream_splice().


</description>
<parameters>
</parameters>
<return> a new #GIOStream
</return>
</function>

<function name="gdk_pixbuf_add_alpha">
<description>
Takes an existing pixbuf and adds an alpha channel to it.
If the existing pixbuf already had an alpha channel, the channel
values are copied from the original; otherwise, the alpha channel
is initialized to 255 (full opacity).

If @substitute_color is %TRUE, then the color specified by (@r, @g, @b) will be
assigned zero opacity. That is, if you pass (255, 255, 255) for the
substitute color, all white pixels will become fully transparent.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="substitute_color">
<parameter_description> Whether to set a color to zero opacity.  If this
is %FALSE, then the (@r, @g, @b) arguments will be ignored.
</parameter_description>
</parameter>
<parameter name="r">
<parameter_description> Red value to substitute.
</parameter_description>
</parameter>
<parameter name="g">
<parameter_description> Green value to substitute.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> Blue value to substitute.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1.
</return>
</function>

<function name="gdk_pixbuf_animation_get_height">
<description>
Queries the height of the bounding box of a pixbuf animation.


</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return> Height of the bounding box of the animation.
</return>
</function>

<function name="gdk_pixbuf_animation_get_iter">
<description>
Get an iterator for displaying an animation. The iterator provides
the frames that should be displayed at a given time. It should be
freed after use with g_object_unref().

@start_time would normally come from g_get_current_time(), and marks
the beginning of animation playback. After creating an iterator, you
should immediately display the pixbuf returned by
gdk_pixbuf_animation_iter_get_pixbuf(). Then, you should install
a timeout (with g_timeout_add()) or by some other mechanism ensure
that you'll update the image after
gdk_pixbuf_animation_iter_get_delay_time() milliseconds. Each time
the image is updated, you should reinstall the timeout with the new,
possibly-changed delay time.

As a shortcut, if @start_time is %NULL, the result of
g_get_current_time() will be used automatically.

To update the image (i.e. possibly change the result of
gdk_pixbuf_animation_iter_get_pixbuf() to a new frame of the animation),
call gdk_pixbuf_animation_iter_advance().

If you're using #GdkPixbufLoader, in addition to updating the image
after the delay time, you should also update it whenever you
receive the area_updated signal and
gdk_pixbuf_animation_iter_on_currently_loading_frame() returns
%TRUE. In this case, the frame currently being fed into the loader
has received new data, so needs to be refreshed. The delay time for
a frame may also be modified after an area_updated signal, for
example if the delay time for a frame is encoded in the data after
the frame itself. So your timeout should be reinstalled after any
area_updated signal.

A delay time of -1 is possible, indicating &quot;infinite.&quot;


</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufAnimation
</parameter_description>
</parameter>
<parameter name="start_time">
<parameter_description> time when the animation starts playing
</parameter_description>
</parameter>
</parameters>
<return> an iterator to move over the animation
</return>
</function>

<function name="gdk_pixbuf_animation_get_static_image">
<description>
If an animation is really just a plain image (has only one frame),
this function returns that image. If the animation is an animation,
this function returns a reasonable thing to display as a static
unanimated image, which might be the first frame, or something more
sophisticated. If an animation hasn't loaded any frames yet, this
function will return %NULL.


</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufAnimation
</parameter_description>
</parameter>
</parameters>
<return> unanimated image representing the animation
</return>
</function>

<function name="gdk_pixbuf_animation_get_width">
<description>
Queries the width of the bounding box of a pixbuf animation.


</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return> Width of the bounding box of the animation.
</return>
</function>

<function name="gdk_pixbuf_animation_is_static_image">
<description>
If you load a file with gdk_pixbuf_animation_new_from_file() and it
turns out to be a plain, unanimated image, then this function will
return %TRUE. Use gdk_pixbuf_animation_get_static_image() to retrieve
the image.


</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufAnimation
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the &quot;animation&quot; was really just an image
</return>
</function>

<function name="gdk_pixbuf_animation_iter_advance">
<description>
Possibly advances an animation to a new frame. Chooses the frame based
on the start time passed to gdk_pixbuf_animation_get_iter().

@current_time would normally come from g_get_current_time(), and
must be greater than or equal to the time passed to
gdk_pixbuf_animation_get_iter(), and must increase or remain
unchanged each time gdk_pixbuf_animation_iter_get_pixbuf() is
called. That is, you can't go backward in time; animations only
play forward.

As a shortcut, pass %NULL for the current time and g_get_current_time()
will be invoked on your behalf. So you only need to explicitly pass
@current_time if you're doing something odd like playing the animation
at double speed.

If this function returns %FALSE, there's no need to update the animation
display, assuming the display had been rendered prior to advancing;
if %TRUE, you need to call gdk_pixbuf_animation_iter_get_pixbuf()
and update the display with the new pixbuf.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdkPixbufAnimationIter
</parameter_description>
</parameter>
<parameter name="current_time">
<parameter_description> current time
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the image may need updating
</return>
</function>

<function name="gdk_pixbuf_animation_iter_get_delay_time">
<description>
Gets the number of milliseconds the current pixbuf should be displayed,
or -1 if the current pixbuf should be displayed forever. g_timeout_add()
conveniently takes a timeout in milliseconds, so you can use a timeout
to schedule the next update.

Note that some formats, like GIF, might clamp the timeout values in the
image file to avoid updates that are just too quick. The minimum timeout
for GIF images is currently 20 milliseconds.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an animation iterator
</parameter_description>
</parameter>
</parameters>
<return> delay time in milliseconds (thousandths of a second)
</return>
</function>

<function name="gdk_pixbuf_animation_iter_get_pixbuf">
<description>
Gets the current pixbuf which should be displayed; the pixbuf might not
be the same size as the animation itself
(gdk_pixbuf_animation_get_width(), gdk_pixbuf_animation_get_height()).
This pixbuf should be displayed for
gdk_pixbuf_animation_iter_get_delay_time() milliseconds. The caller
of this function does not own a reference to the returned pixbuf;
the returned pixbuf will become invalid when the iterator advances
to the next frame, which may happen anytime you call
gdk_pixbuf_animation_iter_advance(). Copy the pixbuf to keep it
(don't just add a reference), as it may get recycled as you advance
the iterator.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an animation iterator
</parameter_description>
</parameter>
</parameters>
<return> the pixbuf to be displayed
</return>
</function>

<function name="gdk_pixbuf_animation_iter_on_currently_loading_frame">
<description>
Used to determine how to respond to the area_updated signal on
#GdkPixbufLoader when loading an animation. area_updated is emitted
for an area of the frame currently streaming in to the loader. So if
you're on the currently loading frame, you need to redraw the screen for
the updated area.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdkPixbufAnimationIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the frame we're on is partially loaded, or the last frame
</return>
</function>

<function name="gdk_pixbuf_animation_new_from_file">
<description>
Creates a new animation by loading it from a file. The file format is
detected automatically. If the file's format does not support multi-frame
images, then an animation with a single frame will be created. Possible errors
are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.


</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file
name encoding
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created animation with a reference count of 1, or %NULL
if any of several error conditions ocurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.
</return>
</function>

<function name="gdk_pixbuf_animation_new_from_file_utf8">
<description>
Same as gdk_pixbuf_animation_new_from_file()


</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created animation with a reference count of 1, or %NULL
if any of several error conditions ocurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.
</return>
</function>

<function name="gdk_pixbuf_animation_new_from_resource">
<description>
Creates a new pixbuf animation by loading an image from an resource.

The file format is detected automatically. If %NULL is returned, then
@error will be set.

Since: 2.28

</description>
<parameters>
<parameter name="resource_path">
<parameter_description> the path of the resource file
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created animation, or %NULL if any of several error
conditions occurred: the file could not be opened, the image format is
not supported, there was not enough memory to allocate the image buffer,
the stream contained invalid data, or the operation was cancelled.

</return>
</function>

<function name="gdk_pixbuf_animation_new_from_stream">
<description>
Creates a new animation by loading it from an input stream.

The file format is detected automatically. If %NULL is returned, then
@error will be set. The @cancellable can be used to abort the operation
from another thread. If the operation was cancelled, the error
%G_IO_ERROR_CANCELLED will be returned. Other possible errors are in
the #GDK_PIXBUF_ERROR and %G_IO_ERROR domains.

The stream is not closed.

Since: 2.28

</description>
<parameters>
<parameter name="stream">
<parameter_description>  a #GInputStream to load the pixbuf from
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf, or %NULL if any of several error
conditions occurred: the file could not be opened, the image format is
not supported, there was not enough memory to allocate the image buffer,
the stream contained invalid data, or the operation was cancelled.

</return>
</function>

<function name="gdk_pixbuf_animation_new_from_stream_async">
<description>
Creates a new animation by asynchronously loading an image from an input stream.

For more details see gdk_pixbuf_new_from_stream(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_animation_new_from_stream_finish() to get the
result of the operation.

Since: 2.28

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream from which to load the animation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the pixbuf is loaded
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to the callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_animation_new_from_stream_finish">
<description>
Finishes an asynchronous pixbuf animation creation operation started with
gdk_pixbuf_animation_new_from_stream_async().

Since: 2.28

</description>
<parameters>
<parameter name="async_result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdkPixbufAnimation or %NULL on error. Free the returned
object with g_object_unref().

</return>
</function>

<function name="gdk_pixbuf_animation_ref">
<description>
Adds a reference to an animation.

Deprecated: 2.0: Use g_object_ref().

</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return> The same as the @animation argument.

</return>
</function>

<function name="gdk_pixbuf_animation_unref">
<description>
Removes a reference from an animation.

Deprecated: 2.0: Use g_object_unref().

</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_apply_embedded_orientation">
<description>
Takes an existing pixbuf and checks for the presence of an
associated &quot;orientation&quot; option, which may be provided by the 
jpeg loader (which reads the exif orientation tag) or the 
tiff loader (which reads the tiff orientation tag, and
compensates it for the partial transforms performed by 
libtiff). If an orientation option/tag is present, the
appropriate transform will be performed so that the pixbuf
is oriented correctly.

Since: 2.12

</description>
<parameters>
<parameter name="src">
<parameter_description> A #GdkPixbuf.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf, %NULL if
not enough memory could be allocated for it, or a reference to the
input pixbuf (with an increased reference count).

</return>
</function>

<function name="gdk_pixbuf_buffer_queue_clear">
<description>
Resets @queue into to initial state. All buffers it contains will be 
released and the offset will be reset to 0.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_buffer_queue_flush">
<description>
Removes the first @n_bytes bytes from the queue.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue
</parameter_description>
</parameter>
<parameter name="n_bytes">
<parameter_description> amount of bytes to flush from the queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_buffer_queue_get_offset">
<description>
Queries the amount of bytes that has already been pulled out of
@queue using functions like gdk_pixbuf_buffer_queue_pull().


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes that were already pulled from this queue.
</return>
</function>

<function name="gdk_pixbuf_buffer_queue_get_size">
<description>
Returns the number of bytes currently in @queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue
</parameter_description>
</parameter>
</parameters>
<return> amount of bytes in @queue.
</return>
</function>

<function name="gdk_pixbuf_buffer_queue_new">
<description>
Creates a new empty buffer queue.


</description>
<parameters>
</parameters>
<return> a new buffer queue. Use gdk_pixbuf_buffer_queue_unref () to free it.
</return>
</function>

<function name="gdk_pixbuf_buffer_queue_peek">
<description>
Creates a new buffer with the first @length bytes from @queue, but unlike 
gdk_pixbuf_buffer_queue_pull(), does not remove them from @queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue to read from
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> amount of bytes to peek
</parameter_description>
</parameter>
</parameters>
<return> NULL if the requested amount of data wasn't available or a new 
#GBytes. Use g_bytes_unref() after use.
</return>
</function>

<function name="gdk_pixbuf_buffer_queue_peek_buffer">
<description>
Gets the first buffer out of @queue and returns it. This function is 
equivalent to calling gdk_pixbuf_buffer_queue_peek() with the size of the
first buffer in it.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue
</parameter_description>
</parameter>
</parameters>
<return> The first buffer in @queue or %NULL if @queue is empty. Use 
g_bytes_unref() after use.
</return>
</function>

<function name="gdk_pixbuf_buffer_queue_pull">
<description>
If enough data is still available in @queue, the first @length bytes are 
put into a new buffer and that buffer is returned. The @length bytes are
removed from the head of the queue. If not enough data is available, %NULL
is returned.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> amount of bytes to pull
</parameter_description>
</parameter>
</parameters>
<return> a new #GBytes or %NULL
</return>
</function>

<function name="gdk_pixbuf_buffer_queue_pull_buffer">
<description>
Pulls the first buffer out of @queue and returns it. This function is 
equivalent to calling gdk_pixbuf_buffer_queue_pull() with the size of the
first buffer in it.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue
</parameter_description>
</parameter>
</parameters>
<return> The first buffer in @queue or %NULL if @queue is empty.
</return>
</function>

<function name="gdk_pixbuf_buffer_queue_push">
<description>
Appends the given @bytes to the buffers already in @queue. This function
will take ownership of the given @buffer. Use g_bytes_ref () before
calling this function to keep a reference.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue
</parameter_description>
</parameter>
<parameter name="bytes">
<parameter_description> #GBytes to append to @queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_buffer_queue_ref">
<description>
increases the reference count of @queue by one.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue
</parameter_description>
</parameter>
</parameters>
<return> The passed in @queue.
</return>
</function>

<function name="gdk_pixbuf_buffer_queue_unref">
<description>
Decreases the reference count of @queue by one. If no reference 
to this buffer exists anymore, the buffer and the memory 
it manages are freed.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GdkPixbufBufferQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_calculate_rowstride">
<description>
Calculates the rowstride that an image created with those values would
have. This is useful for front-ends and backends that want to sanity
check image values without needing to create them.

Since: 2.36.8

</description>
<parameters>
<parameter name="colorspace">
<parameter_description> Color space for image
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Whether the image should have transparency information
</parameter_description>
</parameter>
<parameter name="bits_per_sample">
<parameter_description> Number of bits per color sample
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of image in pixels, must be &gt; 0
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of image in pixels, must be &gt; 0
</parameter_description>
</parameter>
</parameters>
<return> the rowstride for the given values, or -1 in case of error.

</return>
</function>

<function name="gdk_pixbuf_composite">
<description>
Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y.
This gives an image in the coordinates of the destination pixbuf.
The rectangle (@dest_x, @dest_y, @dest_width, @dest_height)
is then alpha blended onto the corresponding rectangle of the
original destination image.

When the destination rectangle contains parts not in the source 
image, the data at the edges of the source image is replicated
to infinity. 

![](composite.png)

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GdkPixbuf into which to render the results
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> the left coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> the top coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of the region to render
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of the region to render
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> the offset in the X direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> the offset in the Y direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> the scale factor in the X direction
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> the scale factor in the Y direction
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
<parameter name="overall_alpha">
<parameter_description> overall alpha for source image (0..255)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_composite_color">
<description>
Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then alpha blends the rectangle (@dest_x ,@dest_y, @dest_width,
@dest_height) of the resulting image with a checkboard of the
colors @color1 and @color2 and renders it onto the destination
image.

If the source image has no alpha channel, and @overall_alpha is 255, a fast
path is used which omits the alpha blending and just performs the scaling.

See gdk_pixbuf_composite_color_simple() for a simpler variant of this
function suitable for many tasks.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GdkPixbuf into which to render the results
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> the left coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> the top coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of the region to render
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of the region to render
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> the offset in the X direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> the offset in the Y direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> the scale factor in the X direction
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> the scale factor in the Y direction
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
<parameter name="overall_alpha">
<parameter_description> overall alpha for source image (0..255)
</parameter_description>
</parameter>
<parameter name="check_x">
<parameter_description> the X offset for the checkboard (origin of checkboard is at -@check_x, -@check_y)
</parameter_description>
</parameter>
<parameter name="check_y">
<parameter_description> the Y offset for the checkboard 
</parameter_description>
</parameter>
<parameter name="check_size">
<parameter_description> the size of checks in the checkboard (must be a power of two)
</parameter_description>
</parameter>
<parameter name="color1">
<parameter_description> the color of check at upper left
</parameter_description>
</parameter>
<parameter name="color2">
<parameter_description> the color of the other check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_composite_color_simple">
<description>
Creates a new #GdkPixbuf by scaling @src to @dest_width x
@dest_height and alpha blending the result with a checkboard of colors
@color1 and @color2.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of destination image
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of destination image
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
<parameter name="overall_alpha">
<parameter_description> overall alpha for source image (0..255)
</parameter_description>
</parameter>
<parameter name="check_size">
<parameter_description> the size of checks in the checkboard (must be a power of two)
</parameter_description>
</parameter>
<parameter name="color1">
<parameter_description> the color of check at upper left
</parameter_description>
</parameter>
<parameter name="color2">
<parameter_description> the color of the other check
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkPixbuf, or %NULL if not enough memory could be
allocated for it.
</return>
</function>

<function name="gdk_pixbuf_copy">
<description>
Creates a new #GdkPixbuf with a copy of the information in the specified
@pixbuf. Note that this does not copy the options set on the original #GdkPixbuf,
use gdk_pixbuf_copy_options() for this.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or %NULL if
not enough memory could be allocated.
</return>
</function>

<function name="gdk_pixbuf_copy_area">
<description>
Copies a rectangular area from @src_pixbuf to @dest_pixbuf.  Conversion of
pixbuf formats is done automatically.

If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the copy operation.
Therefore, you can not use this function to scroll a pixbuf.

</description>
<parameters>
<parameter name="src_pixbuf">
<parameter_description> Source pixbuf.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within @src_pixbuf.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within @src_pixbuf.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the area to copy.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the area to copy.
</parameter_description>
</parameter>
<parameter name="dest_pixbuf">
<parameter_description> Destination pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> X coordinate within @dest_pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Y coordinate within @dest_pixbuf.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_copy_options">
<description>
Copy the key/value pair options attached to a #GdkPixbuf to another.
This is useful to keep original metadata after having manipulated
a file. However be careful to remove metadata which you've already
applied, such as the &quot;orientation&quot; option after rotating the image.

Since: 2.36

</description>
<parameters>
<parameter name="src_pixbuf">
<parameter_description> a #GdkPixbuf to copy options from
</parameter_description>
</parameter>
<parameter name="dest_pixbuf">
<parameter_description> the #GdkPixbuf to copy options to
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success.

</return>
</function>

<function name="gdk_pixbuf_fill">
<description>
Clears a pixbuf to the given RGBA value, converting the RGBA value into
the pixbuf's pixel format. The alpha will be ignored if the pixbuf
doesn't have an alpha channel.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="pixel">
<parameter_description> RGBA pixel to clear to
(0xffffffff is opaque white, 0x00000000 transparent black)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_flip">
<description>
Flips a pixbuf horizontally or vertically and returns the
result in a new pixbuf.

Since: 2.6

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="horizontal">
<parameter_description> %TRUE to flip horizontally, %FALSE to flip vertically
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkPixbuf, or %NULL
if not enough memory could be allocated for it.

</return>
</function>

<function name="gdk_pixbuf_format_copy">
<description>
Creates a copy of @format

Since: 2.22

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> the newly allocated copy of a #GdkPixbufFormat. Use
gdk_pixbuf_format_free() to free the resources when done

</return>
</function>

<function name="gdk_pixbuf_format_free">
<description>
Frees the resources allocated when copying a #GdkPixbufFormat
using gdk_pixbuf_format_copy()

Since: 2.22

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_format_get_description">
<description>
Returns a description of the format.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a description of the format.

</return>
</function>

<function name="gdk_pixbuf_format_get_extensions">
<description>
Returns the filename extensions typically used for files in the 
given format.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of filename extensions which must be
freed with g_strfreev() when it is no longer needed.

</return>
</function>

<function name="gdk_pixbuf_format_get_license">
<description>
Returns information about the license of the image loader for the format. The
returned string should be a shorthand for a wellknown license, e.g. &quot;LGPL&quot;,
&quot;GPL&quot;, &quot;QPL&quot;, &quot;GPL/QPL&quot;, or &quot;other&quot; to indicate some other license.  This
string should be freed with g_free() when it's no longer needed.

Since: 2.6

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a string describing the license of @format. 

</return>
</function>

<function name="gdk_pixbuf_format_get_mime_types">
<description>
Returns the mime types supported by the format.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of mime types which must be freed with 
g_strfreev() when it is no longer needed.

</return>
</function>

<function name="gdk_pixbuf_format_get_name">
<description>
Returns the name of the format.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> the name of the format. 

</return>
</function>

<function name="gdk_pixbuf_format_is_disabled">
<description>
Returns whether this image format is disabled. See
gdk_pixbuf_format_set_disabled().

Since: 2.6

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> whether this image format is disabled.

</return>
</function>

<function name="gdk_pixbuf_format_is_save_option_supported">
<description>
Returns %TRUE if the save option specified by @option_key is supported when
saving a pixbuf using the module implementing @format.
See gdk_pixbuf_save() for more information about option keys.

Since: 2.36

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
<parameter name="option_key">
<parameter_description> the name of an option
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the specified option is supported

</return>
</function>

<function name="gdk_pixbuf_format_is_scalable">
<description>
Returns whether this image format is scalable. If a file is in a 
scalable format, it is preferable to load it at the desired size, 
rather than loading it at the default size and scaling the 
resulting pixbuf to the desired size.

Since: 2.6

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> whether this image format is scalable.

</return>
</function>

<function name="gdk_pixbuf_format_is_writable">
<description>
Returns whether pixbufs can be saved in the given format.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> whether pixbufs can be saved in the given format.

</return>
</function>

<function name="gdk_pixbuf_format_set_disabled">
<description>
Disables or enables an image format. If a format is disabled, 
gdk-pixbuf won't use the image loader for this format to load 
images. Applications can use this to avoid using image loaders 
with an inappropriate license, see gdk_pixbuf_format_get_license().

Since: 2.6

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
<parameter name="disabled">
<parameter_description> %TRUE to disable the format @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_from_pixdata">
<description>
Converts a #GdkPixdata to a #GdkPixbuf. If @copy_pixels is %TRUE or
if the pixel data is run-length-encoded, the pixel data is copied into
newly-allocated memory; otherwise it is reused.

Deprecated: 2.32: Use #GResource instead.

</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata to convert into a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="copy_pixels">
<parameter_description> whether to copy raw pixel data; run-length encoded
pixel data is always copied.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store possible errors.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkPixbuf.
</return>
</function>

<function name="gdk_pixbuf_get_bits_per_sample">
<description>
Queries the number of bits per color sample in a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Number of bits per color sample.
</return>
</function>

<function name="gdk_pixbuf_get_byte_length">
<description>
Returns the length of the pixel data, in bytes.

Since: 2.26

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf
</parameter_description>
</parameter>
</parameters>
<return> The length of the pixel data.

</return>
</function>

<function name="gdk_pixbuf_get_colorspace">
<description>
Queries the color space of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Color space.
</return>
</function>

<function name="gdk_pixbuf_get_file_info">
<description>
Parses an image file far enough to determine its format and size.

Since: 2.4

</description>
<parameters>
<parameter name="filename">
<parameter_description> The name of the file to identify.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Return location for the width of the
image, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Return location for the height of the
image, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A #GdkPixbufFormat describing
the image format of the file or %NULL if the image format wasn't
recognized. The return value is owned by #GdkPixbuf and should
not be freed.

</return>
</function>

<function name="gdk_pixbuf_get_file_info_async">
<description>
Asynchronously parses an image file far enough to determine its
format and size.

For more details see gdk_pixbuf_get_file_info(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the
main thread. You can then call gdk_pixbuf_get_file_info_finish() to
get the result of the operation.

Since: 2.32

</description>
<parameters>
<parameter name="filename">
<parameter_description> The name of the file to identify
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the file info is available
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to the callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_get_file_info_finish">
<description>
Finishes an asynchronous pixbuf parsing operation started with
gdk_pixbuf_get_file_info_async().

Since: 2.32

</description>
<parameters>
<parameter name="async_result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Return location for the width of the image, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Return location for the height of the image, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A #GdkPixbufFormat describing the image
format of the file or %NULL if the image format wasn't
recognized. The return value is owned by GdkPixbuf and should
not be freed.

</return>
</function>

<function name="gdk_pixbuf_get_formats">
<description>
Obtains the available information about the image formats supported
by GdkPixbuf.

Since: 2.2

</description>
<parameters>
</parameters>
<return> A list of
#GdkPixbufFormats describing the supported image formats. The list should
be freed when it is no longer needed, but the structures themselves are
owned by #GdkPixbuf and should not be freed.

</return>
</function>

<function name="gdk_pixbuf_get_from_surface">
<description>
Transfers image data from a #cairo_surface_t and converts it to an RGB(A)
representation inside a #GdkPixbuf. This allows you to efficiently read
individual pixels from cairo surfaces.

This function will create an RGB pixbuf with 8 bits per channel.
The pixbuf will contain an alpha channel if the @surface contains one.


</description>
<parameters>
<parameter name="surface">
<parameter_description> surface to copy from
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within @surface
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within @surface
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of region to get
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of region to get
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a
reference count of 1, or %NULL on error
</return>
</function>

<function name="gdk_pixbuf_get_has_alpha">
<description>
Queries whether a pixbuf has an alpha channel (opacity information).


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if it has an alpha channel, %FALSE otherwise.
</return>
</function>

<function name="gdk_pixbuf_get_height">
<description>
Queries the height of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Height in pixels.
</return>
</function>

<function name="gdk_pixbuf_get_n_channels">
<description>
Queries the number of channels of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Number of channels.
</return>
</function>

<function name="gdk_pixbuf_get_option">
<description>
Looks up @key in the list of options that may have been attached to the
@pixbuf when it was loaded, or that may have been attached by another
function using gdk_pixbuf_set_option().

For instance, the ANI loader provides &quot;Title&quot; and &quot;Artist&quot; options. 
The ICO, XBM, and XPM loaders provide &quot;x_hot&quot; and &quot;y_hot&quot; hot-spot 
options for cursor definitions. The PNG loader provides the tEXt ancillary
chunk key/value pairs as options. Since 2.12, the TIFF and JPEG loaders
return an &quot;orientation&quot; option string that corresponds to the embedded 
TIFF/Exif orientation tag (if present). Since 2.32, the TIFF loader sets
the &quot;multipage&quot; option string to &quot;yes&quot; when a multi-page TIFF is loaded.
Since 2.32 the JPEG and PNG loaders set &quot;x-dpi&quot; and &quot;y-dpi&quot; if the file
contains image density information in dots per inch.
Since 2.36.6, the JPEG loader sets the &quot;comment&quot; option with the comment
EXIF tag.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a nul-terminated string.
</parameter_description>
</parameter>
</parameters>
<return> the value associated with @key. This is a nul-terminated 
string that should not be freed or %NULL if @key was not found.
</return>
</function>

<function name="gdk_pixbuf_get_options">
<description>
Returns a #GHashTable with a list of all the options that may have been
attached to the @pixbuf when it was loaded, or that may have been
attached by another function using gdk_pixbuf_set_option().

See gdk_pixbuf_get_option() for more details.

Since: 2.32

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return> a #GHashTable of key/values

</return>
</function>

<function name="gdk_pixbuf_get_pixels">
<description>
Queries a pointer to the pixel data of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> A pointer to the pixbuf's pixel data.
Please see the section on [image data][image-data] for information
about how the pixel data is stored in memory.

This function will cause an implicit copy of the pixbuf data if the
pixbuf was created from read-only data.
</return>
</function>

<function name="gdk_pixbuf_get_pixels_with_length">
<description>
Queries a pointer to the pixel data of a pixbuf.

Since: 2.26

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> The length of the binary data.
</parameter_description>
</parameter>
</parameters>
<return> A pointer to the pixbuf's
pixel data.  Please see the section on [image data][image-data]
for information about how the pixel data is stored in memory.

This function will cause an implicit copy of the pixbuf data if the
pixbuf was created from read-only data.

</return>
</function>

<function name="gdk_pixbuf_get_rowstride">
<description>
Queries the rowstride of a pixbuf, which is the number of bytes between
the start of a row and the start of the next row.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Distance between row starts.
</return>
</function>

<function name="gdk_pixbuf_get_width">
<description>
Queries the width of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Width in pixels.
</return>
</function>

<function name="gdk_pixbuf_loader_close">
<description>
Informs a pixbuf loader that no further writes with
gdk_pixbuf_loader_write() will occur, so that it can free its
internal loading structures. Also, tries to parse any data that
hasn't yet been parsed; if the remaining data is partial or
corrupt, an error will be returned.  If %FALSE is returned, @error
will be set to an error from the #GDK_PIXBUF_ERROR or #G_FILE_ERROR
domains. If you're just cancelling a load rather than expecting it
to be finished, passing %NULL for @error to ignore it is
reasonable.

Remember that this does not unref the loader, so if you plan not to
use it anymore, please g_object_unref() it.


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all image data written so far was successfully
            passed out via the update_area signal
</return>
</function>

<function name="gdk_pixbuf_loader_get_animation">
<description>
Queries the #GdkPixbufAnimation that a pixbuf loader is currently creating.
In general it only makes sense to call this function after the &quot;area-prepared&quot;
signal has been emitted by the loader. If the loader doesn't have enough
bytes yet (hasn't emitted the &quot;area-prepared&quot; signal) this function will 
return %NULL.


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader
</parameter_description>
</parameter>
</parameters>
<return> The #GdkPixbufAnimation that the loader is loading, or %NULL if
not enough data has been read to determine the information.
</return>
</function>

<function name="gdk_pixbuf_loader_get_format">
<description>
Obtains the available information about the format of the 
currently loading image file.

Since: 2.2

</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
</parameters>
<return> A #GdkPixbufFormat or
%NULL. The return value is owned by GdkPixbuf and should not be
freed.

</return>
</function>

<function name="gdk_pixbuf_loader_get_pixbuf">
<description>
Queries the #GdkPixbuf that a pixbuf loader is currently creating.
In general it only makes sense to call this function after the
&quot;area-prepared&quot; signal has been emitted by the loader; this means
that enough data has been read to know the size of the image that
will be allocated.  If the loader has not received enough data via
gdk_pixbuf_loader_write(), then this function returns %NULL.  The
returned pixbuf will be the same in all future calls to the loader,
so simply calling g_object_ref() should be sufficient to continue
using it.  Additionally, if the loader is an animation, it will
return the &quot;static image&quot; of the animation
(see gdk_pixbuf_animation_get_static_image()).


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
</parameters>
<return> The #GdkPixbuf that the loader is creating, or %NULL if not
enough data has been read to determine how to create the image buffer.
</return>
</function>

<function name="gdk_pixbuf_loader_new">
<description>
Creates a new pixbuf loader object.


</description>
<parameters>
</parameters>
<return> A newly-created pixbuf loader.
</return>
</function>

<function name="gdk_pixbuf_loader_new_with_mime_type">
<description>
Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of mime type @mime_type, instead of
identifying the type automatically. Useful if you want an error if
the image isn't the expected mime type, for loading image formats
that can't be reliably identified by looking at the data, or if
the user manually forces a specific mime type.

The list of supported mime types depends on what image loaders
are installed, but typically &quot;image/png&quot;, &quot;image/jpeg&quot;, &quot;image/gif&quot;, 
&quot;image/tiff&quot; and &quot;image/x-xpixmap&quot; are among the supported mime types. 
To obtain the full list of supported mime types, call 
gdk_pixbuf_format_get_mime_types() on each of the #GdkPixbufFormat 
structs returned by gdk_pixbuf_get_formats().

Since: 2.4

</description>
<parameters>
<parameter name="mime_type">
<parameter_description> the mime type to be loaded 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an allocated #GError, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf loader.
</return>
</function>

<function name="gdk_pixbuf_loader_new_with_type">
<description>
Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of type @image_type, instead of
identifying the type automatically. Useful if you want an error if
the image isn't the expected type, for loading image formats
that can't be reliably identified by looking at the data, or if
the user manually forces a specific type.

The list of supported image formats depends on what image loaders
are installed, but typically &quot;png&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;tiff&quot; and 
&quot;xpm&quot; are among the supported formats. To obtain the full list of
supported image formats, call gdk_pixbuf_format_get_name() on each 
of the #GdkPixbufFormat structs returned by gdk_pixbuf_get_formats().


</description>
<parameters>
<parameter name="image_type">
<parameter_description> name of the image format to be loaded with the image
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an allocated #GError, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf loader.
</return>
</function>

<function name="gdk_pixbuf_loader_set_size">
<description>
Causes the image to be scaled while it is loaded. The desired
image size can be determined relative to the original size of
the image by calling gdk_pixbuf_loader_set_size() from a
signal handler for the ::size-prepared signal.

Attempts to set the desired image size  are ignored after the 
emission of the ::size-prepared signal.

Since: 2.2

</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The desired width of the image being loaded.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The desired height of the image being loaded.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_loader_write">
<description>
This will cause a pixbuf loader to parse the next @count bytes of
an image.  It will return %TRUE if the data was loaded successfully,
and %FALSE if an error occurred.  In the latter case, the loader
will be closed, and will not accept further writes. If %FALSE is
returned, @error will be set to an error from the #GDK_PIXBUF_ERROR
or #G_FILE_ERROR domains.


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> Pointer to image data.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> Length of the @buf buffer in bytes.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the write was successful, or %FALSE if the loader
cannot parse the buffer.
</return>
</function>

<function name="gdk_pixbuf_loader_write_bytes">
<description>
This will cause a pixbuf loader to parse a buffer inside a #GBytes
for an image.  It will return %TRUE if the data was loaded successfully,
and %FALSE if an error occurred.  In the latter case, the loader
will be closed, and will not accept further writes. If %FALSE is
returned, @error will be set to an error from the #GDK_PIXBUF_ERROR
or #G_FILE_ERROR domains.

See also: gdk_pixbuf_loader_write()

Since: 2.30

</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> The image data as a #GBytes
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the write was successful, or %FALSE if the loader
cannot parse the buffer.

</return>
</function>

<function name="gdk_pixbuf_major_version">
<description>
The major version number of the gdk-pixbuf library.  (e.g. in 
gdk-pixbuf version 1.2.5 this is 1.) 


This variable is in the library, so represents the
gdk-pixbuf library you have linked against. Contrast with the
#GDK_PIXBUF_MAJOR macro, which represents the major version of the
gdk-pixbuf headers you have included.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_micro_version">
<description>
The micro version number of the gdk-pixbuf library.  (e.g. in 
gdk-pixbuf version 1.2.5 this is 5.) 


This variable is in the library, so represents the
gdk-pixbuf library you have linked against. Contrast with the
#GDK_PIXBUF_MICRO macro, which represents the micro version of the
gdk-pixbuf headers you have included.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_minor_version">
<description>
The minor version number of the gdk-pixbuf library.  (e.g. in 
gdk-pixbuf version 1.2.5 this is 2.) 


This variable is in the library, so represents the
gdk-pixbuf library you have linked against. Contrast with the
#GDK_PIXBUF_MINOR macro, which represents the minor version of the
gdk-pixbuf headers you have included.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_new">
<description>
Creates a new #GdkPixbuf structure and allocates a buffer for it.  The 
buffer has an optimal rowstride.  Note that the buffer is not cleared;
you will have to fill it completely yourself.


</description>
<parameters>
<parameter name="colorspace">
<parameter_description> Color space for image
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Whether the image should have transparency information
</parameter_description>
</parameter>
<parameter name="bits_per_sample">
<parameter_description> Number of bits per color sample
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of image in pixels, must be &gt; 0
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of image in pixels, must be &gt; 0
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkPixbuf with a reference count of 1, or 
%NULL if not enough memory could be allocated for the image buffer.
</return>
</function>

<function name="gdk_pixbuf_new_from_bytes">
<description>
Creates a new #GdkPixbuf out of in-memory readonly image data.
Currently only RGB images with 8 bits per sample are supported.
This is the #GBytes variant of gdk_pixbuf_new_from_data().

Since: 2.32

</description>
<parameters>
<parameter name="data">
<parameter_description> Image data in 8-bit/sample packed format inside a #GBytes
</parameter_description>
</parameter>
<parameter name="colorspace">
<parameter_description> Colorspace for the image data
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Whether the data has an opacity channel
</parameter_description>
</parameter>
<parameter name="bits_per_sample">
<parameter_description> Number of bits per sample
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the image in pixels, must be &gt; 0
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the image in pixels, must be &gt; 0
</parameter_description>
</parameter>
<parameter name="rowstride">
<parameter_description> Distance in bytes between row starts
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkPixbuf structure with a reference count of 1.
</return>
</function>

<function name="gdk_pixbuf_new_from_data">
<description>
Creates a new #GdkPixbuf out of in-memory image data.  Currently only RGB
images with 8 bits per sample are supported.

Since you are providing a pre-allocated pixel buffer, you must also
specify a way to free that data.  This is done with a function of
type #GdkPixbufDestroyNotify.  When a pixbuf created with is
finalized, your destroy notification function will be called, and
it is its responsibility to free the pixel array.

See also gdk_pixbuf_new_from_bytes().


</description>
<parameters>
<parameter name="data">
<parameter_description> Image data in 8-bit/sample packed format
</parameter_description>
</parameter>
<parameter name="colorspace">
<parameter_description> Colorspace for the image data
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Whether the data has an opacity channel
</parameter_description>
</parameter>
<parameter name="bits_per_sample">
<parameter_description> Number of bits per sample
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the image in pixels, must be &gt; 0
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the image in pixels, must be &gt; 0
</parameter_description>
</parameter>
<parameter name="rowstride">
<parameter_description> Distance in bytes between row starts
</parameter_description>
</parameter>
<parameter name="destroy_fn">
<parameter_description> Function used to free the data when the pixbuf's reference count
drops to zero, or %NULL if the data should not be freed
</parameter_description>
</parameter>
<parameter name="destroy_fn_data">
<parameter_description> Closure data to pass to the destroy notification function
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkPixbuf structure with a reference count of 1.
</return>
</function>

<function name="gdk_pixbuf_new_from_file">
<description>
Creates a new pixbuf by loading an image from a file.  The file format is
detected automatically. If %NULL is returned, then @error will be set.
Possible errors are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.


</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file
name encoding
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or %NULL if
any of several error conditions occurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.
</return>
</function>

<function name="gdk_pixbuf_new_from_file_at_scale">
<description>
Creates a new pixbuf by loading an image from a file.  The file format is
detected automatically. If %NULL is returned, then @error will be set.
Possible errors are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.
The image will be scaled to fit in the requested size, optionally preserving
the image's aspect ratio. 

When preserving the aspect ratio, a @width of -1 will cause the image
to be scaled to the exact given height, and a @height of -1 will cause
the image to be scaled to the exact given width. When not preserving
aspect ratio, a @width or @height of -1 means to not scale the image 
at all in that dimension. Negative values for @width and @height are 
allowed since 2.8.

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file
name encoding
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width the image should have or -1 to not constrain the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height the image should have or -1 to not constrain the height
</parameter_description>
</parameter>
<parameter name="preserve_aspect_ratio">
<parameter_description> %TRUE to preserve the image's aspect ratio
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or %NULL 
if any of several error conditions occurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.

</return>
</function>

<function name="gdk_pixbuf_new_from_file_at_scale_utf8">
<description>
Same as gdk_pixbuf_new_from_file_at_scale().

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width the image should have or -1 to not constrain the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height the image should have or -1 to not constrain the height
</parameter_description>
</parameter>
<parameter name="preserve_aspect_ratio">
<parameter_description> %TRUE to preserve the image's aspect ratio
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or %NULL
if any of several error conditions occurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.

</return>
</function>

<function name="gdk_pixbuf_new_from_file_at_size">
<description>
Creates a new pixbuf by loading an image from a file.  
The file format is detected automatically. If %NULL is returned, then 
@error will be set. Possible errors are in the #GDK_PIXBUF_ERROR and 
#G_FILE_ERROR domains.

The image will be scaled to fit in the requested size, preserving
the image's aspect ratio. Note that the returned pixbuf may be smaller
than @width x @height, if the aspect ratio requires it. To load
and image at the requested size, regardless of aspect ratio, use
gdk_pixbuf_new_from_file_at_scale().

Since: 2.4

</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file
name encoding
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width the image should have or -1 to not constrain the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height the image should have or -1 to not constrain the height
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or 
%NULL if any of several error conditions occurred:  the file could not 
be opened, there was no loader for the file's format, there was not 
enough memory to allocate the image buffer, or the image file contained 
invalid data.

</return>
</function>

<function name="gdk_pixbuf_new_from_file_at_size_utf8">
<description>
Same as gdk_pixbuf_new_from_file_at_size()

Since: 2.4

</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width the image should have or -1 to not constrain the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height the image should have or -1 to not constrain the height
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or
%NULL if any of several error conditions occurred:  the file could not
be opened, there was no loader for the file's format, there was not
enough memory to allocate the image buffer, or the image file contained
invalid data.

</return>
</function>

<function name="gdk_pixbuf_new_from_file_utf8">
<description>
Same as gdk_pixbuf_new_from_file()


</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or %NULL if
any of several error conditions occurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.
</return>
</function>

<function name="gdk_pixbuf_new_from_inline">
<description>
Create a #GdkPixbuf from a flat representation that is suitable for
storing as inline data in a program. This is useful if you want to
ship a program with images, but don't want to depend on any
external files.

gdk-pixbuf ships with a program called [gdk-pixbuf-csource][gdk-pixbuf-csource],
which allows for conversion of #GdkPixbufs into such a inline representation.
In almost all cases, you should pass the `--raw` option to
`gdk-pixbuf-csource`. A sample invocation would be:

|[
gdk-pixbuf-csource --raw --name=myimage_inline myimage.png
]|

For the typical case where the inline pixbuf is read-only static data,
you don't need to copy the pixel data unless you intend to write to
it, so you can pass %FALSE for @copy_pixels.  (If you pass `--rle` to
`gdk-pixbuf-csource`, a copy will be made even if @copy_pixels is %FALSE,
so using this option is generally a bad idea.)

If you create a pixbuf from const inline data compiled into your
program, it's probably safe to ignore errors and disable length checks, 
since things will always succeed:
|[
pixbuf = gdk_pixbuf_new_from_inline (-1, myimage_inline, FALSE, NULL);
]|

For non-const inline data, you could get out of memory. For untrusted 
inline data located at runtime, you could have corrupt inline data in 
addition.

Deprecated: 2.32: Use #GResource instead.

</description>
<parameters>
<parameter name="data_length">
<parameter_description> Length in bytes of the @data argument or -1 to 
disable length checks
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Byte data containing a
serialized #GdkPixdata structure
</parameter_description>
</parameter>
<parameter name="copy_pixels">
<parameter_description> Whether to copy the pixel data, or use direct pointers
@data for the resulting pixbuf
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError return location, may be %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkPixbuf structure with a reference,
count of 1, or %NULL if an error occurred.

</return>
</function>

<function name="gdk_pixbuf_new_from_resource">
<description>
Creates a new pixbuf by loading an image from an resource.

The file format is detected automatically. If %NULL is returned, then
@error will be set.

Since: 2.26

</description>
<parameters>
<parameter name="resource_path">
<parameter_description> the path of the resource file
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf, or %NULL if any of several error
conditions occurred: the file could not be opened, the image format is
not supported, there was not enough memory to allocate the image buffer,
the stream contained invalid data, or the operation was cancelled.

</return>
</function>

<function name="gdk_pixbuf_new_from_resource_at_scale">
<description>
Creates a new pixbuf by loading an image from an resource.

The file format is detected automatically. If %NULL is returned, then
@error will be set.

The image will be scaled to fit in the requested size, optionally
preserving the image's aspect ratio. When preserving the aspect ratio,
a @width of -1 will cause the image to be scaled to the exact given
height, and a @height of -1 will cause the image to be scaled to the
exact given width. When not preserving aspect ratio, a @width or
@height of -1 means to not scale the image at all in that dimension.

The stream is not closed.

Since: 2.26

</description>
<parameters>
<parameter name="resource_path">
<parameter_description> the path of the resource file
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width the image should have or -1 to not constrain the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height the image should have or -1 to not constrain the height
</parameter_description>
</parameter>
<parameter name="preserve_aspect_ratio">
<parameter_description> %TRUE to preserve the image's aspect ratio
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf, or %NULL if any of several error
conditions occurred: the file could not be opened, the image format is
not supported, there was not enough memory to allocate the image buffer,
the stream contained invalid data, or the operation was cancelled.

</return>
</function>

<function name="gdk_pixbuf_new_from_stream">
<description>
Creates a new pixbuf by loading an image from an input stream.  

The file format is detected automatically. If %NULL is returned, then 
@error will be set. The @cancellable can be used to abort the operation
from another thread. If the operation was cancelled, the error 
%G_IO_ERROR_CANCELLED will be returned. Other possible errors are in 
the #GDK_PIXBUF_ERROR and %G_IO_ERROR domains. 

The stream is not closed.

Since: 2.14

</description>
<parameters>
<parameter name="stream">
<parameter_description>  a #GInputStream to load the pixbuf from
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf, or %NULL if any of several error 
conditions occurred: the file could not be opened, the image format is 
not supported, there was not enough memory to allocate the image buffer, 
the stream contained invalid data, or the operation was cancelled.

</return>
</function>

<function name="gdk_pixbuf_new_from_stream_async">
<description>
Creates a new pixbuf by asynchronously loading an image from an input stream.

For more details see gdk_pixbuf_new_from_stream(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_new_from_stream_finish() to get the result of the operation.

Since: 2.24

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream from which to load the pixbuf
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the pixbuf is loaded
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to the callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_new_from_stream_at_scale">
<description>
Creates a new pixbuf by loading an image from an input stream.  

The file format is detected automatically. If %NULL is returned, then 
@error will be set. The @cancellable can be used to abort the operation
from another thread. If the operation was cancelled, the error 
%G_IO_ERROR_CANCELLED will be returned. Other possible errors are in 
the #GDK_PIXBUF_ERROR and %G_IO_ERROR domains. 

The image will be scaled to fit in the requested size, optionally 
preserving the image's aspect ratio.

When preserving the aspect ratio, a @width of -1 will cause the image to be
scaled to the exact given height, and a @height of -1 will cause the image
to be scaled to the exact given width. If both @width and @height are
given, this function will behave as if the smaller of the two values
is passed as -1.

When not preserving aspect ratio, a @width or @height of -1 means to not
scale the image at all in that dimension.

The stream is not closed.

Since: 2.14

</description>
<parameters>
<parameter name="stream">
<parameter_description>  a #GInputStream to load the pixbuf from
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The width the image should have or -1 to not constrain the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The height the image should have or -1 to not constrain the height
</parameter_description>
</parameter>
<parameter name="preserve_aspect_ratio">
<parameter_description> %TRUE to preserve the image's aspect ratio
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf, or %NULL if any of several error 
conditions occurred: the file could not be opened, the image format is 
not supported, there was not enough memory to allocate the image buffer, 
the stream contained invalid data, or the operation was cancelled.

</return>
</function>

<function name="gdk_pixbuf_new_from_stream_at_scale_async">
<description>
Creates a new pixbuf by asynchronously loading an image from an input stream.

For more details see gdk_pixbuf_new_from_stream_at_scale(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_new_from_stream_finish() to get the result of the operation.

Since: 2.24

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream from which to load the pixbuf
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width the image should have or -1 to not constrain the width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height the image should have or -1 to not constrain the height
</parameter_description>
</parameter>
<parameter name="preserve_aspect_ratio">
<parameter_description> %TRUE to preserve the image's aspect ratio
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the pixbuf is loaded
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to the callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_new_from_stream_finish">
<description>
Finishes an asynchronous pixbuf creation operation started with
gdk_pixbuf_new_from_stream_async().

Since: 2.24

</description>
<parameters>
<parameter name="async_result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdkPixbuf or %NULL on error. Free the returned
object with g_object_unref().

</return>
</function>

<function name="gdk_pixbuf_new_from_xpm_data">
<description>
Creates a new pixbuf by parsing XPM data in memory.  This data is commonly
the result of including an XPM file into a program's C source.


</description>
<parameters>
<parameter name="data">
<parameter_description> Pointer to inline XPM data.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1.
</return>
</function>

<function name="gdk_pixbuf_new_subpixbuf">
<description>
Creates a new pixbuf which represents a sub-region of @src_pixbuf.
The new pixbuf shares its pixels with the original pixbuf, so
writing to one affects both.  The new pixbuf holds a reference to
@src_pixbuf, so @src_pixbuf will not be finalized until the new
pixbuf is finalized.

Note that if @src_pixbuf is read-only, this function will force it
to be mutable.


</description>
<parameters>
<parameter name="src_pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> X coord in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Y coord in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of region in @src_pixbuf
</parameter_description>
</parameter>
</parameters>
<return> a new pixbuf 
</return>
</function>

<function name="gdk_pixbuf_read_pixel_bytes">
<description>
Since: 2.32

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf
</parameter_description>
</parameter>
</parameters>
<return> A new reference to a read-only copy of
the pixel data.  Note that for mutable pixbufs, this function will
incur a one-time copy of the pixel data for conversion into the
returned #GBytes.

</return>
</function>

<function name="gdk_pixbuf_read_pixels">
<description>
Returns a read-only pointer to the raw pixel data; must not be
modified.  This function allows skipping the implicit copy that
must be made if gdk_pixbuf_get_pixels() is called on a read-only
pixbuf.

Since: 2.32

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_ref">
<description>
Adds a reference to a pixbuf.

Deprecated: 2.0: Use g_object_ref().

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> The same as the @pixbuf argument.

</return>
</function>

<function name="gdk_pixbuf_remove_option">
<description>
Remove the key/value pair option attached to a #GdkPixbuf.

Since: 2.36

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a nul-terminated string representing the key to remove.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an option was removed, %FALSE if not.

</return>
</function>

<function name="gdk_pixbuf_rotate_simple">
<description>
Rotates a pixbuf by a multiple of 90 degrees, and returns the
result in a new pixbuf.

If @angle is 0, a copy of @src is returned, avoiding any rotation.

Since: 2.6

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle to rotate by
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkPixbuf, or %NULL
if not enough memory could be allocated for it.

</return>
</function>

<function name="gdk_pixbuf_saturate_and_pixelate">
<description>
Modifies saturation and optionally pixelates @src, placing the result in
@dest. @src and @dest may be the same pixbuf with no ill effects.  If
@saturation is 1.0 then saturation is not changed. If it's less than 1.0,
saturation is reduced (the image turns toward grayscale); if greater than
1.0, saturation is increased (the image gets more vivid colors). If @pixelate
is %TRUE, then pixels are faded in a checkerboard pattern to create a
pixelated image. @src and @dest must have the same image format, size, and
rowstride.


</description>
<parameters>
<parameter name="src">
<parameter_description> source image
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> place to write modified version of @src
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> saturation factor
</parameter_description>
</parameter>
<parameter name="pixelate">
<parameter_description> whether to pixelate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_save">
<description>
Saves pixbuf to a file in format @type. By default, &quot;jpeg&quot;, &quot;png&quot;, &quot;ico&quot; 
and &quot;bmp&quot; are possible file formats to save in, but more formats may be
installed. The list of all writable formats can be determined in the 
following way:

|[
void add_if_writable (GdkPixbufFormat *data, GSList **list)
{
if (gdk_pixbuf_format_is_writable (data))
*list = g_slist_prepend (*list, data);
}

GSList *formats = gdk_pixbuf_get_formats ();
GSList *writable_formats = NULL;
g_slist_foreach (formats, add_if_writable, &amp;writable_formats);
g_slist_free (formats);
]|

If @error is set, %FALSE will be returned. Possible errors include 
those in the #GDK_PIXBUF_ERROR domain and those in the #G_FILE_ERROR domain.

The variable argument list should be %NULL-terminated; if not empty,
it should contain pairs of strings that modify the save
parameters. For example:
|[
gdk_pixbuf_save (pixbuf, handle, &quot;jpeg&quot;, &amp;error, &quot;quality&quot;, &quot;100&quot;, NULL);
]|

Currently only few parameters exist. JPEG images can be saved with a
&quot;quality&quot; parameter; its value should be in the range [0,100]. JPEG
and PNG density can be set by setting the &quot;x-dpi&quot; and &quot;y-dpi&quot; parameters
to the appropriate values in dots per inch.

Text chunks can be attached to PNG images by specifying parameters of
the form &quot;tEXt::key&quot;, where key is an ASCII string of length 1-79.
The values are UTF-8 encoded strings. The PNG compression level can
be specified using the &quot;compression&quot; parameter; it's value is in an
integer in the range of [0,9].

ICC color profiles can also be embedded into PNG, JPEG and TIFF images.
The &quot;icc-profile&quot; value should be the complete ICC profile encoded
into base64.

|[
gchar *contents;
gchar *contents_encode;
gsize length;
g_file_get_contents (&quot;/home/hughsie/.color/icc/L225W.icm&quot;, &amp;contents, &amp;length, NULL);
contents_encode = g_base64_encode ((const guchar *) contents, length);
gdk_pixbuf_save (pixbuf, handle, &quot;png&quot;, &amp;error, &quot;icc-profile&quot;, contents_encode, NULL);
]|

TIFF images recognize: (1) a &quot;bits-per-sample&quot; option (integer) which
can be either 1 for saving bi-level CCITTFAX4 images, or 8 for saving
8-bits per sample; (2) a &quot;compression&quot; option (integer) which can be
1 for no compression, 2 for Huffman, 5 for LZW, 7 for JPEG and 8 for
DEFLATE (see the libtiff documentation and tiff.h for all supported
codec values); (3) an &quot;icc-profile&quot; option (zero-terminated string)
containing a base64 encoded ICC color profile.

ICO images can be saved in depth 16, 24, or 32, by using the &quot;depth&quot;
parameter. When the ICO saver is given &quot;x_hot&quot; and &quot;y_hot&quot; parameters,
it produces a CUR instead of an ICO.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> name of file to save.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> list of key-value save options, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set
</return>
</function>

<function name="gdk_pixbuf_save_to_buffer">
<description>
Saves pixbuf to a new buffer in format @type, which is currently &quot;jpeg&quot;,
&quot;png&quot;, &quot;tiff&quot;, &quot;ico&quot; or &quot;bmp&quot;.  This is a convenience function that uses
gdk_pixbuf_save_to_callback() to do the real work. Note that the buffer 
is not nul-terminated and may contain embedded  nuls.
If @error is set, %FALSE will be returned and @buffer will be set to
%NULL. Possible errors include those in the #GDK_PIXBUF_ERROR
domain.

See gdk_pixbuf_save() for more details.

Since: 2.4

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> location to receive a pointer
to the new buffer.
</parameter_description>
</parameter>
<parameter name="buffer_size">
<parameter_description> location to receive the size of the new buffer.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> list of key-value save options
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set

</return>
</function>

<function name="gdk_pixbuf_save_to_bufferv">
<description>
Saves pixbuf to a new buffer in format @type, which is currently &quot;jpeg&quot;,
&quot;tiff&quot;, &quot;png&quot;, &quot;ico&quot; or &quot;bmp&quot;.  See gdk_pixbuf_save_to_buffer() 
for more details.

Since: 2.4

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description>
location to receive a pointer to the new buffer.
</parameter_description>
</parameter>
<parameter name="buffer_size">
<parameter_description> location to receive the size of the new buffer.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="option_keys">
<parameter_description> name of options to set, %NULL-terminated
</parameter_description>
</parameter>
<parameter name="option_values">
<parameter_description> values for named options
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set

</return>
</function>

<function name="gdk_pixbuf_save_to_callback">
<description>
Saves pixbuf in format @type by feeding the produced data to a 
callback. Can be used when you want to store the image to something 
other than a file, such as an in-memory buffer or a socket.  
If @error is set, %FALSE will be returned. Possible errors
include those in the #GDK_PIXBUF_ERROR domain and whatever the save
function generates.

See gdk_pixbuf_save() for more details.

Since: 2.4

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="save_func">
<parameter_description> a function that is called to save each block of data that
the save routine generates.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the save function.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> list of key-value save options
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set

</return>
</function>

<function name="gdk_pixbuf_save_to_callbackv">
<description>
Saves pixbuf to a callback in format @type, which is currently &quot;jpeg&quot;,
&quot;png&quot;, &quot;tiff&quot;, &quot;ico&quot; or &quot;bmp&quot;.  If @error is set, %FALSE will be returned. See
gdk_pixbuf_save_to_callback () for more details.

Since: 2.4

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="save_func">
<parameter_description> a function that is called to save each block of data that
the save routine generates.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the save function.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="option_keys">
<parameter_description> name of options to set, %NULL-terminated
</parameter_description>
</parameter>
<parameter name="option_values">
<parameter_description> values for named options
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set

</return>
</function>

<function name="gdk_pixbuf_save_to_stream">
<description>
Saves @pixbuf to an output stream.

Supported file formats are currently &quot;jpeg&quot;, &quot;tiff&quot;, &quot;png&quot;, &quot;ico&quot; or 
&quot;bmp&quot;. See gdk_pixbuf_save_to_buffer() for more details.

The @cancellable can be used to abort the operation from another 
thread. If the operation was cancelled, the error %G_IO_ERROR_CANCELLED 
will be returned. Other possible errors are in the #GDK_PIXBUF_ERROR 
and %G_IO_ERROR domains. 

The stream is not closed.

Since: 2.14

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> a #GOutputStream to save the pixbuf to
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> list of key-value save options
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pixbuf was saved successfully, %FALSE if an
error was set.

</return>
</function>

<function name="gdk_pixbuf_save_to_stream_async">
<description>
Saves @pixbuf to an output stream asynchronously.

For more details see gdk_pixbuf_save_to_stream(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_save_to_stream_finish() to get the result of the operation.

Since: 2.24

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> a #GOutputStream to which to save the pixbuf
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the pixbuf is saved
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to the callback function
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> list of key-value save options
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_save_to_stream_finish">
<description>
Finishes an asynchronous pixbuf save operation started with
gdk_pixbuf_save_to_stream_async().

Since: 2.24

</description>
<parameters>
<parameter name="async_result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pixbuf was saved successfully, %FALSE if an error was set.

</return>
</function>

<function name="gdk_pixbuf_save_to_streamv">
<description>
Saves @pixbuf to an output stream.

Supported file formats are currently &quot;jpeg&quot;, &quot;tiff&quot;, &quot;png&quot;, &quot;ico&quot; or
&quot;bmp&quot;. See gdk_pixbuf_save_to_stream() for more details.

Since: 2.36

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> a #GOutputStream to save the pixbuf to
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format
</parameter_description>
</parameter>
<parameter name="option_keys">
<parameter_description> name of options to set, %NULL-terminated
</parameter_description>
</parameter>
<parameter name="option_values">
<parameter_description> values for named options
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pixbuf was saved successfully, %FALSE if an
error was set.

</return>
</function>

<function name="gdk_pixbuf_save_to_streamv_async">
<description>
Saves @pixbuf to an output stream asynchronously.

For more details see gdk_pixbuf_save_to_streamv(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_save_to_stream_finish() to get the result of the operation.

Since: 2.36

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> a #GOutputStream to which to save the pixbuf
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format
</parameter_description>
</parameter>
<parameter name="option_keys">
<parameter_description> name of options to set, %NULL-terminated
</parameter_description>
</parameter>
<parameter name="option_values">
<parameter_description> values for named options
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the pixbuf is saved
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to the callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_savev">
<description>
Saves pixbuf to a file in @type, which is currently &quot;jpeg&quot;, &quot;png&quot;, &quot;tiff&quot;, &quot;ico&quot; or &quot;bmp&quot;.
If @error is set, %FALSE will be returned. 
See gdk_pixbuf_save () for more details.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> name of file to save.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="option_keys">
<parameter_description> name of options to set, %NULL-terminated
</parameter_description>
</parameter>
<parameter name="option_values">
<parameter_description> values for named options
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set
</return>
</function>

<function name="gdk_pixbuf_savev_utf8">
<description>
Same as gdk_pixbuf_savev()


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> name of file to save.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="option_keys">
<parameter_description> name of options to set, %NULL-terminated
</parameter_description>
</parameter>
<parameter name="option_values">
<parameter_description> values for named options
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set
</return>
</function>

<function name="gdk_pixbuf_scale">
<description>
Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then renders the rectangle (@dest_x, @dest_y, @dest_width,
@dest_height) of the resulting image onto the destination image
replacing the previous contents.

Try to use gdk_pixbuf_scale_simple() first, this function is
the industrial-strength power tool you can fall back to if
gdk_pixbuf_scale_simple() isn't powerful enough.

If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the scaling which
results in rendering artifacts.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GdkPixbuf into which to render the results
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> the left coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> the top coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of the region to render
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of the region to render
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> the offset in the X direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> the offset in the Y direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> the scale factor in the X direction
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> the scale factor in the Y direction
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_scale_simple">
<description>
Create a new #GdkPixbuf containing a copy of @src scaled to
@dest_width x @dest_height. Leaves @src unaffected.  @interp_type
should be #GDK_INTERP_NEAREST if you want maximum speed (but when
scaling down #GDK_INTERP_NEAREST is usually unusably ugly).  The
default @interp_type should be #GDK_INTERP_BILINEAR which offers
reasonable quality and speed.

You can scale a sub-portion of @src by creating a sub-pixbuf
pointing into @src; see gdk_pixbuf_new_subpixbuf().

If @dest_width and @dest_height are equal to the @src width and height, a
copy of @src is returned, avoiding any scaling.

For more complicated scaling/alpha blending see gdk_pixbuf_scale()
and gdk_pixbuf_composite().


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of destination image
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of destination image
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkPixbuf, or %NULL if not enough memory could be
allocated for it.
</return>
</function>

<function name="gdk_pixbuf_set_option">
<description>
Attaches a key/value pair as an option to a #GdkPixbuf. If @key already
exists in the list of options attached to @pixbuf, the new value is 
ignored and %FALSE is returned.

Since: 2.2

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a nul-terminated string.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a nul-terminated string.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success.

</return>
</function>

<function name="gdk_pixbuf_simple_anim_add_frame">
<description>
Adds a new frame to @animation. The @pixbuf must
have the dimensions specified when the animation 
was constructed.

Since: 2.8

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufSimpleAnim
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the pixbuf to add 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_simple_anim_get_loop">
<description>
Gets whether @animation should loop indefinitely when it reaches the end.

Since: 2.18

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufSimpleAnim
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the animation loops forever, %FALSE otherwise

</return>
</function>

<function name="gdk_pixbuf_simple_anim_new">
<description>
Creates a new, empty animation.

Since: 2.8

</description>
<parameters>
<parameter name="width">
<parameter_description> the width of the animation
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the animation
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> the speed of the animation, in frames per second
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdkPixbufSimpleAnim 

</return>
</function>

<function name="gdk_pixbuf_simple_anim_set_loop">
<description>
Sets whether @animation should loop indefinitely when it reaches the end.

Since: 2.18

</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufSimpleAnim
</parameter_description>
</parameter>
<parameter name="loop">
<parameter_description> whether to loop the animation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_unref">
<description>
Removes a reference from a pixbuf.

Deprecated: 2.0: Use g_object_unref().

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_version">
<description>
Contains the full version of the gdk-pixbuf library as a string.
This is the version currently in use by a running program.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_pixdata_deserialize">
<description>
Deserializes (reconstruct) a #GdkPixdata structure from a byte stream.
The byte stream consists of a straightforward writeout of the
#GdkPixdata fields in network byte order, plus the @pixel_data
bytes the structure points to.
The @pixdata contents are reconstructed byte by byte and are checked
for validity. This function may fail with %GDK_PIXBUF_ERROR_CORRUPT_IMAGE
or %GDK_PIXBUF_ERROR_UNKNOWN_TYPE.

Deprecated: 2.32: Use #GResource instead.

</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata structure to be filled in.
</parameter_description>
</parameter>
<parameter name="stream_length">
<parameter_description> length of the stream used for deserialization.
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> stream of bytes containing a
serialized #GdkPixdata structure.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError location to indicate failures (maybe %NULL to ignore errors).
</parameter_description>
</parameter>
</parameters>
<return> Upon successful deserialization %TRUE is returned,
%FALSE otherwise.

</return>
</function>

<function name="gdk_pixdata_from_pixbuf">
<description>
Converts a #GdkPixbuf to a #GdkPixdata. If @use_rle is %TRUE, the
pixel data is run-length encoded into newly-allocated memory and a 
pointer to that memory is returned. 

Deprecated: 2.32: Use #GResource instead.

</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata to fill.
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the data to fill @pixdata with.
</parameter_description>
</parameter>
<parameter name="use_rle">
<parameter_description> whether to use run-length encoding for the pixel data.
</parameter_description>
</parameter>
</parameters>
<return> If @use_rle is %TRUE, a pointer to the
newly-allocated memory for the run-length encoded pixel data,
otherwise %NULL.

</return>
</function>

<function name="gdk_pixdata_serialize">
<description>
Serializes a #GdkPixdata structure into a byte stream.
The byte stream consists of a straightforward writeout of the
#GdkPixdata fields in network byte order, plus the @pixel_data
bytes the structure points to.

Deprecated: 2.32: Use #GResource instead.

</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a valid #GdkPixdata structure to serialize.
</parameter_description>
</parameter>
<parameter name="stream_length_p">
<parameter_description> location to store the resulting stream length in.
</parameter_description>
</parameter>
</parameters>
<return> A
newly-allocated string containing the serialized #GdkPixdata
structure.

</return>
</function>

<function name="gdk_pixdata_to_csource">
<description>
Generates C source code suitable for compiling images directly 
into programs. 

gdk-pixbuf ships with a program called
[gdk-pixbuf-csource][gdk-pixbuf-csource], which offers a command
line interface to this function.

Deprecated: 2.32: Use #GResource instead.

</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata to convert to C source.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> used for naming generated data structures or macros.
</parameter_description>
</parameter>
<parameter name="dump_type">
<parameter_description> a #GdkPixdataDumpType determining the kind of C
source to be generated.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string containing the C source form
of @pixdata.
</return>
</function>

<function name="gdk_rectangle_contains_point">
<description>
Returns #TRUE if @rect contains the point described by @x and @y.


</description>
<parameters>
<parameter name="rect">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if @rect contains the point
</return>
</function>

<function name="gdk_rectangle_equal">
<description>
Checks if the two given rectangles are equal.


</description>
<parameters>
<parameter name="rect1">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="rect2">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the rectangles are equal.
</return>
</function>

<function name="gdk_rectangle_intersect">
<description>
Calculates the intersection of two rectangles. It is allowed for
@dest to be the same as either @src1 or @src2. If the rectangles 
do not intersect, @dest’s width and height is set to 0 and its x 
and y values are undefined. If you are only interested in whether
the rectangles intersect, but not in the intersecting area itself,
pass %NULL for @dest.


</description>
<parameters>
<parameter name="src1">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="src2">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the
intersection of @src1 and @src2, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the rectangles intersect.
</return>
</function>

<function name="gdk_rectangle_union">
<description>
Calculates the union of two rectangles.
The union of rectangles @src1 and @src2 is the smallest rectangle which
includes both @src1 and @src2 within it.
It is allowed for @dest to be the same as either @src1 or @src2.

Note that this function does not ignore 'empty' rectangles (ie. with
zero width or height).

</description>
<parameters>
<parameter name="src1">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="src2">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the union of @src1 and @src2
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rgba_copy">
<description>
Makes a copy of a #GdkRGBA.

The result must be freed through gdk_rgba_free().


</description>
<parameters>
<parameter name="rgba">
<parameter_description> a #GdkRGBA
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GdkRGBA, with the same contents as @rgba
</return>
</function>

<function name="gdk_rgba_equal">
<description>
Compares two RGBA colors.


</description>
<parameters>
<parameter name="p1">
<parameter_description> a #GdkRGBA pointer
</parameter_description>
</parameter>
<parameter name="p2">
<parameter_description> another #GdkRGBA pointer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two colors compare equal
</return>
</function>

<function name="gdk_rgba_free">
<description>
Frees a #GdkRGBA created with gdk_rgba_copy()

</description>
<parameters>
<parameter name="rgba">
<parameter_description> a #GdkRGBA
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rgba_hash">
<description>
A hash function suitable for using for a hash
table that stores #GdkRGBAs.


</description>
<parameters>
<parameter name="p">
<parameter_description> a #GdkRGBA pointer
</parameter_description>
</parameter>
</parameters>
<return> The hash value for @p
</return>
</function>

<function name="gdk_rgba_is_clear">
<description>
Checks if an @rgba value is transparent. That is, drawing with the value
would not produce any change.


</description>
<parameters>
<parameter name="rgba">
<parameter_description> a #GdkRGBA
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @rgba is clear
</return>
</function>

<function name="gdk_rgba_is_opaque">
<description>
Checks if an @rgba value is opaque. That is, drawing with the value
will not retain any results from previous contents.


</description>
<parameters>
<parameter name="rgba">
<parameter_description> a #GdkRGBA
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @rgba is opaque
</return>
</function>

<function name="gdk_rgba_parse">
<description>
Parses a textual representation of a color, filling in
the @red, @green, @blue and @alpha fields of the @rgba #GdkRGBA.

The string can be either one of:
- A standard name (Taken from the X11 rgb.txt file).
- A hexadecimal value in the form “\#rgb”, “\#rrggbb”,
“\#rrrgggbbb” or ”\#rrrrggggbbbb”
- A RGB color in the form “rgb(r,g,b)” (In this case the color will
have full opacity)
- A RGBA color in the form “rgba(r,g,b,a)”

Where “r”, “g”, “b” and “a” are respectively the red, green, blue and
alpha color values. In the last two cases, r g and b are either integers
in the range 0 to 255 or percentage values in the range 0% to 100%, and
a is a floating point value in the range 0 to 1.


</description>
<parameters>
<parameter name="rgba">
<parameter_description> the #GdkRGBA to fill in
</parameter_description>
</parameter>
<parameter name="spec">
<parameter_description> the string specifying the color
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing succeeded
</return>
</function>

<function name="gdk_rgba_to_string">
<description>
Returns a textual specification of @rgba in the form
`rgb (r, g, b)` or
`rgba (r, g, b, a)`,
where “r”, “g”, “b” and “a” represent the red, green,
blue and alpha values respectively. r, g, and b are
represented as integers in the range 0 to 255, and a
is represented as floating point value in the range 0 to 1.

These string forms are string forms those supported by
the CSS3 colors module, and can be parsed by gdk_rgba_parse().

Note that this string representation may lose some
precision, since r, g and b are represented as 8-bit
integers. If this is a concern, you should use a
different representation.


</description>
<parameters>
<parameter name="rgba">
<parameter_description> a #GdkRGBA
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated text string
</return>
</function>

<function name="gdk_seat_get_capabilities">
<description>
Returns the capabilities this #GdkSeat currently has.


</description>
<parameters>
<parameter name="seat">
<parameter_description> a #GdkSeat
</parameter_description>
</parameter>
</parameters>
<return> the seat capabilities
</return>
</function>

<function name="gdk_seat_get_display">
<description>
Returns the #GdkDisplay this seat belongs to.


</description>
<parameters>
<parameter name="seat">
<parameter_description> a #GdkSeat
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay. This object is owned by GTK+
and must not be freed.
</return>
</function>

<function name="gdk_seat_get_keyboard">
<description>
Returns the master device that routes keyboard events.


</description>
<parameters>
<parameter name="seat">
<parameter_description> a #GdkSeat
</parameter_description>
</parameter>
</parameters>
<return> a master #GdkDevice with keyboard
capabilities. This object is owned by GTK+ and must not be freed.
</return>
</function>

<function name="gdk_seat_get_master_pointers">
<description>
Returns all master pointers with the given capabilities driven by this @seat.
On most backends this function will return a list with a single element (meaning
that all input devices drive the same onscreen cursor).

In other backends where there can possibly be multiple foci (eg. wayland),
this function will return all master #GdkDevices that represent these.


</description>
<parameters>
<parameter name="seat">
<parameter_description> The #GdkSeat
</parameter_description>
</parameter>
<parameter name="capabilities">
<parameter_description> Queried capabilities
</parameter_description>
</parameter>
</parameters>
<return> A list
of master pointing devices
</return>
</function>

<function name="gdk_seat_get_pointer">
<description>
Returns the master device that routes pointer events.


</description>
<parameters>
<parameter name="seat">
<parameter_description> a #GdkSeat
</parameter_description>
</parameter>
</parameters>
<return> a master #GdkDevice with pointer
capabilities. This object is owned by GTK+ and must not be freed.
</return>
</function>

<function name="gdk_seat_get_slaves">
<description>
Returns the slave devices that match the given capabilities.


</description>
<parameters>
<parameter name="seat">
<parameter_description> a #GdkSeat
</parameter_description>
</parameter>
<parameter name="capabilities">
<parameter_description> capabilities to get devices for
</parameter_description>
</parameter>
</parameters>
<return> A list of #GdkDevices.
The list must be freed with g_list_free(), the elements are owned
by GDK and must not be freed.
</return>
</function>

<function name="gdk_seat_grab">
<description>
Grabs the seat so that all events corresponding to the given @capabilities
are passed to this application until the seat is ungrabbed with gdk_seat_ungrab(),
or the surface becomes hidden. This overrides any previous grab on the
seat by this client.

As a rule of thumb, if a grab is desired over %GDK_SEAT_CAPABILITY_POINTER,
all other &quot;pointing&quot; capabilities (eg. %GDK_SEAT_CAPABILITY_TOUCH) should
be grabbed too, so the user is able to interact with all of those while
the grab holds, you should thus use %GDK_SEAT_CAPABILITY_ALL_POINTING most
commonly.

Grabs are used for operations which need complete control over the
events corresponding to the given capabilities. For example in GTK+ this
is used for Drag and Drop operations, popup menus and such.

Note that if the event mask of a #GdkSurface has selected both button press
and button release events, or touch begin and touch end, then a press event
will cause an automatic grab until the button is released, equivalent to a
grab on the surface with @owner_events set to %TRUE. This is done because most
applications expect to receive paired press and release events.

If you set up anything at the time you take the grab that needs to be
cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
events that are emitted when the grab ends unvoluntarily.


</description>
<parameters>
<parameter name="seat">
<parameter_description> a #GdkSeat
</parameter_description>
</parameter>
<parameter name="surface">
<parameter_description> the #GdkSurface which will own the grab
</parameter_description>
</parameter>
<parameter name="capabilities">
<parameter_description> capabilities that will be grabbed
</parameter_description>
</parameter>
<parameter name="owner_events">
<parameter_description> if %FALSE then all device events are reported with respect to
@surface and are only reported if selected by @event_mask. If
%TRUE then pointer events for this application are reported
as normal, but pointer events outside this application are
reported with respect to @surface and only if selected by
@event_mask. In either mode, unreported events are discarded.
</parameter_description>
</parameter>
<parameter name="cursor">
<parameter_description> the cursor to display while the grab is active. If
this is %NULL then the normal cursors are used for
@surface and its descendants, and the cursor for @surface is used
elsewhere.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the event that is triggering the grab, or %NULL if none
is available.
</parameter_description>
</parameter>
<parameter name="prepare_func">
<parameter_description> function to
prepare the surface to be grabbed, it can be %NULL if @surface is
visible before this call.
</parameter_description>
</parameter>
<parameter name="prepare_func_data">
<parameter_description> user data to pass to @prepare_func
</parameter_description>
</parameter>
</parameters>
<return> %GDK_GRAB_SUCCESS if the grab was successful.
</return>
</function>

<function name="gdk_seat_ungrab">
<description>
Releases a grab added through gdk_seat_grab().

</description>
<parameters>
<parameter name="seat">
<parameter_description> a #GdkSeat
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_set_allowed_backends">
<description>
Sets a list of backends that GDK should try to use.

This can be be useful if your application does not
work with certain GDK backends.

By default, GDK tries all included backends.

For example,
|[&lt;!-- language=&quot;C&quot; --&gt;
gdk_set_allowed_backends (&quot;wayland,quartz,*&quot;);
]|
instructs GDK to try the Wayland backend first,
followed by the Quartz backend, and then all
others.

If the `GDK_BACKEND` environment variable
is set, it determines what backends are tried in what
order, while still respecting the set of allowed backends
that are specified by this function.

The possible backend names are x11, win32, quartz,
broadway, wayland. You can also include a * in the
list to try all remaining backends.

This call must happen prior to gdk_display_open(),
gtk_init(), or gtk_init_check()
in order to take effect.

</description>
<parameters>
<parameter name="backends">
<parameter_description> a comma-separated list of backends
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_set_show_events">
<description>
Sets whether a trace of received events is output.
Note that GTK+ must be compiled with debugging (that is,
configured using the `--enable-debug` option)
to use this option.

</description>
<parameters>
<parameter name="show_events">
<parameter_description>  %TRUE to output event debugging information.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_beep">
<description>
Emits a short beep associated to @surface in the appropriate
display, if supported. Otherwise, emits a short beep on
the display just as gdk_display_beep().

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_begin_draw_frame">
<description>
Indicates that you are beginning the process of redrawing @region
on @surface, and provides you with a #GdkDrawingContext.

If @surface is a top level #GdkSurface, backed by a native surface
implementation, a backing store (offscreen buffer) large enough to
contain @region will be created. The backing store will be initialized
with the background color or background surface for @surface. Then, all
drawing operations performed on @surface will be diverted to the
backing store. When you call gdk_surface_end_frame(), the contents of
the backing store will be copied to @surface, making it visible
on screen. Only the part of @surface contained in @region will be
modified; that is, drawing operations are clipped to @region.

The net result of all this is to remove flicker, because the user
sees the finished product appear all at once when you call
gdk_surface_end_draw_frame(). If you draw to @surface directly without
calling gdk_surface_begin_draw_frame(), the user may see flicker
as individual drawing operations are performed in sequence.

When using GTK+, the widget system automatically places calls to
gdk_surface_begin_draw_frame() and gdk_surface_end_draw_frame() around
emissions of the `GtkWidget::draw` signal. That is, if you’re
drawing the contents of the widget yourself, you can assume that the
widget has a cleared background, is already set as the clip region,
and already has a backing store. Therefore in most cases, application
code in GTK does not need to call gdk_surface_begin_draw_frame()
explicitly.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> the context used to draw the frame
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a Cairo region
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDrawingContext context that should be
used to draw the contents of the surface; the returned context is owned
by GDK.
</return>
</function>

<function name="gdk_surface_begin_move_drag">
<description>
Begins a surface move operation (for a toplevel surface).

This function assumes that the drag is controlled by the
client pointer device, use gdk_surface_begin_move_drag_for_device()
to begin a drag with a different device.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag, or 0 for a keyboard-initiated drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_begin_move_drag_for_device">
<description>
Begins a surface move operation (for a toplevel surface).
You might use this function to implement a “window move grip,” for
example. The function works best with window managers that support the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
but has a fallback implementation for other window managers.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the device used for the operation
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag, or 0 for a keyboard-initiated drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_begin_resize_drag">
<description>
Begins a surface resize operation (for a toplevel surface).

This function assumes that the drag is controlled by the
client pointer device, use gdk_surface_begin_resize_drag_for_device()
to begin a drag with a different device.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> the edge or corner from which the drag is started
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag, or 0 for a keyboard-initiated drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag (use gdk_event_get_time())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_begin_resize_drag_for_device">
<description>
Begins a surface resize operation (for a toplevel surface).
You might use this function to implement a “window resize grip,” for
example; in fact #GtkStatusbar uses it. The function works best
with window managers that support the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
but has a fallback implementation for other window managers.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> the edge or corner from which the drag is started
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the device used for the operation
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag, or 0 for a keyboard-initiated drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag (use gdk_event_get_time())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_constrain_size">
<description>
Constrains a desired width and height according to a
set of geometry hints (such as minimum and maximum size).

</description>
<parameters>
<parameter name="geometry">
<parameter_description> a #GdkGeometry structure
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a mask indicating what portions of @geometry are set
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> desired width of surface
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> desired height of the surface
</parameter_description>
</parameter>
<parameter name="new_width">
<parameter_description> location to store resulting width
</parameter_description>
</parameter>
<parameter name="new_height">
<parameter_description> location to store resulting height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_coords_from_parent">
<description>
Transforms surface coordinates from a parent surface to a child
surface.

Calling this function is equivalent to subtracting the return
values of gdk_surface_get_position() from the parent coordinates.

See also: gdk_surface_coords_to_parent()

</description>
<parameters>
<parameter name="surface">
<parameter_description> a child surface
</parameter_description>
</parameter>
<parameter name="parent_x">
<parameter_description> X coordinate in parent’s coordinate system
</parameter_description>
</parameter>
<parameter name="parent_y">
<parameter_description> Y coordinate in parent’s coordinate system
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate in child’s coordinate system
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate in child’s coordinate system
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_coords_to_parent">
<description>
Transforms surface coordinates from a child surface to its parent
surface. Calling this function is equivalent to adding the return
values of gdk_surface_get_position() to the child coordinates.

See also: gdk_surface_coords_from_parent()

</description>
<parameters>
<parameter name="surface">
<parameter_description> a child surface
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate in child’s coordinate system
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate in child’s coordinate system
</parameter_description>
</parameter>
<parameter name="parent_x">
<parameter_description> return location for X coordinate
in parent’s coordinate system, or %NULL
</parameter_description>
</parameter>
<parameter name="parent_y">
<parameter_description> return location for Y coordinate
in parent’s coordinate system, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_create_gl_context">
<description>
Creates a new #GdkGLContext matching the
framebuffer format to the visual of the #GdkSurface. The context
is disconnected from any particular surface or surface.

If the creation of the #GdkGLContext failed, @error will be set.

Before using the returned #GdkGLContext, you will need to
call gdk_gl_context_make_current() or gdk_gl_context_realize().


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GdkGLContext, or
%NULL on error
</return>
</function>

<function name="gdk_surface_create_similar_image_surface">
<description>
Create a new image surface that is efficient to draw on the
given @surface.

Initially the surface contents are all 0 (transparent if contents
have transparency, black otherwise.)

The @width and @height of the new surface are not affected by
the scaling factor of the @surface, or by the @scale argument; they
are the size of the surface in device pixels. If you wish to create
an image surface capable of holding the contents of @surface you can
use:

|[&lt;!-- language=&quot;C&quot; --&gt;
int scale = gdk_surface_get_scale_factor (surface);
int width = gdk_surface_get_width (surface) * scale;
int height = gdk_surface_get_height (surface) * scale;

// format is set elsewhere
cairo_surface_t *surface =
gdk_surface_create_similar_image_surface (surface,
format,
width, height,
scale);
]|

Note that unlike cairo_surface_create_similar_image(), the new
surface's device scale is set to @scale, or to the scale factor of
@surface if @scale is 0.


</description>
<parameters>
<parameter name="surface">
<parameter_description> surface to make new surface similar to, or
%NULL if none
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format for the new surface
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the new surface
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the new surface
</parameter_description>
</parameter>
<parameter name="scale">
<parameter_description> the scale of the new surface, or 0 to use same as @surface
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly allocated surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a “nil” surface if @other is already in an error state
or any other error occurs.
</return>
</function>

<function name="gdk_surface_create_similar_surface">
<description>
Create a new surface that is as compatible as possible with the
given @surface. For example the new surface will have the same
fallback resolution and font options as @surface. Generally, the new
surface will also use the same backend as @surface, unless that is
not possible for some reason. The type of the returned surface may
be examined with cairo_surface_get_type().

Initially the surface contents are all 0 (transparent if contents
have transparency, black otherwise.)


</description>
<parameters>
<parameter name="surface">
<parameter_description> surface to make new surface similar to
</parameter_description>
</parameter>
<parameter name="content">
<parameter_description> the content for the new surface
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the new surface
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the new surface
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly allocated surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a “nil” surface if @other is already in an error state
or any other error occurs.
</return>
</function>

<function name="gdk_surface_create_vulkan_context">
<description>
Creates a new #GdkVulkanContext for rendering on @surface.

If the creation of the #GdkVulkanContext failed, @error will be set.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GdkVulkanContext, or
%NULL on error
</return>
</function>

<function name="gdk_surface_deiconify">
<description>
Attempt to deiconify (unminimize) @surface. On X11 the window manager may
choose to ignore the request to deiconify. When using GTK+,
use gtk_window_deiconify() instead of the #GdkSurface variant. Or better yet,
you probably want to use gtk_window_present(), which raises the surface, focuses it,
unminimizes it, and puts it on the current desktop.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_destroy">
<description>
Destroys the window system resources associated with @surface and decrements @surface's
reference count. The window system resources for all children of @surface are also
destroyed, but the children’s reference counts are not decremented.

Note that a surface will not be destroyed automatically when its reference count
reaches zero. You must call this function yourself before that happens.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_end_draw_frame">
<description>
Indicates that the drawing of the contents of @surface started with
gdk_surface_begin_frame() has been completed.

This function will take care of destroying the #GdkDrawingContext.

It is an error to call this function without a matching
gdk_surface_begin_frame() first.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> the #GdkDrawingContext created by gdk_surface_begin_draw_frame()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_focus">
<description>
Sets keyboard focus to @surface. In most cases, gtk_window_present()
should be used on a #GtkWindow, rather than calling this function.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of the event triggering the surface focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_freeze_updates">
<description>
Temporarily freezes a surface such that it won’t receive expose
events.  The surface will begin receiving expose events again when
gdk_surface_thaw_updates() is called. If gdk_surface_freeze_updates()
has been called more than once, gdk_surface_thaw_updates() must be called
an equal number of times to begin processing exposes.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_fullscreen">
<description>
Moves the surface into fullscreen mode. This means the
surface covers the entire screen and is above any panels
or task bars.

If the surface was already fullscreen, then this function does nothing.

On X11, asks the window manager to put @surface in a fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don’t have a concept of “fullscreen”; so you can’t rely on the
fullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_fullscreen_on_monitor">
<description>
Moves the surface into fullscreen mode on the given monitor. This means
the surface covers the entire screen and is above any panels or task bars.

If the surface was already fullscreen, then this function does nothing.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="monitor">
<parameter_description> Which monitor to display fullscreen on.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_get_accept_focus">
<description>
Determines whether or not the desktop environment shuld be hinted that
the surface does not want to receive input focus.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface.
</parameter_description>
</parameter>
</parameters>
<return> whether or not the surface should receive input focus.
</return>
</function>

<function name="gdk_surface_get_children">
<description>
Gets the list of children of @surface known to GDK.
This function only returns children created via GDK,
so for example it’s useless when used with the root window;
it only returns surfaces an application created itself.

The returned list must be freed, but the elements in the
list need not be.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return>
list of child surfaces inside @surface
</return>
</function>

<function name="gdk_surface_get_children_with_user_data">
<description>
Gets the list of children of @surface known to GDK with a
particular @user_data set on it.

The returned list must be freed, but the elements in the
list need not be.

The list is returned in (relative) stacking order, i.e. the
lowest surface is first.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to look for
</parameter_description>
</parameter>
</parameters>
<return>
list of child surfaces inside @surface
</return>
</function>

<function name="gdk_surface_get_cursor">
<description>
Retrieves a #GdkCursor pointer for the cursor currently set on the
specified #GdkSurface, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified surface, and it is
using the cursor for its parent surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> a #GdkCursor, or %NULL. The
returned object is owned by the #GdkSurface and should not be
unreferenced directly. Use gdk_surface_set_cursor() to unset the
cursor of the surface
</return>
</function>

<function name="gdk_surface_get_decorations">
<description>
Returns the decorations set on the GdkSurface with
gdk_surface_set_decorations().


</description>
<parameters>
<parameter name="surface">
<parameter_description> The toplevel #GdkSurface to get the decorations from
</parameter_description>
</parameter>
<parameter name="decorations">
<parameter_description> The surface decorations will be written here
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the surface has decorations set, %FALSE otherwise.
</return>
</function>

<function name="gdk_surface_get_device_cursor">
<description>
Retrieves a #GdkCursor pointer for the @device currently set on the
specified #GdkSurface, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified surface, and it is
using the cursor for its parent surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface.
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a master, pointer #GdkDevice.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkCursor, or %NULL. The
returned object is owned by the #GdkSurface and should not be
unreferenced directly. Use gdk_surface_set_cursor() to unset the
cursor of the surface
</return>
</function>

<function name="gdk_surface_get_device_events">
<description>
Returns the event mask for @surface corresponding to an specific device.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface.
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
</parameters>
<return> device event mask for @surface
</return>
</function>

<function name="gdk_surface_get_device_position">
<description>
Obtains the current device position and modifier state.
The position is given in coordinates relative to the upper left
corner of @surface.

Use gdk_surface_get_device_position_double() if you need subpixel precision.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface.
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> pointer #GdkDevice to query to.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate of @device, or %NULL.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate of @device, or %NULL.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> return location for the modifier mask, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> The surface underneath @device
(as with gdk_device_get_surface_at_position()), or %NULL if the
surface is not known to GDK.
</return>
</function>

<function name="gdk_surface_get_device_position_double">
<description>
Obtains the current device position in doubles and modifier state.
The position is given in coordinates relative to the upper left
corner of @surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface.
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> pointer #GdkDevice to query to.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate of @device, or %NULL.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate of @device, or %NULL.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> return location for the modifier mask, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> The surface underneath @device
(as with gdk_device_get_surface_at_position()), or %NULL if the
surface is not known to GDK.
</return>
</function>

<function name="gdk_surface_get_display">
<description>
Gets the #GdkDisplay associated with a #GdkSurface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay associated with @surface
</return>
</function>

<function name="gdk_surface_get_events">
<description>
Gets the event mask for @surface for all master input devices. See
gdk_surface_set_events().


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> event mask for @surface
</return>
</function>

<function name="gdk_surface_get_focus_on_map">
<description>
Determines whether or not the desktop environment should be hinted that the
surface does not want to receive input focus when it is mapped.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface.
</parameter_description>
</parameter>
</parameters>
<return> whether or not the surface wants to receive input focus when
it is mapped.
</return>
</function>

<function name="gdk_surface_get_frame_clock">
<description>
Gets the frame clock for the surface. The frame clock for a surface
never changes unless the surface is reparented to a new toplevel
surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> surface to get frame clock for
</parameter_description>
</parameter>
</parameters>
<return> the frame clock
</return>
</function>

<function name="gdk_surface_get_frame_extents">
<description>
Obtains the bounding box of the surface, including window manager
titlebar/borders if any. The frame position is given in root window
coordinates. To get the position of the surface itself (rather than
the frame) in root window coordinates, use gdk_surface_get_origin().


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to fill with bounding box of the surface frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_get_fullscreen_mode">
<description>
Obtains the #GdkFullscreenMode of the @surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> The #GdkFullscreenMode applied to the surface when fullscreen.
</return>
</function>

<function name="gdk_surface_get_geometry">
<description>
Any of the return location arguments to this function may be %NULL,
if you aren’t interested in getting the value of that field.

The X and Y coordinates returned are relative to the parent surface
of @surface, which for toplevels usually means relative to the
surface decorations (titlebar, etc.) rather than relative to the
root window (screen-size background window).

On the X11 platform, the geometry is obtained from the X server,
so reflects the latest position of @surface; this may be out-of-sync
with the position of @surface delivered in the most-recently-processed
#GdkEventConfigure. gdk_surface_get_position() in contrast gets the
position from the most recent configure event.

Note: If @surface is not a toplevel, it is much better
to call gdk_surface_get_position(), gdk_surface_get_width() and
gdk_surface_get_height() instead, because it avoids the roundtrip to
the X server and because these functions support the full 32-bit
coordinate space, whereas gdk_surface_get_geometry() is restricted to
the 16-bit coordinates of X11.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate of surface (relative to its parent)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate of surface (relative to its parent)
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for width of surface
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for height of surface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_get_group">
<description>
Returns the group leader surface for @surface. See gdk_surface_set_group().


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> the group leader surface for @surface
</return>
</function>

<function name="gdk_surface_get_height">
<description>
Returns the height of the given @surface.

On the X11 platform the returned size is the size reported in the
most-recently-processed configure event, rather than the current
size on the X server.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> The height of @surface
</return>
</function>

<function name="gdk_surface_get_modal_hint">
<description>
Determines whether or not the surface manager is hinted that @surface
has modal behaviour.


</description>
<parameters>
<parameter name="surface">
<parameter_description> A toplevel #GdkSurface.
</parameter_description>
</parameter>
</parameters>
<return> whether or not the surface has the modal hint set.
</return>
</function>

<function name="gdk_surface_get_origin">
<description>
Obtains the position of a surface in root window coordinates.
(Compare with gdk_surface_get_position() and
gdk_surface_get_geometry() which return the position of a surface
relative to its parent surface.)


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate
</parameter_description>
</parameter>
</parameters>
<return> not meaningful, ignore
</return>
</function>

<function name="gdk_surface_get_parent">
<description>
Obtains the parent of @surface, as known to GDK. Does not query the
X server; thus this returns the parent as passed to gdk_surface_new(),
not the actual parent. This should never matter unless you’re using
Xlib calls mixed with GDK calls on the X11 platform. It may also
matter for toplevel windows, because the window manager may choose
to reparent them.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> parent of @surface
</return>
</function>

<function name="gdk_surface_get_pass_through">
<description>
Returns whether input to the surface is passed through to the surface
below.

See gdk_surface_set_pass_through() for details

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_get_position">
<description>
Obtains the position of the surface as reported in the
most-recently-processed #GdkEventConfigure. Contrast with
gdk_surface_get_geometry() which queries the X server for the
current surface position, regardless of which events have been
received or processed.

The position coordinates are relative to the surface’s parent surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of surface
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of surface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_get_root_coords">
<description>
Obtains the position of a surface position in root
window coordinates. This is similar to
gdk_surface_get_origin() but allows you to pass
in any position in the surface, not just the origin.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate in surface
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate in surface
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> return location for X coordinate
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> return location for Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_get_root_origin">
<description>
Obtains the top-left corner of the surface manager frame in root
surface coordinates.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X position of surface frame
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y position of surface frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_get_scale_factor">
<description>
Returns the internal scale factor that maps from surface coordiantes
to the actual device pixels. On traditional systems this is 1, but
on very high density outputs this can be a higher value (often 2).

A higher value means that drawing is automatically scaled up to
a higher resolution, so any code doing drawing will automatically look
nicer. However, if you are supplying pixel-based data the scale
value can be used to determine whether to use a pixel resource
with higher resolution data.

The scale of a surface may change during runtime, if this happens
a configure event will be sent to the toplevel surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> surface to get scale factor for
</parameter_description>
</parameter>
</parameters>
<return> the scale factor
</return>
</function>

<function name="gdk_surface_get_state">
<description>
Gets the bitwise OR of the currently active surface state flags,
from the #GdkSurfaceState enumeration.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> surface state bitfield
</return>
</function>

<function name="gdk_surface_get_support_multidevice">
<description>
Returns %TRUE if the surface is aware of the existence of multiple
devices.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the surface handles multidevice features.
</return>
</function>

<function name="gdk_surface_get_surface_type">
<description>
Gets the type of the surface. See #GdkSurfaceType.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> type of surface
</return>
</function>

<function name="gdk_surface_get_toplevel">
<description>
Gets the toplevel surface that’s an ancestor of @surface.

Any surface type but %GDK_SURFACE_CHILD is considered a
toplevel surface, as is a %GDK_SURFACE_CHILD surface that
has a root surface as parent.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> the toplevel surface containing @surface
</return>
</function>

<function name="gdk_surface_get_type_hint">
<description>
This function returns the type hint set for a surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> A toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> The type hint set for @surface
</return>
</function>

<function name="gdk_surface_get_user_data">
<description>
Retrieves the user data for @surface, which is normally the widget
that @surface belongs to. See gdk_surface_set_user_data().


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> return location for user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_get_width">
<description>
Returns the width of the given @surface.

On the X11 platform the returned size is the size reported in the
most-recently-processed configure event, rather than the current
size on the X server.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> The width of @surface
</return>
</function>

<function name="gdk_surface_has_native">
<description>
Checks whether the surface has a native surface or not.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @surface has a native surface, %FALSE otherwise.
</return>
</function>

<function name="gdk_surface_hide">
<description>
For toplevel surfaces, withdraws them, so they will no longer be
known to the window manager; for all surfaces, unmaps them, so
they won’t be displayed. Normally done automatically as
part of gtk_widget_hide().

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_iconify">
<description>
Asks to iconify (minimize) @surface. The window manager may choose
to ignore the request, but normally will honor it. Using
gtk_window_iconify() is preferred, if you have a #GtkWindow widget.

This function only makes sense when @surface is a toplevel surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_input_shape_combine_region">
<description>
Like gdk_surface_shape_combine_region(), but the shape applies
only to event handling. Mouse events which happen while
the pointer position corresponds to an unset bit in the
mask will be passed on the surface below @surface.

An input shape is typically used with RGBA surfaces.
The alpha channel of the surface defines which pixels are
invisible and allows for nicely antialiased borders,
and the input shape controls where the surface is
“clickable”.

On the X11 platform, this requires version 1.1 of the
shape extension.

On the Win32 platform, this functionality is not present and the
function does nothing.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="shape_region">
<parameter_description> region of surface to be non-transparent
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> X position of @shape_region in @surface coordinates
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> Y position of @shape_region in @surface coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_invalidate_rect">
<description>
A convenience wrapper around gdk_surface_invalidate_region() which
invalidates a rectangular region. See
gdk_surface_invalidate_region() for details.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to invalidate or %NULL to invalidate the whole
surface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_invalidate_region">
<description>
Adds @region to the update area for @surface. The update area is the
region that needs to be redrawn, or “dirty region.”

GDK will process all updates whenever the frame clock schedules a redraw,
so there’s no need to do forces redraws manually, you just need to
invalidate regions that you know should be redrawn.

The @invalidate_children parameter controls whether the region of
each child surface that intersects @region will also be invalidated.
If %FALSE, then the update area for child surfaces will remain
unaffected.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #cairo_region_t
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_is_destroyed">
<description>
Check to see if a surface is destroyed..


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the surface is destroyed
</return>
</function>

<function name="gdk_surface_is_input_only">
<description>
Determines whether or not the surface is an input only surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @surface is input only
</return>
</function>

<function name="gdk_surface_is_viewable">
<description>
Check if the surface and all ancestors of the surface are
mapped. (This is not necessarily &quot;viewable&quot; in the X sense, since
we only check as far as we have GDK surface parents, not to the root
surface.)


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the surface is viewable
</return>
</function>

<function name="gdk_surface_is_visible">
<description>
Checks whether the surface has been mapped (with gdk_surface_show() or
gdk_surface_show_unraised()).


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the surface is mapped
</return>
</function>

<function name="gdk_surface_lower">
<description>
Lowers @surface to the bottom of the Z-order (stacking order), so that
other surfaces with the same parent surface appear above @surface.
This is true whether or not the other surfaces are visible.

If @surface is a toplevel, the window manager may choose to deny the
request to move the surface in the Z-order, gdk_surface_lower() only
requests the restack, does not guarantee it.

Note that gdk_surface_show() raises the surface again, so don’t call this
function before gdk_surface_show(). (Try gdk_surface_show_unraised().)

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_maximize">
<description>
Maximizes the surface. If the surface was already maximized, then
this function does nothing.

On X11, asks the window manager to maximize @surface, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don’t have a concept of
“maximized”; so you can’t rely on the maximization actually
happening. But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

On Windows, reliably maximizes the surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_merge_child_input_shapes">
<description>
Merges the input shape masks for any child surfaces into the
input shape mask for @surface. i.e. the union of all input masks
for @surface and its children will become the new input mask
for @surface. See gdk_surface_input_shape_combine_region().

This function is distinct from gdk_surface_set_child_input_shapes()
because it includes @surface’s input shape mask in the set of
shapes to be merged.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_move">
<description>
Repositions a surface relative to its parent surface.
For toplevel surfaces, window managers may ignore or modify the move;
you should probably use gtk_window_move() on a #GtkWindow widget
anyway, instead of using GDK functions. For child surfaces,
the move will reliably succeed.

If you’re also planning to resize the surface, use gdk_surface_move_resize()
to both move and resize simultaneously, for a nicer visual effect.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate relative to surface’s parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate relative to surface’s parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_move_resize">
<description>
Equivalent to calling gdk_surface_move() and gdk_surface_resize(),
except that both operations are performed at once, avoiding strange
visual effects. (i.e. the user may be able to see the surface first
move, then resize, if you don’t use gdk_surface_move_resize().)

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> new X position relative to surface’s parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> new Y position relative to surface’s parent
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> new width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> new height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_move_to_rect">
<description>
Moves @surface to @rect, aligning their anchor points.

@rect is relative to the top-left corner of the surface that @surface is
transient for. @rect_anchor and @surface_anchor determine anchor points on
@rect and @surface to pin together. @rect's anchor point can optionally be
offset by @rect_anchor_dx and @rect_anchor_dy, which is equivalent to
offsetting the position of @surface.

@anchor_hints determines how @surface will be moved if the anchor points cause
it to move off-screen. For example, %GDK_ANCHOR_FLIP_X will replace
%GDK_GRAVITY_NORTH_WEST with %GDK_GRAVITY_NORTH_EAST and vice versa if
@surface extends beyond the left or right edges of the monitor.

Connect to the #GdkSurface::moved-to-rect signal to find out how it was
actually positioned.

Stability: Private

</description>
<parameters>
<parameter name="surface">
<parameter_description> the #GdkSurface to move
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> the destination #GdkRectangle to align @surface with
</parameter_description>
</parameter>
<parameter name="rect_anchor">
<parameter_description> the point on @rect to align with @surface's anchor point
</parameter_description>
</parameter>
<parameter name="surface_anchor">
<parameter_description> the point on @surface to align with @rect's anchor point
</parameter_description>
</parameter>
<parameter name="anchor_hints">
<parameter_description> positioning hints to use when limited on space
</parameter_description>
</parameter>
<parameter name="rect_anchor_dx">
<parameter_description> horizontal offset to shift @surface, i.e. @rect's anchor
point
</parameter_description>
</parameter>
<parameter name="rect_anchor_dy">
<parameter_description> vertical offset to shift @surface, i.e. @rect's anchor point
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_new_child">
<description>
Creates a new client-side child surface.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the parent surface
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> placement of the surface inside @parent
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkSurface
</return>
</function>

<function name="gdk_surface_new_popup">
<description>
Creates a new toplevel popup surface. The surface will bypass surface
management.


</description>
<parameters>
<parameter name="display">
<parameter_description> the display to create the surface on
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position of the surface on screen
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkSurface
</return>
</function>

<function name="gdk_surface_new_temp">
<description>
Creates a new toplevel temporary surface. The surface will be
situated off-screen and not handle output.

You most likely do not want to use this function.


</description>
<parameters>
<parameter name="display">
<parameter_description> the display to create the surface on
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkSurface
</return>
</function>

<function name="gdk_surface_new_toplevel">
<description>
Creates a new toplevel surface. The surface will be managed by the surface
manager.


</description>
<parameters>
<parameter name="display">
<parameter_description> the display to create the surface on
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of new surface
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of new surface
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkSurface
</return>
</function>

<function name="gdk_surface_peek_children">
<description>
Like gdk_surface_get_children(), but does not copy the list of
children, so the list does not need to be freed.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return>
a reference to the list of child surfaces in @surface
</return>
</function>

<function name="gdk_surface_raise">
<description>
Raises @surface to the top of the Z-order (stacking order), so that
other surfaces with the same parent surface appear below @surface.
This is true whether or not the surfaces are visible.

If @surface is a toplevel, the surface manager may choose to deny the
request to move the surface in the Z-order, gdk_surface_raise() only
requests the restack, does not guarantee it.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_register_dnd">
<description>
Registers a surface as a potential drop destination.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_resize">
<description>
Resizes @surface; for toplevel surfaces, asks the window manager to resize
the surface. The window manager may not allow the resize. When using GTK+,
use gtk_window_resize() instead of this low-level GDK function.

Surfaces may not be resized below 1x1.

If you’re also planning to move the surface, use gdk_surface_move_resize()
to both move and resize simultaneously, for a nicer visual effect.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> new width of the surface
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> new height of the surface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_restack">
<description>
Changes the position of  @surface in the Z-order (stacking order), so that
it is above @sibling (if @above is %TRUE) or below @sibling (if @above is
%FALSE).

If @sibling is %NULL, then this either raises (if @above is %TRUE) or
lowers the surface.

If @surface is a toplevel, the window manager may choose to deny the
request to move the surface in the Z-order, gdk_surface_restack() only
requests the restack, does not guarantee it.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #GdkSurface that is a sibling of @surface, or %NULL
</parameter_description>
</parameter>
<parameter name="above">
<parameter_description> a boolean
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_accept_focus">
<description>
Setting @accept_focus to %FALSE hints the desktop environment that the
surface doesn’t want to receive input focus.

On X, it is the responsibility of the window manager to interpret this
hint. ICCCM-compliant window manager usually respect it.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="accept_focus">
<parameter_description> %TRUE if the surface should receive input focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_child_input_shapes">
<description>
Sets the input shape mask of @surface to the union of input shape masks
for all children of @surface, ignoring the input shape mask of @surface
itself. Contrast with gdk_surface_merge_child_input_shapes() which includes
the input shape mask of @surface in the masks to be merged.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_cursor">
<description>
Sets the default mouse pointer for a #GdkSurface.

Note that @cursor must be for the same display as @surface.

Use gdk_cursor_new_for_display() or gdk_cursor_new_from_texture() to
create the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR.
Passing %NULL for the @cursor argument to gdk_surface_set_cursor() means
that @surface will use the cursor of its parent surface. Most surfaces
should use this default.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="cursor">
<parameter_description> a cursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_decorations">
<description>
“Decorations” are the features the window manager adds to a toplevel #GdkSurface.
This function sets the traditional Motif window manager hints that tell the
window manager which decorations you would like your surface to have.
Usually you should use gtk_window_set_decorated() on a #GtkWindow instead of
using the GDK function directly.

The @decorations argument is the logical OR of the fields in
the #GdkWMDecoration enumeration. If #GDK_DECOR_ALL is included in the
mask, the other bits indicate which decorations should be turned off.
If #GDK_DECOR_ALL is not included, then the other bits indicate
which decorations should be turned on.

Most window managers honor a decorations hint of 0 to disable all decorations,
but very few honor all possible combinations of bits.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="decorations">
<parameter_description> decoration hint mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_device_cursor">
<description>
Sets a specific #GdkCursor for a given device when it gets inside @surface.
Use gdk_cursor_new_for_display() or gdk_cursor_new_from_texture() to create
the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR. Passing
%NULL for the @cursor argument to gdk_surface_set_cursor() means that
@surface will use the cursor of its parent surface. Most surfaces should
use this default.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a master, pointer #GdkDevice
</parameter_description>
</parameter>
<parameter name="cursor">
<parameter_description> a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_device_events">
<description>
Sets the event mask for a given device (Normally a floating device, not
attached to any visible pointer) to @surface. For example, an event mask
including #GDK_BUTTON_PRESS_MASK means the surface should report button
press events. The event mask is the bitwise OR of values from the
#GdkEventMask enumeration.

See the [input handling overview][event-masks] for details.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> #GdkDevice to enable events for.
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> event mask for @surface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_events">
<description>
The event mask for a surface determines which events will be reported
for that surface from all master input devices. For example, an event mask
including #GDK_BUTTON_PRESS_MASK means the surface should report button
press events. The event mask is the bitwise OR of values from the
#GdkEventMask enumeration.

See the [input handling overview][event-masks] for details.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> event mask for @surface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_focus_on_map">
<description>
Setting @focus_on_map to %FALSE hints the desktop environment that the
surface doesn’t want to receive input focus when it is mapped.
focus_on_map should be turned off for surfaces that aren’t triggered
interactively (such as popups from network activity).

On X, it is the responsibility of the window manager to interpret
this hint. Window managers following the freedesktop.org window
manager extension specification should respect it.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="focus_on_map">
<parameter_description> %TRUE if the surface should receive input focus when mapped
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_fullscreen_mode">
<description>
Specifies whether the @surface should span over all monitors (in a multi-head
setup) or only the current monitor when in fullscreen mode.

The @mode argument is from the #GdkFullscreenMode enumeration.
If #GDK_FULLSCREEN_ON_ALL_MONITORS is specified, the fullscreen @surface will
span over all monitors of the display.

On X11, searches through the list of monitors display the ones
which delimit the 4 edges of the entire display and will ask the window
manager to span the @surface over these monitors.

If the XINERAMA extension is not available or not usable, this function
has no effect.

Not all window managers support this, so you can’t rely on the fullscreen
surface to span over the multiple monitors when #GDK_FULLSCREEN_ON_ALL_MONITORS
is specified.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> fullscreen mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_functions">
<description>
Sets hints about the window management functions to make available
via buttons on the window frame.

On the X backend, this function sets the traditional Motif window
manager hint for this purpose. However, few window managers do
anything reliable or interesting with this hint. Many ignore it
entirely.

The @functions argument is the logical OR of values from the
#GdkWMFunction enumeration. If the bitmask includes #GDK_FUNC_ALL,
then the other bits indicate which functions to disable; if
it doesn’t include #GDK_FUNC_ALL, it indicates which functions to
enable.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="functions">
<parameter_description> bitmask of operations to allow on @surface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_geometry_hints">
<description>
Sets the geometry hints for @surface. Hints flagged in @geom_mask
are set, hints not flagged in @geom_mask are unset.
To unset all hints, use a @geom_mask of 0 and a @geometry of %NULL.

This function provides hints to the surfaceing system about
acceptable sizes for a toplevel surface. The purpose of
this is to constrain user resizing, but the windowing system
will typically  (but is not required to) also constrain the
current size of the surface to the provided values and
constrain programatic resizing via gdk_surface_resize() or
gdk_surface_move_resize().

Note that on X11, this effect has no effect on surfaces
of type %GDK_SURFACE_TEMP since these surfaces are not resizable
by the user.

Since you can’t count on the windowing system doing the
constraints for programmatic resizes, you should generally
call gdk_surface_constrain_size() yourself to determine
appropriate sizes.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> geometry hints
</parameter_description>
</parameter>
<parameter name="geom_mask">
<parameter_description> bitmask indicating fields of @geometry to pay attention to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_group">
<description>
Sets the group leader surface for @surface. By default,
GDK sets the group leader for all toplevel surfaces
to a global surface implicitly created by GDK. With this function
you can override this default.

The group leader surface allows the window manager to distinguish
all surfaces that belong to a single application. It may for example
allow users to minimize/unminimize all surfaces belonging to an
application at once. You should only set a non-default group surface
if your application pretends to be multiple applications.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="leader">
<parameter_description> group leader surface, or %NULL to restore the default group leader surface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_icon_list">
<description>
Sets a list of icons for the surface. One of these will be used
to represent the surface when it has been iconified. The icon is
usually shown in an icon box or some sort of task bar. Which icon
size is shown depends on the window manager. The window manager
can scale the icon  but setting several size icons can give better
image quality since the window manager may only need to scale the
icon by a small amount or not at all.

Note that some platforms don't support surface icons.

</description>
<parameters>
<parameter name="surface">
<parameter_description> The #GdkSurface toplevel surface to set the icon of.
</parameter_description>
</parameter>
<parameter name="surfaces">
<parameter_description>
A list of image surfaces, of different sizes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_icon_name">
<description>
Surfaces may have a name used while minimized, distinct from the
name they display in their titlebar. Most of the time this is a bad
idea from a user interface standpoint. But you can set such a name
with this function, if you like.

After calling this with a non-%NULL @name, calls to gdk_surface_set_title()
will not update the icon title.

Using %NULL for @name unsets the icon title; further calls to
gdk_surface_set_title() will again update the icon title as well.

Note that some platforms don't support surface icons.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of surface while iconified (minimized)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_keep_above">
<description>
Set if @surface must be kept above other surfaces. If the
surface was already above, then this function does nothing.

On X11, asks the window manager to keep @surface above, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don’t have a concept of
“keep above”; so you can’t rely on the surface being kept above.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to keep @surface above other surfaces
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_keep_below">
<description>
Set if @surface must be kept below other surfaces. If the
surface was already below, then this function does nothing.

On X11, asks the window manager to keep @surface below, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don’t have a concept of
“keep below”; so you can’t rely on the surface being kept below.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to keep @surface below other surfaces
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_modal_hint">
<description>
The application can use this hint to tell the window manager
that a certain surface has modal behaviour. The window manager
can use this information to handle modal surfaces in a special
way.

You should only use this on surfaces for which you have
previously called gdk_surface_set_transient_for()

</description>
<parameters>
<parameter name="surface">
<parameter_description> A toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="modal">
<parameter_description> %TRUE if the surface is modal, %FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_opacity">
<description>
Set @surface to render as partially transparent,
with opacity 0 being fully transparent and 1 fully opaque. (Values
of the opacity parameter are clamped to the [0,1] range.) 

For toplevel surfaces this depends on support from the windowing system
that may not always be there. For instance, On X11, this works only on
X screens with a compositing manager running. On Wayland, there is no
per-surface opacity value that the compositor would apply. Instead, use
`gdk_surface_set_opaque_region (surface, NULL)` to tell the compositor
that the entire surface is (potentially) non-opaque, and draw your content
with alpha, or use gtk_widget_set_opacity() to set an overall opacity
for your widgets.

Support for non-toplevel surfaces was added in 3.8.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a top-level or non-native #GdkSurface
</parameter_description>
</parameter>
<parameter name="opacity">
<parameter_description> opacity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_opaque_region">
<description>
For optimisation purposes, compositing window managers may
like to not draw obscured regions of surfaces, or turn off blending
during for these regions. With RGB windows with no transparency,
this is just the shape of the window, but with ARGB32 windows, the
compositor does not know what regions of the window are transparent
or not.

This function only works for toplevel surfaces.

GTK+ will update this property automatically if
the @surface background is opaque, as we know where the opaque regions
are. If your surface background is not opaque, please update this
property in your #GtkWidget::style-updated handler.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a top-level or non-native #GdkSurface
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description>  a region, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_pass_through">
<description>
Sets whether input to the surface is passed through to the surface
below.

The default value of this is %FALSE, which means that pointer
events that happen inside the surface are send first to the surface,
but if the event is not selected by the event mask then the event
is sent to the parent surface, and so on up the hierarchy.

If @pass_through is %TRUE then such pointer events happen as if the
surface wasn't there at all, and thus will be sent first to any
surfaces below @surface. This is useful if the surface is used in a
transparent fashion. In the terminology of the web this would be called
&quot;pointer-events: none&quot;.

Note that a surface with @pass_through %TRUE can still have a subsurface
without pass through, so you can get events on a subset of a surface. And in
that cases you would get the in-between related events such as the pointer
enter/leave events on its way to the destination surface.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="pass_through">
<parameter_description> a boolean
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_role">
<description>
When using GTK+, typically you should use gtk_window_set_role() instead
of this low-level function.

The window manager and session manager use a surface’s role to
distinguish it from other kinds of surface in the same application.
When an application is restarted after being saved in a previous
session, all surfaces with the same title and role are treated as
interchangeable.  So if you have two surfaces with the same title
that should be distinguished for session management purposes, you
should set the role on those surfaces. It doesn’t matter what string
you use for the role, as long as you have a different role for each
non-interchangeable kind of surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="role">
<parameter_description> a string indicating its role
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_shadow_width">
<description>
Newer GTK+ windows using client-side decorations use extra geometry
around their frames for effects like shadows and invisible borders.
Window managers that want to maximize windows or snap to edges need
to know where the extents of the actual frame lie, so that users
don’t feel like windows are snapping against random invisible edges.

Note that this property is automatically updated by GTK+, so this
function should only be used by applications which do not use GTK+
to create toplevel surfaces.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="left">
<parameter_description> The left extent
</parameter_description>
</parameter>
<parameter name="right">
<parameter_description> The right extent
</parameter_description>
</parameter>
<parameter name="top">
<parameter_description> The top extent
</parameter_description>
</parameter>
<parameter name="bottom">
<parameter_description> The bottom extent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_skip_pager_hint">
<description>
Toggles whether a surface should appear in a pager (workspace
switcher, or other desktop utility program that displays a small
thumbnail representation of the surfaces on the desktop). If a
surface’s semantic type as specified with gdk_surface_set_type_hint()
already fully describes the surface, this function should
not be called in addition, instead you should
allow the surface to be treated according to standard policy for
its semantic type.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="skips_pager">
<parameter_description> %TRUE to skip the pager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_skip_taskbar_hint">
<description>
Toggles whether a surface should appear in a task list or surface
list. If a surface’s semantic type as specified with
gdk_surface_set_type_hint() already fully describes the surface, this
function should not be called in addition,
instead you should allow the surface to be treated according to
standard policy for its semantic type.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="skips_taskbar">
<parameter_description> %TRUE to skip the taskbar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_startup_id">
<description>
When using GTK+, typically you should use gtk_window_set_startup_id()
instead of this low-level function.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="startup_id">
<parameter_description> a string with startup-notification identifier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_support_multidevice">
<description>
This function will enable multidevice features in @surface.

Multidevice aware surfaces will need to handle properly multiple,
per device enter/leave events, device grabs and grab ownerships.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface.
</parameter_description>
</parameter>
<parameter name="support_multidevice">
<parameter_description> %TRUE to enable multidevice support in @surface.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_title">
<description>
Sets the title of a toplevel surface, to be displayed in the titlebar.
If you haven’t explicitly set the icon name for the surface
(using gdk_surface_set_icon_name()), the icon name will be set to
@title as well. @title must be in UTF-8 encoding (as with all
user-readable strings in GDK/GTK+). @title may not be %NULL.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> title of @surface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_transient_for">
<description>
Indicates to the window manager that @surface is a transient dialog
associated with the application surface @parent. This allows the
window manager to do things like center @surface on @parent and
keep @surface above @parent.

See gtk_window_set_transient_for() if you’re using #GtkWindow or
#GtkDialog.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> another toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_type_hint">
<description>
The application can use this call to provide a hint to the surface
manager about the functionality of a surface. The window manager
can use this information when determining the decoration and behaviour
of the surface.

The hint must be set before the surface is mapped.

</description>
<parameters>
<parameter name="surface">
<parameter_description> A toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="hint">
<parameter_description> A hint of the function this surface will have
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_urgency_hint">
<description>
Toggles whether a surface needs the user's
urgent attention.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
<parameter name="urgent">
<parameter_description> %TRUE if the surface is urgent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_set_user_data">
<description>
For most purposes this function is deprecated in favor of
g_object_set_data(). However, for historical reasons GTK+ stores
the #GtkWidget that owns a #GdkSurface as user data on the
#GdkSurface. So, custom widget implementations should use
this function for that. If GTK+ receives an event for a #GdkSurface,
and the user data for the surface is non-%NULL, GTK+ will assume the
user data is a #GtkWidget, and forward the event to that widget.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_show">
<description>
Like gdk_surface_show_unraised(), but also raises the surface to the
top of the surface stack (moves the surface to the front of the
Z-order).

This function maps a surface so it’s visible onscreen. Its opposite
is gdk_surface_hide().

When implementing a #GtkWidget, you should call this function on the widget's
#GdkSurface as part of the “map” method.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_show_unraised">
<description>
Shows a #GdkSurface onscreen, but does not modify its stacking
order. In contrast, gdk_surface_show() will raise the surface
to the top of the surface stack.

On the X11 platform, in Xlib terms, this function calls
XMapWindow() (it also updates some internal GDK state, which means
that you can’t really use XMapWindow() directly on a GDK surface).

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_show_window_menu">
<description>
Asks the windowing system to show the window menu. The window menu
is the menu shown when right-clicking the titlebar on traditional
windows managed by the window manager. This is useful for windows
using client-side decorations, activating it with a right-click
on the window decorations.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent to show the menu for
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window menu was shown and %FALSE otherwise.
</return>
</function>

<function name="gdk_surface_stick">
<description>
“Pins” a surface such that it’s on all workspaces and does not scroll
with viewports, for window managers that have scrollable viewports.
(When using #GtkWindow, gtk_window_stick() may be more useful.)

On the X11 platform, this function depends on window manager
support, so may have no effect with many window managers. However,
GDK will do the best it can to convince the window manager to stick
the surface. For window managers that don’t support this operation,
there’s nothing you can do to force it to happen.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_thaw_updates">
<description>
Thaws a surface frozen with gdk_surface_freeze_updates().

</description>
<parameters>
<parameter name="surface">
<parameter_description> a #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_unfullscreen">
<description>
Moves the surface out of fullscreen mode. If the surface was not
fullscreen, does nothing.

On X11, asks the window manager to move @surface out of the fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don’t have a concept of “fullscreen”; so you can’t rely on the
unfullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_unmaximize">
<description>
Unmaximizes the surface. If the surface wasn’t maximized, then this
function does nothing.

On X11, asks the window manager to unmaximize @surface, if the
window manager supports this operation. Not all window managers
support this, and some deliberately ignore it or don’t have a
concept of “maximized”; so you can’t rely on the unmaximization
actually happening. But it will happen with most standard window
managers, and GDK makes a best effort to get it to happen.

On Windows, reliably unmaximizes the surface.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_unstick">
<description>
Reverse operation for gdk_surface_stick(); see gdk_surface_stick(),
and gtk_window_unstick().


</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_surface_withdraw">
<description>
Withdraws a surface (unmaps it and asks the surface manager to forget about it).
This function is not really useful as gdk_surface_hide() automatically
withdraws toplevel surfaces before hiding them.

</description>
<parameters>
<parameter name="surface">
<parameter_description> a toplevel #GdkSurface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_text_property_to_utf8_list_for_display">
<description>
Converts a text property in the given encoding to
a list of UTF-8 strings.


</description>
<parameters>
<parameter name="display">
<parameter_description>  a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> an atom representing the encoding of the text
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   the format of the property
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to convert
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   the length of @text, in bytes
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> location to store the list
of strings or %NULL. The list should be freed with
g_strfreev().
</parameter_description>
</parameter>
</parameters>
<return> the number of strings in the resulting list
</return>
</function>

<function name="gdk_texture_download">
<description>
Downloads the @texture into local memory. This may be
an expensive operation, as the actual texture data may
reside on a GPU or on a remote display server.

The data format of the downloaded data is equivalent to
%CAIRO_FORMAT_ARGB32, so every downloaded pixel requires
4 bytes of memory.

Downloading a texture into a Cairo image surface:
|[&lt;!-- language=&quot;C&quot; --&gt;
surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32,
gdk_texture_get_width (texture),
gdk_texture_get_height (texture));
gdk_texture_download (texture,
cairo_image_surface_get_data (surface),
cairo_image_surface_get_stride (surface));
cairo_surface_mark_dirty (surface);
]|

</description>
<parameters>
<parameter name="texture">
<parameter_description> a #GdkTexture
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> pointer to enough memory to be filled with the
downloaded data of @texture
</parameter_description>
</parameter>
<parameter name="stride">
<parameter_description> rowstride in bytes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_texture_get_height">
<description>
Returns the height of the @texture.


</description>
<parameters>
<parameter name="texture">
<parameter_description> a #GdkTexture
</parameter_description>
</parameter>
</parameters>
<return> the height of the #GdkTexture
</return>
</function>

<function name="gdk_texture_get_width">
<description>
Returns the width of @texture.


</description>
<parameters>
<parameter name="texture">
<parameter_description> a #GdkTexture
</parameter_description>
</parameter>
</parameters>
<return> the width of the #GdkTexture
</return>
</function>

<function name="gdk_texture_new_for_pixbuf">
<description>
Creates a new texture object representing the GdkPixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkTexture
</return>
</function>

<function name="gdk_texture_new_for_surface">
<description>
Creates a new texture object representing the surface.
@surface must be an image surface with format CAIRO_FORMAT_ARGB32.


</description>
<parameters>
<parameter name="surface">
<parameter_description> a cairo image surface
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkTexture
</return>
</function>

<function name="gdk_texture_new_from_file">
<description>
Creates a new texture by loading an image from a file.  The file format is
detected automatically. If %NULL is returned, then @error will be set.


</description>
<parameters>
<parameter name="file">
<parameter_description> #GFile to load
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkTexture or %NULL if an error occured.
</return>
</function>

<function name="gdk_texture_new_from_resource">
<description>
Creates a new texture by loading an image from a resource.
The file format is detected automatically.

It is a fatal error if @resource_path does not specify a valid
image resource and the program will abort if that happens.
If you are unsure about the validity of a resource, use
gdk_texture_new_from_file() to load it.


</description>
<parameters>
<parameter name="resource_path">
<parameter_description> the path of the resource file
</parameter_description>
</parameter>
</parameters>
<return> A newly-created texture
</return>
</function>

<function name="gdk_unicode_to_keyval">
<description>
Convert from a ISO10646 character to a key symbol.


</description>
<parameters>
<parameter name="wc">
<parameter_description> a ISO10646 encoded character
</parameter_description>
</parameter>
</parameters>
<return> the corresponding GDK key symbol, if one exists.
or, if there is no corresponding symbol, 
wc | 0x01000000
</return>
</function>

<function name="gdk_utf8_to_string_target">
<description>
Converts an UTF-8 string into the best possible representation
as a STRING. The representation of characters not in STRING
is not specified; it may be as pseudo-escape sequences
\x{ABCD}, or it may be in some other form of approximation.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 string
</parameter_description>
</parameter>
</parameters>
<return> the newly-allocated string, or %NULL if the
conversion failed. (It should not fail for any properly
formed UTF-8 string unless system limits like memory or
file descriptors are exceeded.)
</return>
</function>

<function name="gdk_vulkan_context_get_device">
<description>
Gets the Vulkan device that this context is using.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkVulkanContext
</parameter_description>
</parameter>
</parameters>
<return> the VkDevice
</return>
</function>

<function name="gdk_vulkan_context_get_draw_index">
<description>
Gets the index of the image that is currently being drawn.

This function can only be used between gdk_surface_begin_draw_frame() and
gdk_surface_end_draw_frame() calls for the toplevel surface that the
@context is associated with.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkVulkanContext
</parameter_description>
</parameter>
</parameters>
<return> the index of the images that is being drawn
</return>
</function>

<function name="gdk_vulkan_context_get_draw_semaphore">
<description>
Gets the Vulkan semaphore that protects access to the image that is
currently being drawn.

This function can only be used between gdk_surface_begin_draw_frame() and
gdk_surface_end_draw_frame() calls for the toplevel surface that the
@context is associated with.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkVulkanContext
</parameter_description>
</parameter>
</parameters>
<return> the VkSemaphore
</return>
</function>

<function name="gdk_vulkan_context_get_image">
<description>
Gets the image with index @id that this context is using.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkVulkanContext
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the index of the image to return
</parameter_description>
</parameter>
</parameters>
<return> the VkImage
</return>
</function>

<function name="gdk_vulkan_context_get_image_format">
<description>
Gets the image format that this context is using.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkVulkanContext
</parameter_description>
</parameter>
</parameters>
<return> the VkFormat
</return>
</function>

<function name="gdk_vulkan_context_get_instance">
<description>
Gets the Vulkan instance that is associated with @context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkVulkanContext
</parameter_description>
</parameter>
</parameters>
<return> the VkInstance
</return>
</function>

<function name="gdk_vulkan_context_get_n_images">
<description>
Gets the number of images that this context is using in its swap chain.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkVulkanContext
</parameter_description>
</parameter>
</parameters>
<return> the number of images
</return>
</function>

<function name="gdk_vulkan_context_get_physical_device">
<description>
Gets the Vulkan physical device that this context is using.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkVulkanContext
</parameter_description>
</parameter>
</parameters>
<return> the VkPhysicalDevice
</return>
</function>

<function name="gdk_vulkan_context_get_queue">
<description>
Gets the Vulkan queue that this context is using.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkVulkanContext
</parameter_description>
</parameter>
</parameters>
<return> the VkQueue
</return>
</function>

<function name="gdk_vulkan_context_get_queue_family_index">
<description>
Gets the family index for the queue that this context is using.
See vkGetPhysicalDeviceQueueFamilyProperties().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkVulkanContext
</parameter_description>
</parameter>
</parameters>
<return> the index
</return>
</function>

</root>
